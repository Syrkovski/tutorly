Index: app/src/main/java/com/tutorly/ui/screens/CalendarScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui\r\n\r\nimport androidx.compose.animation.AnimatedContent\r\nimport androidx.compose.animation.ExperimentalAnimationApi\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.slideInHorizontally\r\nimport androidx.compose.animation.slideOutHorizontally\r\nimport androidx.compose.animation.togetherWith\r\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.gestures.detectHorizontalDragGestures\nimport androidx.compose.foundation.gestures.detectTapGestures\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.items\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clipToBounds\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport com.tutorly.R\nimport com.tutorly.ui.CalendarEvent\nimport com.tutorly.domain.model.PaymentStatusIcon\nimport com.tutorly.models.PaymentStatus\nimport com.tutorly.ui.components.AppTopBar\nimport com.tutorly.ui.components.LessonBrief\nimport com.tutorly.ui.components.WeekMosaic\nimport com.tutorly.ui.theme.NowRed\r\nimport com.tutorly.ui.lessoncreation.LessonCreationConfig\r\nimport com.tutorly.ui.lessoncreation.LessonCreationOrigin\r\nimport com.tutorly.ui.lessoncreation.LessonCreationSheet\r\nimport com.tutorly.ui.lessoncreation.LessonCreationViewModel\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\nimport java.time.DayOfWeek\nimport java.time.Duration\nimport java.time.LocalDate\nimport java.time.LocalTime\nimport java.time.ZonedDateTime\nimport java.time.ZoneId\nimport java.time.YearMonth\nimport java.time.format.DateTimeFormatter\nimport java.time.format.TextStyle\nimport java.time.temporal.TemporalAdjusters\nimport java.util.*\nimport kotlin.math.abs\r\nimport kotlin.math.max\r\nimport kotlin.math.min\r\nimport kotlin.math.roundToInt\r\n\r\nenum class CalendarMode { DAY, WEEK, MONTH }\r\n\r\n@OptIn(ExperimentalAnimationApi::class)\r\n@Composable\r\nfun CalendarScreen(\n    modifier: Modifier = Modifier,\n    onAddStudent: () -> Unit = {},\n    creationViewModel: LessonCreationViewModel,\n    viewModel: CalendarViewModel = hiltViewModel()\n) {\n    val uiState by viewModel.uiState.collectAsState()\r\n    val creationState by creationViewModel.uiState.collectAsState()\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\n    val snackbarHostState = remember { SnackbarHostState() }\n    var direction by remember { mutableStateOf(0) } // -1 назад, +1 вперёд\n    val anchor = uiState.anchor\n    val mode = uiState.mode\n    val zoneId = remember { ZoneId.systemDefault() }\n\n    LessonCardSheet(\n        state = lessonCardState,\n        onDismissRequest = lessonCardViewModel::dismiss,\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\n        onDateSelect = lessonCardViewModel::onDateSelected,\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\n        onPriceChange = lessonCardViewModel::onPriceChanged,\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\n        onNoteChange = lessonCardViewModel::onNoteChanged,\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\n    )\n\n    LaunchedEffect(viewModel) {\n        viewModel.events.collect { event ->\n            when (event) {\n                is CalendarEvent.CreateLesson -> creationViewModel.start(\n                    LessonCreationConfig(\r\n                        start = event.start,\r\n                        duration = event.duration,\r\n                        studentId = event.studentId,\r\n                        zoneId = event.start.zone,\r\n                        origin = LessonCreationOrigin.CALENDAR\r\n                    )\r\n                )\r\n                is CalendarEvent.OpenLesson -> lessonCardViewModel.open(event.lessonId)\n            }\n        }\n    }\n\r\n    LaunchedEffect(creationState.snackbarMessage) {\r\n        creationState.snackbarMessage?.let { message ->\r\n            snackbarHostState.showSnackbar(message)\r\n            creationViewModel.consumeSnackbar()\r\n        }\r\n    }\r\n\r\n    LessonCreationSheet(\r\n        state = creationState,\r\n        onDismiss = { creationViewModel.dismiss() },\r\n        onStudentQueryChange = creationViewModel::onStudentQueryChange,\r\n        onStudentSelect = creationViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            creationViewModel.prepareForStudentCreation()\r\n            creationViewModel.dismiss()\r\n            onAddStudent()\r\n        },\r\n        onSubjectSelect = creationViewModel::onSubjectSelected,\r\n        onDateSelect = creationViewModel::onDateSelected,\r\n        onTimeSelect = creationViewModel::onTimeSelected,\r\n        onDurationChange = creationViewModel::onDurationChanged,\r\n        onPriceChange = creationViewModel::onPriceChanged,\r\n        onNoteChange = creationViewModel::onNoteChanged,\r\n        onSubmit = creationViewModel::submit,\r\n        onConfirmConflict = creationViewModel::confirmConflict,\r\n        onDismissConflict = creationViewModel::dismissConflict\r\n    )\r\n\r\n    val prevPeriod = {\r\n        direction = -1\r\n        viewModel.goToPreviousPeriod()\r\n    }\r\n    val nextPeriod = {\r\n        direction = +1\r\n        viewModel.goToNextPeriod()\r\n    }\r\n\r\n    val swipeModifier = Modifier.pointerInput(mode) {\r\n        val threshold = 48.dp.toPx()\r\n        var totalDrag = 0f\r\n        var handled = false\r\n        detectHorizontalDragGestures(\r\n            onDragStart = {\r\n                totalDrag = 0f\r\n                handled = false\r\n            },\r\n            onDragEnd = {\r\n                totalDrag = 0f\r\n                handled = false\r\n            },\r\n            onDragCancel = {\r\n                totalDrag = 0f\r\n                handled = false\r\n            },\r\n            onHorizontalDrag = { change, dragAmount ->\r\n                if (handled) return@detectHorizontalDragGestures\r\n\r\n                totalDrag += dragAmount\r\n                if (abs(totalDrag) > threshold) {\r\n                    if (totalDrag < 0) nextPeriod() else prevPeriod()\r\n                    handled = true\r\n                    change.consume()\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    Scaffold(\n        modifier = modifier,\n        topBar = {\n            AppTopBar(title = stringResource(id = R.string.calendar_title))\n        },\n        snackbarHost = { SnackbarHost(snackbarHostState) },\n        floatingActionButton = {\n            FloatingActionButton(onClick = {\n                val start = uiState.currentDateTime\n                creationViewModel.start(\n                    LessonCreationConfig(\n                        start = start,\n                        zoneId = uiState.zoneId,\n                        origin = LessonCreationOrigin.CALENDAR\n                    )\n                )\n            }) {\n                Icon(Icons.Filled.Add, contentDescription = null)\n            }\n        }\n    ) { padding ->\n        Column(\n            Modifier\n                .fillMaxSize()\n                .padding(padding)\n        ) {\n        // Хедер: тут же свайп (чтобы не конфликтовал со скроллом списка)\r\n        PlanScreenHeader(\n            anchor = anchor,\n            mode = mode,\n            onModeChange = {\n                direction = 0\n                viewModel.setMode(it)\n            },\n            onPrevPeriod = prevPeriod,\n            onNextPeriod = nextPeriod,\n            onSelectDate = { selected ->\n                direction = when {\n                    selected.isAfter(anchor) -> 1\n                    selected.isBefore(anchor) -> -1\r\n                    else -> 0\r\n                }\r\n                viewModel.selectDate(selected)\r\n            },\r\n            onSwipeLeft = nextPeriod,\r\n            onSwipeRight = prevPeriod\r\n        )\r\n\r\n        // Контент занимает остаток экрана и скроллится внутри\r\n        Box(\r\n            Modifier\r\n                .weight(1f)\r\n                .fillMaxWidth()\r\n                .clipToBounds()\r\n                .then(swipeModifier)   // \uD83D\uDC48 свайп теперь работает по всему экрану\r\n        ) {\r\n            AnimatedContent(\r\n                targetState = anchor,\r\n                modifier = Modifier.fillMaxSize(),\r\n                transitionSpec = {\r\n                    if (direction > 0) {\r\n                        // вперёд (влево)\r\n                        (slideInHorizontally(\r\n                            initialOffsetX = { fullWidth -> fullWidth },\r\n                            animationSpec = tween(durationMillis = 250)\r\n                        ) + fadeIn(animationSpec = tween(250))) togetherWith\r\n                                (slideOutHorizontally(\r\n                                    targetOffsetX = { fullWidth -> -fullWidth / 2 },\r\n                                    animationSpec = tween(durationMillis = 250)\r\n                                ) + fadeOut(animationSpec = tween(250)))\r\n                    } else {\r\n                        // назад (вправо)\r\n                        (slideInHorizontally(\r\n                            initialOffsetX = { fullWidth -> -fullWidth },\r\n                            animationSpec = tween(durationMillis = 250)\r\n                        ) + fadeIn(animationSpec = tween(250))) togetherWith\r\n                                (slideOutHorizontally(\r\n                                    targetOffsetX = { fullWidth -> fullWidth / 2 },\r\n                                    animationSpec = tween(durationMillis = 250)\r\n                                ) + fadeOut(animationSpec = tween(250)))\r\n                    }\r\n                }\r\n                ,\r\n                label = \"day-switch\"\r\n            ) { currentDate ->\r\n                val lessonsForCurrent = remember(currentDate, uiState.lessonsByDate) {\r\n                    uiState.lessonsByDate[currentDate].orEmpty()\r\n                }\r\n                when (mode) {\r\n                    CalendarMode.DAY -> DayTimeline(\r\n                        date = currentDate,\r\n                        lessons = lessonsForCurrent,\r\n                        currentDateTime = uiState.currentDateTime,\r\n                        onLessonClick = { lesson ->\r\n                            lessonCardViewModel.open(lesson.id)\r\n                        },\r\n                        onEmptySlot = { startTime ->\r\n                            viewModel.onEmptySlotSelected(currentDate, startTime, DefaultSlotDuration)\r\n                        }\r\n                    )\r\n                    CalendarMode.WEEK -> WeekMosaic(\n                        anchor = currentDate,\n                        onOpenDay = { selected ->\n                            direction = when {\n                                selected.isAfter(anchor) -> 1\n                                selected.isBefore(anchor) -> -1\n                                else -> 0\n                            }\n                            viewModel.setMode(CalendarMode.DAY)\n                            viewModel.selectDate(selected)\n                        },\n                        dayDataProvider = { date ->\n                            uiState.lessonsByDate[date].orEmpty().map { it.toLessonBrief() }\n                        },\n                        currentDateTime = uiState.currentDateTime,\n                        onLessonClick = { brief -> lessonCardViewModel.open(brief.id) }\n                    )\n                    CalendarMode.MONTH -> MonthCalendar(\n                        anchor = currentDate,\n                        lessonsByDate = uiState.lessonsByDate,\n                        currentDateTime = uiState.currentDateTime,\n                        onDaySelected = { selected ->\n                            direction = when {\n                                selected.isAfter(anchor) -> 1\n                                selected.isBefore(anchor) -> -1\n                                else -> 0\n                            }\n                            viewModel.setMode(CalendarMode.DAY)\n                            viewModel.selectDate(selected)\n                        }\n                    )\n                }\n            }\n        }\n    }\n    }\r\n}\r\n\r\nprivate fun CalendarLesson.toLessonBrief(): LessonBrief {\n    return LessonBrief(\n        id = id,\n        start = start.toLocalTime(),\n        end = end.toLocalTime(),\n        student = studentName,\n        grade = studentGrade,\n        subjectName = subjectName,\n        subjectColorArgb = subjectColorArgb\n    )\n}\n\r\n\n/* ----------------------------- HEADER ----------------------------------- */\n\r\n@Composable\r\nfun PlanScreenHeader(\n    anchor: LocalDate,\n    mode: CalendarMode,\n    onModeChange: (CalendarMode) -> Unit,\n    onPrevPeriod: () -> Unit,\n    onNextPeriod: () -> Unit,\n    onSelectDate: (LocalDate) -> Unit,\n    onSwipeLeft: () -> Unit,\n    onSwipeRight: () -> Unit\n) {\n    Column(\r\n        Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 16.dp, vertical = 8.dp)\r\n            // свайп только на хедере — не мешает вертикальному скроллу списка\r\n            .pointerInput(mode) {\r\n                val threshold = 48.dp.toPx()\r\n                var totalDrag = 0f\r\n                var handled = false\r\n                detectHorizontalDragGestures(\r\n                    onDragStart = {\r\n                        totalDrag = 0f\r\n                        handled = false\r\n                    },\r\n                    onDragEnd = {\r\n                        totalDrag = 0f\r\n                        handled = false\r\n                    },\r\n                    onDragCancel = {\r\n                        totalDrag = 0f\r\n                        handled = false\r\n                    },\r\n                    onHorizontalDrag = { change, dragAmount ->\r\n                        if (handled) return@detectHorizontalDragGestures\r\n\r\n                        totalDrag += dragAmount\r\n                        if (abs(totalDrag) > threshold) {\r\n                            if (totalDrag < 0) onSwipeLeft() else onSwipeRight()\r\n                            handled = true\r\n                            change.consume()\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n    ) {\r\n        Text(\n            text = anchor.format(DateTimeFormatter.ofPattern(\"LLLL yyyy\", Locale(\"ru\")))\n                .replaceFirstChar { it.titlecase(Locale(\"ru\")) },\n            style = MaterialTheme.typography.titleLarge\n        )\n        TabRow(\r\n            selectedTabIndex = mode.ordinal,\r\n            containerColor = Color.Transparent,\r\n            contentColor = MaterialTheme.colorScheme.primary,\r\n            divider = {}\r\n        ) {\r\n            listOf(\"День\", \"Неделя\", \"Месяц\").forEachIndexed { i, label ->\r\n                Tab(\r\n                    selected = i == mode.ordinal,\r\n                    onClick = { onModeChange(CalendarMode.values()[i]) },\r\n                    text = { Text(label) }\r\n                )\r\n            }\r\n        }\r\n        if (mode == CalendarMode.DAY) {\r\n            DayWeekStrip(\r\n                anchor = anchor,\r\n                onSelect = onSelectDate,\r\n                modifier = Modifier.padding(top = 8.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n/* --------------------------- DAY TIMELINE -------------------------------- */\r\n\r\nprivate val GridColor = Color(0xFFE9F0FF)\r\nprivate val SpineColor = Color(0xFF2D7FF9).copy(alpha = 0.6f)\r\nprivate val LabelWidth = 64.dp\r\nprivate val HourHeight = 64.dp\r\nprivate val DefaultSlotDuration: Duration = Duration.ofMinutes(60)\r\nprivate const val MinutesPerHour: Int = 60\r\nprivate const val LAST_TIMELINE_MINUTE: Int = 23 * MinutesPerHour + 30\r\nprivate const val SlotIncrementMinutes: Int = 30\r\n\r\n@Composable\r\nprivate fun DayTimeline(\r\n    date: LocalDate,\r\n    lessons: List<CalendarLesson>,\r\n    currentDateTime: ZonedDateTime,\r\n    onLessonClick: (CalendarLesson) -> Unit,\r\n    onEmptySlot: (LocalTime) -> Unit\r\n) {\r\n    val dayLessons = remember(date, lessons) { lessons }\r\n    val isToday = remember(date, currentDateTime) { currentDateTime.toLocalDate() == date }\r\n    val (startHour, endHourExclusive) = remember(dayLessons) {\r\n        computeTimelineBounds(dayLessons)\r\n    }\r\n    val hours = remember(startHour, endHourExclusive) {\r\n        (startHour until endHourExclusive).map { \"%02d:00\".format(it) }\r\n    }\r\n    val totalHeight: Dp = HourHeight * hours.size\r\n    val totalMinutes = remember(startHour, endHourExclusive) {\r\n        (endHourExclusive - startHour) * MinutesPerHour\r\n    }\r\n\r\n    val scroll = rememberScrollState()\r\n    val density = LocalDensity.current\r\n    val hourHeightPx = remember(density) { with(density) { HourHeight.toPx() } }\r\n    val labelWidthPx = remember(density) { with(density) { LabelWidth.toPx() } }\r\n    val cardInsetPx = remember(density) { with(density) { 8.dp.toPx() } }\r\n    val totalHeightPx = remember(totalHeight, density) { with(density) { totalHeight.toPx() } }\r\n    val minuteHeight = remember { HourHeight / MinutesPerHour }\r\n    val nowMinutesFromStart = remember(isToday, currentDateTime, startHour) {\r\n        if (!isToday) null else {\r\n            val currentMinutes = currentDateTime.hour * MinutesPerHour + currentDateTime.minute\r\n            currentMinutes - startHour * MinutesPerHour\r\n        }\r\n    }\r\n    val nowBadgeOffset = remember(nowMinutesFromStart, totalMinutes) {\r\n        nowMinutesFromStart?.takeIf { it in 0..totalMinutes }?.let { minutes ->\r\n            minuteHeight * minutes.toFloat()\r\n        }\r\n    }\r\n\r\n    val lessonRegions = remember(dayLessons, startHour, hourHeightPx, labelWidthPx, cardInsetPx) {\r\n        val baseMin = startHour * MinutesPerHour\r\n        dayLessons.map { lesson ->\r\n            val startTime = lesson.start.toLocalTime()\r\n            val startMin = startTime.hour * MinutesPerHour + startTime.minute\r\n            val durationMinutes = lesson.duration.toMinutes().coerceAtLeast(SlotIncrementMinutes.toLong())\r\n            val topPx = ((startMin - baseMin).coerceAtLeast(0)) * hourHeightPx / MinutesPerHour\r\n            val heightPx = durationMinutes.toFloat() * hourHeightPx / MinutesPerHour\r\n            TimelineLessonRegion(\r\n                topPx = topPx,\r\n                bottomPx = topPx + heightPx,\r\n                leftPx = labelWidthPx + cardInsetPx\r\n            )\r\n        }\r\n    }\r\n\r\n    // ВЕСЬ день = одна большая \"простыня\" высотой totalHeight; она вертикально скроллится\r\n    Box(\r\n        Modifier\r\n            .fillMaxSize()\r\n            .verticalScroll(scroll)\r\n    ) {\r\n        // Внутренний контейнер фиксированной высоты = весь день\r\n        Box(\r\n            Modifier\r\n                .fillMaxWidth()\r\n                .height(totalHeight)\r\n                .padding(horizontal = 8.dp)\r\n                .pointerInput(dayLessons, startHour, endHourExclusive, lessonRegions) {\r\n                    detectTapGestures { offset ->\r\n                        if (offset.x < labelWidthPx) return@detectTapGestures\r\n                        if (lessonRegions.any { region -> offset.x >= region.leftPx && offset.y in region.topPx..region.bottomPx }) {\r\n                            return@detectTapGestures\r\n                        }\r\n\r\n                        val clampedY = offset.y.coerceIn(0f, totalHeightPx)\r\n                        val minutesWithin = (clampedY / hourHeightPx) * MinutesPerHour\r\n                        val candidate = (startHour * MinutesPerHour) + minutesWithin.roundToInt()\r\n                        val normalized = candidate.coerceIn(0, LAST_TIMELINE_MINUTE)\r\n                        val rounded = (normalized / SlotIncrementMinutes) * SlotIncrementMinutes\r\n                        val hour = rounded / MinutesPerHour\r\n                        val minute = rounded % MinutesPerHour\r\n                        onEmptySlot(LocalTime.of(hour, minute))\r\n                    }\r\n                }\r\n        ) {\r\n            // 1) Сетка фоном\r\n            Canvas(Modifier.matchParentSize()) {\r\n                val rowH = HourHeight.toPx()\r\n                val leftPad = LabelWidth.toPx()\r\n                val spineW = 2.dp.toPx()\r\n\r\n                repeat(hours.size + 1) { i ->\r\n                    val y = i * rowH\r\n                    drawLine(\r\n                        color = GridColor,\r\n                        start = androidx.compose.ui.geometry.Offset(0f, y),\r\n                        end = androidx.compose.ui.geometry.Offset(size.width, y),\r\n                        strokeWidth = 1.dp.toPx()\r\n                    )\r\n                }\r\n                drawRect(\r\n                    color = SpineColor,\r\n                    topLeft = androidx.compose.ui.geometry.Offset(leftPad, 0f),\r\n                    size = androidx.compose.ui.geometry.Size(spineW, size.height)\r\n                )\r\n                nowMinutesFromStart?.takeIf { it in 0..totalMinutes }?.let { minutes ->\r\n                    val y = minutes * rowH / MinutesPerHour\r\n                    drawLine(\r\n                        color = NowRed,\r\n                        start = androidx.compose.ui.geometry.Offset(0f, y),\r\n                        end = androidx.compose.ui.geometry.Offset(size.width, y),\r\n                        strokeWidth = 2.dp.toPx()\r\n                    )\r\n                }\r\n            }\r\n\r\n            // 2) Уроки — точное позиционирование по времени, до правого края\r\n            dayLessons.forEach { lesson ->\n                LessonBlock(\n                    lesson = lesson,\n                    baseHour = startHour,\n                    hourHeight = HourHeight,\n                    now = currentDateTime,\n                    onLessonClick = onLessonClick\n                )\n            }\n\r\n            // 3) Метки времени слева\r\n            Column(\r\n                Modifier\r\n                    .fillMaxHeight()\r\n                    .width(LabelWidth)\r\n            ) {\r\n                hours.forEach {\r\n                    Box(\r\n                        Modifier\r\n                            .height(HourHeight),\r\n                        contentAlignment = Alignment.TopStart\r\n                    ) {\r\n                        Text(it, style = MaterialTheme.typography.labelLarge)\r\n                    }\r\n                }\r\n            }\r\n\r\n            nowBadgeOffset?.let { offset ->\r\n                val centered = offset - 12.dp\r\n                val badgeOffset = if (centered < 0.dp) 0.dp else centered\r\n                Box(\r\n                    Modifier\r\n                        .fillMaxWidth()\r\n                        .offset(y = badgeOffset)\r\n                ) {\r\n                    NowBadge(\n                        modifier = Modifier\n                            .align(Alignment.CenterStart)\n                            .padding(start = 8.dp)\n                    )\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate data class TimelineLessonRegion(\r\n    val topPx: Float,\r\n    val bottomPx: Float,\r\n    val leftPx: Float\r\n)\r\n\r\n@Composable\r\nprivate fun LessonBlock(\n    lesson: CalendarLesson,\n    baseHour: Int,\n    hourHeight: Dp,\n    now: ZonedDateTime,\n    onLessonClick: (CalendarLesson) -> Unit\n) {\n    val startTime = lesson.start.toLocalTime()\r\n    val endTime = lesson.end.toLocalTime()\r\n    val startMin = startTime.hour * 60 + startTime.minute\r\n    val baseMin = baseHour * 60\r\n    val durationMinutes = lesson.duration.toMinutes().coerceAtLeast(SlotIncrementMinutes.toLong())\r\n\r\n    // Переводим минуты в dp (1 мин = hourHeight/60)\r\n    val minuteDp = hourHeight / 60f\r\n    val top = minuteDp * (startMin - baseMin)\r\n    val height = minuteDp * durationMinutes.toInt()\r\n\r\n    val subject = lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\n    val grade = lesson.studentGrade?.takeIf { it.isNotBlank() }?.trim()\n    val firstLine = remember(lesson.studentName, subject, grade) {\n        buildString {\n            append(lesson.studentName)\n            val extras = listOfNotNull(subject, grade)\n            if (extras.isNotEmpty()) {\n                append(\" • \")\n                append(extras.joinToString(\" • \"))\n            }\n        }\n    }\n    val statusInfo = lesson.statusPresentation(now)\n    val containerColor = lesson.subjectColorArgb?.let { Color(it).copy(alpha = 0.12f) }\n        ?: MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)\n\n    Box(\n        Modifier\n            .fillMaxWidth()\r\n            .offset(y = top)\r\n            .height(height)\r\n            .padding(start = LabelWidth + 8.dp, end = 8.dp) // от оси до правого края\r\n    ) {\r\n        Card(\n            onClick = { onLessonClick(lesson) },\n            shape = MaterialTheme.shapes.medium,\n            colors = CardDefaults.cardColors(\n                containerColor = containerColor\n            ),\n            modifier = Modifier.fillMaxSize()\n        ) {\n            Column(\n                Modifier\n                    .fillMaxSize()\n                    .padding(12.dp),\n                verticalArrangement = Arrangement.spacedBy(6.dp)\n            ) {\n                Text(\n                    text = firstLine,\n                    style = MaterialTheme.typography.bodyLarge,\n                    maxLines = 2,\n                    overflow = TextOverflow.Ellipsis\n                )\n                Text(\n                    text = statusInfo.text,\n                    style = MaterialTheme.typography.labelLarge,\n                    color = statusInfo.color\n                )\n            }\n        }\n    }\n}\n\r\nprivate data class LessonStatusPresentation(val text: String, val color: Color)\n\n@Composable\nprivate fun CalendarLesson.statusPresentation(now: ZonedDateTime): LessonStatusPresentation {\n    val todayColor = MaterialTheme.colorScheme.primary\n    val paidColor = MaterialTheme.colorScheme.tertiary\n    val dueColor = MaterialTheme.colorScheme.error\n    val cancelledColor = MaterialTheme.colorScheme.outline\n\n    val status = paymentStatus\n    val text: String\n    val color: Color\n\n    if (status == PaymentStatus.CANCELLED) {\n        text = stringResource(R.string.lesson_status_cancelled)\n        color = cancelledColor\n    } else if (now.isBefore(start)) {\n        if (status == PaymentStatus.PAID) {\n            text = stringResource(R.string.calendar_status_prepaid)\n            color = paidColor\n        } else {\n            text = stringResource(R.string.calendar_status_planned)\n            color = todayColor\n        }\n    } else if (now.isAfter(end)) {\n        if (status == PaymentStatus.PAID) {\n            text = stringResource(R.string.lesson_status_paid)\n            color = paidColor\n        } else {\n            text = stringResource(R.string.lesson_status_due)\n            color = dueColor\n        }\n    } else {\n        text = stringResource(R.string.calendar_status_in_progress)\n        color = todayColor\n    }\n\n    return LessonStatusPresentation(text = text, color = color)\n}\n\r\n@Composable\r\nprivate fun NowBadge(modifier: Modifier = Modifier) {\r\n    Surface(\r\n        color = NowRed,\r\n        contentColor = Color.White,\r\n        shape = MaterialTheme.shapes.small,\r\n        modifier = modifier\r\n    ) {\r\n        Text(\r\n            text = stringResource(R.string.calendar_now_badge),\r\n            style = MaterialTheme.typography.labelSmall,\r\n            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\nprivate fun computeTimelineBounds(lessons: List<CalendarLesson>): Pair<Int, Int> {\r\n    val defaultStart = 9\r\n    val defaultEnd = 21\r\n    if (lessons.isEmpty()) return defaultStart to defaultEnd\r\n\r\n    val earliestMinutes = lessons.minOf { it.start.hour * 60 + it.start.minute }\r\n    val latestMinutes = lessons.maxOf { it.end.hour * 60 + it.end.minute }\r\n    val startHour = min(defaultStart, earliestMinutes / 60)\r\n    val endHourExclusive = max(defaultEnd, ((latestMinutes + 59) / 60))\r\n    return startHour to max(endHourExclusive, startHour + 1)\r\n}\r\n\r\n/* ----------------------------- MONTH GRID -------------------------------- */\n\n@Composable\nprivate fun MonthCalendar(\n    anchor: LocalDate,\n    lessonsByDate: Map<LocalDate, List<CalendarLesson>>,\n    currentDateTime: ZonedDateTime,\n    onDaySelected: (LocalDate) -> Unit\n) {\n    val month = remember(anchor) { YearMonth.from(anchor) }\n    val firstDay = remember(month) { month.atDay(1) }\n    val lastDay = remember(month) { month.atEndOfMonth() }\n    val rangeStart = remember(firstDay) { firstDay.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY)) }\n    val rangeEnd = remember(lastDay) { lastDay.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY)) }\n    val days = remember(rangeStart, rangeEnd) {\n        generateSequence(rangeStart) { it.plusDays(1) }\n            .takeWhile { !it.isAfter(rangeEnd) }\n            .toList()\n    }\n    val today = remember(currentDateTime) { currentDateTime.toLocalDate() }\n    val weekDays = remember {\n        listOf(\n            DayOfWeek.MONDAY,\n            DayOfWeek.TUESDAY,\n            DayOfWeek.WEDNESDAY,\n            DayOfWeek.THURSDAY,\n            DayOfWeek.FRIDAY,\n            DayOfWeek.SATURDAY,\n            DayOfWeek.SUNDAY\n        )\n    }\n\n    Column(Modifier.fillMaxSize()) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(horizontal = 12.dp, vertical = 4.dp),\n            horizontalArrangement = Arrangement.SpaceBetween\n        ) {\n            weekDays.forEach { dayOfWeek ->\n                val label = dayOfWeek.getDisplayName(TextStyle.NARROW_STANDALONE, Locale(\"ru\"))\n                    .uppercase(Locale(\"ru\"))\n                Text(\n                    text = label,\n                    style = MaterialTheme.typography.labelSmall,\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\n                    modifier = Modifier.weight(1f),\n                    textAlign = TextAlign.Center\n                )\n            }\n        }\n\n        LazyVerticalGrid(\n            columns = GridCells.Fixed(7),\n            modifier = Modifier.fillMaxSize(),\n            contentPadding = PaddingValues(horizontal = 8.dp, vertical = 8.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp),\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            items(days) { date ->\n                val lessons = lessonsByDate[date].orEmpty()\n                MonthDayCell(\n                    date = date,\n                    inCurrentMonth = date.month == month.month,\n                    isToday = date == today,\n                    lessons = lessons,\n                    onClick = { onDaySelected(date) }\n                )\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun MonthDayCell(\n    date: LocalDate,\n    inCurrentMonth: Boolean,\n    isToday: Boolean,\n    lessons: List<CalendarLesson>,\n    onClick: () -> Unit\n) {\n    val containerColor = when {\n        isToday -> MaterialTheme.colorScheme.primary.copy(alpha = 0.12f)\n        lessons.isNotEmpty() -> MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.35f)\n        else -> Color.Transparent\n    }\n    val border = if (isToday) BorderStroke(1.dp, MaterialTheme.colorScheme.primary) else null\n    val contentColor = if (inCurrentMonth) {\n        MaterialTheme.colorScheme.onSurface\n    } else {\n        MaterialTheme.colorScheme.onSurface.copy(alpha = 0.4f)\n    }\n\n    Surface(\n        color = containerColor,\n        shape = MaterialTheme.shapes.medium,\n        border = border,\n        modifier = Modifier\n            .aspectRatio(1f)\n            .clip(MaterialTheme.shapes.medium)\n            .clickable(onClick = onClick)\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(8.dp),\n            verticalArrangement = Arrangement.SpaceBetween\n        ) {\n            Text(\n                text = date.dayOfMonth.toString(),\n                style = MaterialTheme.typography.bodyMedium,\n                color = contentColor\n            )\n            if (lessons.isNotEmpty()) {\n                Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\n                    lessons.take(2).forEach { lesson ->\n                        Text(\n                            text = lesson.studentName,\n                            style = MaterialTheme.typography.labelSmall,\n                            color = contentColor,\n                            maxLines = 1,\n                            overflow = TextOverflow.Ellipsis\n                        )\n                    }\n                    val remaining = lessons.size - min(lessons.size, 2)\n                    if (remaining > 0) {\n                        Text(\n                            text = \"+$remaining\",\n                            style = MaterialTheme.typography.labelSmall,\n                            color = contentColor.copy(alpha = 0.8f)\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\r\n/* --------------------------- DAY/WEEK STRIP ------------------------------ */\r\n\r\n@Composable\r\nfun DayWeekStrip(\r\n    anchor: LocalDate,\r\n    onSelect: (LocalDate) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val monday = anchor.with(DayOfWeek.MONDAY)\r\n    val days = remember(monday) { (0..6).map { monday.plusDays(it.toLong()) } }\r\n\r\n    Row(modifier.padding(top = 8.dp)) {\r\n        days.forEachIndexed { idx, d ->\r\n            val selected = d == anchor\r\n            DayTwoLineChip(\r\n                date = d,\r\n                selected = selected,\r\n                onClick = { onSelect(d) },\r\n                modifier = Modifier\r\n                    .weight(1f)\r\n                    .height(48.dp)\r\n                    .then(if (idx < days.lastIndex) Modifier.padding(end = 8.dp) else Modifier)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DayTwoLineChip(\r\n    date: LocalDate,\r\n    selected: Boolean,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val bg = if (selected) Color(0x1A2D7FF9) else Color(0xFFF2F3F7)\r\n    val fg = if (selected) Color(0xFF2D7FF9) else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f)\r\n    Surface(\r\n        color = bg,\r\n        shape = MaterialTheme.shapes.medium,\r\n        onClick = onClick,\r\n        modifier = modifier\r\n    ) {\r\n        Column(\r\n            Modifier\r\n                .fillMaxSize()\r\n                .padding(horizontal = 8.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.Center\r\n        ) {\r\n            Text(\r\n                date.dayOfWeek.getDisplayName(TextStyle.SHORT, Locale(\"ru\"))\r\n                    .replaceFirstChar { it.titlecase(Locale(\"ru\")) },\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = fg\r\n            )\r\n            Text(\r\n                \"${date.dayOfMonth}\",\r\n                style = MaterialTheme.typography.labelLarge,\r\n                color = fg\r\n            )\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/CalendarScreen.kt b/app/src/main/java/com/tutorly/ui/screens/CalendarScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/CalendarScreen.kt	(revision c4c1b979c040baf0a45ebe7efb2089e930ba38fb)
+++ b/app/src/main/java/com/tutorly/ui/screens/CalendarScreen.kt	(date 1760137159324)
@@ -10,6 +10,7 @@
 import androidx.compose.animation.togetherWith
 import androidx.compose.foundation.BorderStroke
 import androidx.compose.foundation.Canvas
+import androidx.compose.foundation.clickable
 import androidx.compose.foundation.gestures.detectHorizontalDragGestures
 import androidx.compose.foundation.gestures.detectTapGestures
 import androidx.compose.foundation.layout.*
@@ -25,6 +26,7 @@
 import androidx.compose.runtime.collectAsState
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.clip
 import androidx.compose.ui.draw.clipToBounds
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.input.pointer.pointerInput
Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\r\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.YearMonth\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\r\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\r\n    LessonCardSheet(\r\n        state = lessonCardState,\r\n        onDismissRequest = lessonCardViewModel::dismiss,\r\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\r\n        onDateSelect = lessonCardViewModel::onDateSelected,\r\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\r\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\r\n        onPriceChange = lessonCardViewModel::onPriceChanged,\r\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\r\n        onNoteChange = lessonCardViewModel::onNoteChanged,\r\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\r\n    )\r\n\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Add,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onRateChange = vm::onEditorRateChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                },\r\n                onLessonClick = { lessonId ->\r\n                    vm.clearSelectedStudent()\r\n                    lessonCardViewModel.open(lessonId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .imePadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            modifier = Modifier\r\n                .weight(1f, fill = false)\r\n                .fillMaxWidth(),\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_editor_save)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val rate = item.profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n    val subtitle = listOfNotNull(subject, grade, rate)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onLessonClick: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onLessonClick = onLessonClick,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onLessonClick: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val locale = remember { Locale(\"ru\", \"RU\") }\r\n    val currencyFormatter = remember(locale) {\r\n        NumberFormat.getCurrencyInstance(locale).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val monthFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"LLLL yyyy\", locale) }\r\n\r\n    val groupedLessons = remember(profile.recentLessons, zoneId) {\r\n        val sorted = profile.recentLessons.sortedByDescending { it.startAt }\r\n        val groups = linkedMapOf<YearMonth, MutableList<StudentProfileLesson>>()\r\n        sorted.forEach { lesson ->\r\n            val key = YearMonth.from(lesson.startAt.atZone(zoneId))\r\n            groups.getOrPut(key) { mutableListOf() }.add(lesson)\r\n        }\r\n        groups.map { it.key to it.value.toList() }\r\n    }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                groupedLessons.forEach { (month, lessons) ->\r\n                    item(key = \"month-$month\") {\r\n                        val monthTitle = remember(month) {\r\n                            month.format(monthFormatter).replaceFirstChar { char ->\r\n                                if (char.isLowerCase()) char.titlecase(locale) else char.toString()\r\n                            }\r\n                        }\r\n                        Text(\r\n                            text = monthTitle,\r\n                            style = MaterialTheme.typography.titleSmall,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                            modifier = Modifier.padding(top = 4.dp, bottom = 8.dp)\r\n                        )\r\n                    }\r\n                    items(lessons, key = { it.id }) { lesson ->\r\n                        StudentProfileLessonCard(\r\n                            lesson = lesson,\r\n                            fallbackSubject = profile.subject,\r\n                            currencyFormatter = currencyFormatter,\r\n                            zoneId = zoneId,\r\n                            dateFormatter = dateFormatter,\r\n                            timeFormatter = timeFormatter,\r\n                            onClick = { onLessonClick(lesson.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n            val details = listOfNotNull(subject, grade).joinToString(separator = \" \")\r\n            if (details.isNotEmpty()) {\r\n                Text(\r\n                    text = details,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = 2,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n            val rateText = profile.rate?.let { rate ->\r\n                val price = formatCurrency(rate.priceCents.toLong(), currencyFormatter)\r\n                if (rate.durationMinutes > 0) {\r\n                    \"$price • ${rate.durationMinutes} мин\"\r\n                } else {\r\n                    price\r\n                }\r\n            } ?: profile.student.rateCents?.takeIf { it > 0 }?.let { cents ->\r\n                formatCurrency(cents.toLong(), currencyFormatter)\r\n            }\r\n            if (!rateText.isNullOrBlank()) {\r\n                Text(\r\n                    text = rateText,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n        }\r\n        IconButton(onClick = { onEdit(profile.student.id) }) {\r\n            Icon(\r\n                imageVector = Icons.Filled.Edit,\r\n                contentDescription = stringResource(id = R.string.student_details_edit)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val paidLessons = metrics.paidLessons.toString()\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid_lessons),\r\n                value = paidLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clickable { onClick() },\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision c4c1b979c040baf0a45ebe7efb2089e930ba38fb)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760137159342)
@@ -51,6 +51,7 @@
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.foundation.rememberScrollState
+import androidx.compose.material.icons.filled.Close
 import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.ui.Alignment
Index: app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.lessoncard\r\n\r\nimport android.app.DatePickerDialog\r\nimport android.app.TimePickerDialog\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.weight\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.KeyboardArrowDown\r\nimport androidx.compose.material.icons.outlined.CalendarMonth\r\nimport androidx.compose.material.icons.outlined.Schedule\r\nimport androidx.compose.material.icons.outlined.Timelapse\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.SuggestionChip\r\nimport androidx.compose.material3.SuggestionChipDefaults\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport com.tutorly.R\r\nimport com.tutorly.models.PaymentStatus\r\nimport java.text.NumberFormat\r\nimport java.time.LocalDate\r\nimport java.time.LocalTime\r\nimport java.time.ZonedDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Locale\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\ninternal fun LessonCardSheet(\r\n    state: LessonCardUiState,\r\n    onDismissRequest: () -> Unit,\r\n    onStudentSelect: (Long) -> Unit,\r\n    onDateSelect: (LocalDate) -> Unit,\r\n    onTimeSelect: (LocalTime) -> Unit,\r\n    onDurationSelect: (Int) -> Unit,\r\n    onPriceChange: (Int) -> Unit,\r\n    onStatusSelect: (PaymentStatus) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSnackbarConsumed: () -> Unit,\r\n) {\r\n    if (!state.isVisible) return\r\n\r\n    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val scope = rememberCoroutineScope()\r\n\r\n    var showStudentPicker by remember { mutableStateOf(false) }\r\n    var showDurationDialog by remember { mutableStateOf(false) }\r\n    var showPriceDialog by remember { mutableStateOf(false) }\r\n    var showNoteDialog by remember { mutableStateOf(false) }\r\n    var statusMenuExpanded by remember { mutableStateOf(false) }\r\n\r\n    val locale = state.locale\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"EEEE, d MMMM\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val currencyFormatter = remember(locale, state.currencyCode) {\r\n        runCatching {\r\n            NumberFormat.getCurrencyInstance(locale).apply {\r\n                currency = java.util.Currency.getInstance(state.currencyCode)\r\n            }\r\n        }.getOrElse { NumberFormat.getCurrencyInstance(locale) }\r\n    }\r\n    val priceText = remember(state.priceCents, currencyFormatter) {\r\n        currencyFormatter.format(state.priceCents / 100.0)\r\n    }\r\n    val formattedDate = remember(state.date, locale) {\r\n        dateFormatter.format(state.date).replaceFirstChar { char ->\r\n            if (char.isLowerCase()) char.titlecase(locale) else char.toString()\r\n        }\r\n    }\r\n    val startDateTime = remember(state.date, state.time, state.zoneId) {\r\n        ZonedDateTime.of(state.date, state.time, state.zoneId)\r\n    }\r\n    val statusDisplay = remember(state.paymentStatus, startDateTime) {\r\n        paymentStatusDisplay(state.paymentStatus, startDateTime)\r\n    }\r\n\r\n    val snackbarText = when (val message = state.snackbarMessage) {\r\n        is LessonCardMessage.Error -> message.message ?: stringResource(R.string.lesson_card_snackbar_error)\r\n        null -> null\r\n    }\r\n\r\n    LaunchedEffect(snackbarText) {\r\n        if (snackbarText != null) {\r\n            snackbarHostState.showSnackbar(snackbarText)\r\n            onSnackbarConsumed()\r\n        }\r\n    }\r\n\r\n    ModalBottomSheet(\r\n        onDismissRequest = {\r\n            scope.launch { sheetState.hide() }.invokeOnCompletion { onDismissRequest() }\r\n        },\r\n        sheetState = sheetState,\r\n        containerColor = Color.White,\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n        ) {\r\n            if (state.isLoading) {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .height(200.dp),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            } else {\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .verticalScroll(rememberScrollState()),\r\n                    verticalArrangement = Arrangement.spacedBy(20.dp)\r\n                ) {\r\n                    if (state.isSaving) {\r\n                        LinearProgressIndicator(modifier = Modifier.fillMaxWidth())\r\n                    }\r\n\r\n                    LessonHeader(\r\n                        name = state.studentName,\r\n                        grade = state.studentGrade,\r\n                        subject = state.subjectName,\r\n                        onClick = { if (state.studentOptions.isNotEmpty()) showStudentPicker = true }\r\n                    )\r\n\r\n                    DateRow(\r\n                        dateText = formattedDate,\r\n                        onClick = {\r\n                            val context = LocalContext.current\r\n                            DatePickerDialog(\r\n                                context,\r\n                                { _, year, month, day -> onDateSelect(LocalDate.of(year, month + 1, day)) },\r\n                                state.date.year,\r\n                                state.date.monthValue - 1,\r\n                                state.date.dayOfMonth\r\n                            ).show()\r\n                        }\r\n                    )\r\n\r\n                    TimeDurationRow(\r\n                        timeLabel = stringResource(id = R.string.lesson_details_time_label),\r\n                        timeText = state.time.format(timeFormatter),\r\n                        durationLabel = stringResource(id = R.string.lesson_details_duration_label),\r\n                        durationText = stringResource(id = R.string.lesson_card_duration_value, state.durationMinutes),\r\n                        onTimeClick = {\r\n                            val context = LocalContext.current\r\n                            TimePickerDialog(\r\n                                context,\r\n                                { _, hour, minute -> onTimeSelect(LocalTime.of(hour, minute)) },\r\n                                state.time.hour,\r\n                                state.time.minute,\r\n                                true\r\n                            ).show()\r\n                        },\r\n                        onDurationClick = { showDurationDialog = true }\r\n                    )\r\n\r\n                    PriceRow(\r\n                        price = priceText,\r\n                        statusLabel = stringResource(id = statusDisplay.labelRes),\r\n                        statusSymbol = statusDisplay.symbol,\r\n                        startDateTime = startDateTime,\r\n                        statusMenuExpanded = statusMenuExpanded,\r\n                        onPriceClick = { showPriceDialog = true },\r\n                        onStatusClick = { if (!state.isPaymentActionRunning) statusMenuExpanded = true },\r\n                        onStatusDismiss = { statusMenuExpanded = false },\r\n                        onStatusSelect = onStatusSelect,\r\n                        isStatusBusy = state.isPaymentActionRunning\r\n                    )\r\n\r\n                    NoteRow(\r\n                        note = state.note,\r\n                        onClick = { showNoteDialog = true }\r\n                    )\r\n\r\n                    Spacer(modifier = Modifier.height(8.dp))\r\n                }\r\n            }\r\n\r\n            SnackbarHost(\r\n                hostState = snackbarHostState,\r\n                modifier = Modifier\r\n                    .align(Alignment.BottomCenter)\r\n                    .padding(bottom = 8.dp)\r\n            )\r\n        }\r\n    }\r\n\r\n    if (showStudentPicker) {\r\n        StudentPickerDialog(\r\n            options = state.studentOptions,\r\n            onSelect = {\r\n                onStudentSelect(it)\r\n                showStudentPicker = false\r\n            },\r\n            onDismiss = { showStudentPicker = false }\r\n        )\r\n    }\r\n\r\n    if (showDurationDialog) {\r\n        DurationDialog(\r\n            currentMinutes = state.durationMinutes,\r\n            onDismiss = { showDurationDialog = false },\r\n            onConfirm = {\r\n                onDurationSelect(it)\r\n                showDurationDialog = false\r\n            }\r\n        )\r\n    }\r\n\r\n    if (showPriceDialog) {\r\n        PriceDialog(\r\n            currentPriceCents = state.priceCents,\r\n            currencySymbol = state.currencySymbol,\r\n            onDismiss = { showPriceDialog = false },\r\n            onConfirm = {\r\n                onPriceChange(it)\r\n                showPriceDialog = false\r\n            }\r\n        )\r\n    }\r\n\r\n    if (showNoteDialog) {\r\n        NoteDialog(\r\n            currentNote = state.note.orEmpty(),\r\n            onDismiss = { showNoteDialog = false },\r\n            onConfirm = {\r\n                onNoteChange(it)\r\n                showNoteDialog = false\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonHeader(\r\n    name: String,\r\n    grade: String?,\r\n    subject: String?,\r\n    onClick: () -> Unit,\r\n) {\r\n    val initials = remember(name) {\r\n        name.split(\" \").filter { it.isNotBlank() }.take(2).map { it.first().uppercase() }.joinToString(\"\")\r\n    }\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(onClick = onClick),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Surface(\r\n            modifier = Modifier.size(48.dp),\r\n            shape = CircleShape,\r\n            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f)\r\n        ) {\r\n            Box(contentAlignment = Alignment.Center) {\r\n                Text(\r\n                    text = initials.ifBlank { \"?\" },\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.SemiBold,\r\n                    color = MaterialTheme.colorScheme.primary\r\n                )\r\n            }\r\n        }\r\n        Column(modifier = Modifier.weight(1f)) {\r\n            Text(\r\n                text = name.ifBlank { stringResource(id = R.string.lesson_card_student_placeholder) },\r\n                style = MaterialTheme.typography.titleLarge,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subtitle = listOfNotNull(grade, subject).filter { it.isNotBlank() }.joinToString(\" • \")\r\n            if (subtitle.isNotBlank()) {\r\n                Text(\r\n                    text = subtitle,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n        }\r\n        Icon(\r\n            imageVector = Icons.Filled.KeyboardArrowDown,\r\n            contentDescription = null,\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DateRow(\r\n    dateText: String,\r\n    onClick: () -> Unit,\r\n) {\r\n    Surface(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(onClick = onClick),\r\n        shape = RoundedCornerShape(20.dp),\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 16.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Icon(\r\n                imageVector = Icons.Outlined.CalendarMonth,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.primary\r\n            )\r\n            Column {\r\n                Text(\r\n                    text = stringResource(id = R.string.lesson_card_date_label),\r\n                    style = MaterialTheme.typography.labelMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                Text(\r\n                    text = dateText,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TimeDurationRow(\r\n    timeLabel: String,\r\n    timeText: String,\r\n    durationLabel: String,\r\n    durationText: String,\r\n    onTimeClick: () -> Unit,\r\n    onDurationClick: () -> Unit,\r\n) {\r\n    Row(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        TimeCard(\r\n            label = timeLabel,\r\n            value = timeText,\r\n            icon = Icons.Outlined.Schedule,\r\n            onClick = onTimeClick,\r\n            modifier = Modifier.weight(1f)\r\n        )\r\n        TimeCard(\r\n            label = durationLabel,\r\n            value = durationText,\r\n            icon = Icons.Outlined.Timelapse,\r\n            onClick = onDurationClick,\r\n            modifier = Modifier.weight(1f)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TimeCard(\r\n    label: String,\r\n    value: String,\r\n    icon: ImageVector,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Surface(\r\n        modifier = modifier.clickable(onClick = onClick),\r\n        shape = RoundedCornerShape(20.dp),\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Icon(\r\n                imageVector = icon,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.primary,\r\n                modifier = Modifier.size(24.dp)\r\n            )\r\n            Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n                Text(\r\n                    text = label,\r\n                    style = MaterialTheme.typography.labelMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PriceRow(\r\n    price: String,\r\n    statusLabel: String,\r\n    statusSymbol: String,\r\n    startDateTime: ZonedDateTime,\r\n    statusMenuExpanded: Boolean,\r\n    onPriceClick: () -> Unit,\r\n    onStatusClick: () -> Unit,\r\n    onStatusDismiss: () -> Unit,\r\n    onStatusSelect: (PaymentStatus) -> Unit,\r\n    isStatusBusy: Boolean,\r\n) {\r\n    Row(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .weight(1f)\r\n                .clickable(onClick = onPriceClick)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.lesson_card_price_label),\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = price,\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n        }\r\n        Box {\r\n            Surface(\r\n                shape = RoundedCornerShape(20.dp),\r\n                color = MaterialTheme.colorScheme.surfaceVariant,\r\n                modifier = Modifier\r\n                    .clickable(onClick = onStatusClick)\r\n                    .padding(vertical = 4.dp)\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier\r\n                        .padding(horizontal = 14.dp, vertical = 8.dp),\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    if (isStatusBusy) {\r\n                        CircularProgressIndicator(\r\n                            modifier = Modifier.size(16.dp),\r\n                            strokeWidth = 2.dp\r\n                        )\r\n                    } else {\r\n                        Text(text = statusSymbol, style = MaterialTheme.typography.titleMedium)\r\n                    }\r\n                    Text(\r\n                        text = statusLabel,\r\n                        style = MaterialTheme.typography.labelLarge\r\n                    )\r\n                }\r\n            }\r\n            DropdownMenu(\r\n                expanded = statusMenuExpanded,\r\n                onDismissRequest = onStatusDismiss\r\n            ) {\r\n                listOf(PaymentStatus.UNPAID, PaymentStatus.PAID, PaymentStatus.DUE).forEach { status ->\r\n                    val display = paymentStatusDisplay(status, startDateTime)\r\n                    DropdownMenuItem(\r\n                        text = { Text(\"${display.symbol} ${stringResource(id = display.labelRes)}\") },\r\n                        onClick = {\r\n                            onStatusSelect(status)\r\n                            onStatusDismiss()\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun NoteRow(\r\n    note: String?,\r\n    onClick: () -> Unit,\r\n) {\r\n    Surface(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(onClick = onClick),\r\n        shape = RoundedCornerShape(20.dp),\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.lesson_card_note_label),\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            val content = note?.takeIf { it.isNotBlank() }\r\n            if (content == null) {\r\n                Text(\r\n                    text = stringResource(id = R.string.lesson_card_note_placeholder),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            } else {\r\n                Text(\r\n                    text = content,\r\n                    style = MaterialTheme.typography.bodyMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentPickerDialog(\r\n    options: List<LessonStudentOption>,\r\n    onSelect: (Long) -> Unit,\r\n    onDismiss: () -> Unit,\r\n) {\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_card_student_picker_title)) },\r\n        text = {\r\n            if (options.isEmpty()) {\r\n                Text(text = stringResource(id = R.string.lesson_card_student_picker_empty))\r\n            } else {\r\n                LazyColumn(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                    items(options, key = { it.id }) { option ->\r\n                        Column(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .clickable { onSelect(option.id) }\r\n                                .padding(vertical = 4.dp)\r\n                        ) {\r\n                            Text(\r\n                                text = option.name,\r\n                                style = MaterialTheme.typography.titleMedium\r\n                            )\r\n                            val subtitle = listOfNotNull(option.grade, option.subject)\r\n                                .filter { it.isNotBlank() }\r\n                                .joinToString(\" • \")\r\n                            if (subtitle.isNotBlank()) {\r\n                                Text(\r\n                                    text = subtitle,\r\n                                    style = MaterialTheme.typography.bodySmall,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        confirmButton = {},\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_cancel))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun DurationDialog(\r\n    currentMinutes: Int,\r\n    onDismiss: () -> Unit,\r\n    onConfirm: (Int) -> Unit,\r\n) {\r\n    var customInput by remember(currentMinutes) {\r\n        mutableStateOf(currentMinutes.takeIf { it > 0 }?.toString().orEmpty())\r\n    }\r\n    val presets = listOf(25, 60, 90, 120)\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_card_duration_title)) },\r\n        text = {\r\n            Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    presets.forEach { preset ->\r\n                        SuggestionChip(\r\n                            onClick = {\r\n                                customInput = preset.toString()\r\n                            },\r\n                            label = { Text(text = preset.toString()) },\r\n                            colors = SuggestionChipDefaults.suggestionChipColors()\r\n                        )\r\n                    }\r\n                }\r\n                OutlinedTextField(\r\n                    value = customInput,\r\n                    onValueChange = { value ->\r\n                        customInput = value.filter { it.isDigit() }\r\n                    },\r\n                    label = { Text(text = stringResource(id = R.string.lesson_card_duration_hint)) },\r\n                    suffix = { Text(text = stringResource(id = R.string.lesson_create_minutes_suffix)) },\r\n                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n                    singleLine = true\r\n                )\r\n            }\r\n        },\r\n        confirmButton = {\r\n            TextButton(onClick = {\r\n                customInput.toIntOrNull()?.takeIf { it > 0 }?.let(onConfirm)\r\n            }) {\r\n                Text(text = stringResource(id = R.string.lesson_details_save))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_cancel))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun PriceDialog(\r\n    currentPriceCents: Int,\r\n    currencySymbol: String,\r\n    onDismiss: () -> Unit,\r\n    onConfirm: (Int) -> Unit,\r\n) {\r\n    var input by remember(currentPriceCents) {\r\n        mutableStateOf(currentPriceCents.takeIf { it >= 0 }?.let { (it / 100).toString() } ?: \"\")\r\n    }\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_card_price_title)) },\r\n        text = {\r\n            OutlinedTextField(\r\n                value = input,\r\n                onValueChange = { value ->\r\n                    input = value.filter { it.isDigit() }\r\n                },\r\n                label = { Text(text = stringResource(id = R.string.lesson_card_price_hint, currencySymbol)) },\r\n                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n                singleLine = true\r\n            )\r\n        },\r\n        confirmButton = {\r\n            TextButton(onClick = {\r\n                input.toIntOrNull()?.let { onConfirm(it * 100) }\r\n            }) {\r\n                Text(text = stringResource(id = R.string.lesson_details_save))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_cancel))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun NoteDialog(\r\n    currentNote: String,\r\n    onDismiss: () -> Unit,\r\n    onConfirm: (String) -> Unit,\r\n) {\r\n    var noteInput by remember(currentNote) { mutableStateOf(currentNote) }\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_card_note_title)) },\r\n        text = {\r\n            OutlinedTextField(\r\n                value = noteInput,\r\n                onValueChange = { value ->\r\n                    noteInput = value.take(LESSON_CARD_NOTE_LIMIT)\r\n                },\r\n                label = { Text(text = stringResource(id = R.string.lesson_card_note_hint)) },\r\n                modifier = Modifier.height(120.dp)\r\n            )\r\n        },\r\n        confirmButton = {\r\n            TextButton(onClick = { onConfirm(noteInput) }) {\r\n                Text(text = stringResource(id = R.string.lesson_details_save))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_cancel))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nprivate data class PaymentStatusDisplay(val symbol: String, val labelRes: Int)\r\n\r\nprivate fun paymentStatusDisplay(status: PaymentStatus, start: ZonedDateTime): PaymentStatusDisplay {\r\n    val isFuture = start.isAfter(ZonedDateTime.now(start.zone))\r\n    val labelRes = when (status) {\r\n        PaymentStatus.UNPAID -> R.string.lesson_card_status_planned\r\n        PaymentStatus.PAID -> if (isFuture) R.string.lesson_card_status_prepaid else R.string.lesson_status_paid\r\n        PaymentStatus.DUE -> R.string.lesson_status_due\r\n        PaymentStatus.CANCELLED -> R.string.lesson_status_cancelled\r\n    }\r\n    val symbol = when (status) {\r\n        PaymentStatus.UNPAID -> \"•\"\r\n        PaymentStatus.PAID -> if (isFuture) \"◎\" else \"✓\"\r\n        PaymentStatus.DUE -> \"–\"\r\n        PaymentStatus.CANCELLED -> \"×\"\r\n    }\r\n    return PaymentStatusDisplay(symbol, labelRes)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt b/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt
--- a/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt	(revision c4c1b979c040baf0a45ebe7efb2089e930ba38fb)
+++ b/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt	(date 1760177411789)
@@ -341,7 +341,7 @@
 @Composable
 private fun DateRow(
     dateText: String,
-    onClick: () -> Unit,
+    onClick: @Composable () -> Unit,
 ) {
     Surface(
         modifier = Modifier
