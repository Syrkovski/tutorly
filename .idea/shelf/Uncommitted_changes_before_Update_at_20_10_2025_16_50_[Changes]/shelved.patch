Index: app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.lessoncreation\r\n\r\nimport android.app.DatePickerDialog\r\nimport android.app.TimePickerDialog\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.ColumnScope\r\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\r\nimport androidx.compose.foundation.layout.FlowRow\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.RowScope\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.heightIn\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Book\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Description\r\nimport androidx.compose.material.icons.filled.Person\r\nimport androidx.compose.material.icons.filled.Schedule\r\nimport androidx.compose.material.icons.outlined.CalendarMonth\r\nimport androidx.compose.material.icons.outlined.CurrencyRuble\r\nimport androidx.compose.material.icons.outlined.Schedule\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FilterChip\r\nimport androidx.compose.material3.FilterChipDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.LocalTextStyle\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.OutlinedTextFieldDefaults\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.SheetState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.focus.focusRequester\r\nimport androidx.compose.ui.focus.onFocusChanged\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.onGloballyPositioned\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.IntSize\r\nimport androidx.compose.ui.unit.dp\r\nimport com.tutorly.R\r\nimport com.tutorly.ui.components.TutorlyBottomSheetContainer\r\nimport com.tutorly.ui.lessoncreation.StudentOption\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.LocalDate\r\nimport java.time.LocalTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Locale\r\n\r\nprivate val SectionSpacing = 12.dp\r\n\r\nprivate val SubjectSuggestionDefaults = listOf(\r\n    \"Математика\",\r\n    \"Русский язык\",\r\n    \"Английский язык\",\r\n    \"Физика\",\r\n    \"Химия\",\r\n    \"Биология\",\r\n    \"История\",\r\n    \"Обществознание\",\r\n    \"Литература\",\r\n    \"География\",\r\n    \"Информатика\",\r\n    \"Алгебра\",\r\n    \"Геометрия\",\r\n    \"Экономика\",\r\n    \"Право\",\r\n    \"Немецкий язык\",\r\n    \"Французский язык\",\r\n    \"Испанский язык\",\r\n    \"Китайский язык\",\r\n    \"Итальянский язык\",\r\n    \"Турецкий язык\",\r\n    \"Программирование\",\r\n    \"Шахматы\",\r\n    \"Музыка\",\r\n    \"Вокал\",\r\n    \"Фортепиано\",\r\n    \"Гитара\",\r\n    \"Логопед\",\r\n    \"Подготовка к школе\",\r\n    \"Начальная школа\",\r\n    \"ЕГЭ\",\r\n    \"ОГЭ\",\r\n    \"Олимпиады\"\r\n)\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun LessonCreationSheet(\r\n    state: LessonCreationUiState,\r\n    onDismiss: () -> Unit,\r\n    onStudentQueryChange: (String) -> Unit,\r\n    onStudentSelect: (Long) -> Unit,\r\n    onSubjectInputChange: (String) -> Unit,\r\n    onSubjectSelect: (Long) -> Unit,\r\n    onSubjectSuggestionToggle: (String) -> Unit,\r\n    onSubjectChipRemove: (Long?, String) -> Unit,\r\n    onDateSelect: (LocalDate) -> Unit,\r\n    onTimeSelect: (LocalTime) -> Unit,\r\n    onDurationChange: (Int) -> Unit,\r\n    onPriceChange: (Int) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSubmit: () -> Unit,\r\n    onConfirmConflict: () -> Unit,\r\n    onDismissConflict: () -> Unit\r\n) {\r\n    if (!state.isVisible) return\r\n\r\n    val sheetState: SheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val configuration = LocalConfiguration.current\r\n    val minHeight = remember(configuration) { configuration.screenHeightDp.dp * 0.6f }\r\n\r\n    ModalBottomSheet(\r\n        onDismissRequest = onDismiss,\r\n        sheetState = sheetState,\r\n        containerColor = Color.Transparent,\r\n        contentColor = Color.Unspecified,\r\n        scrimColor = Color.Black.copy(alpha = 0.32f)\r\n    ) {\r\n        TutorlyBottomSheetContainer(dragHandle = null) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .heightIn(min = minHeight)\r\n                    .verticalScroll(rememberScrollState())\r\n                    .padding(horizontal = 20.dp, vertical = 16.dp),\r\n                verticalArrangement = Arrangement.spacedBy(SectionSpacing)\r\n            ) {\r\n                SheetHeader(onDismiss)\r\n                StudentSection(\r\n                    state = state,\r\n                    onQueryChange = onStudentQueryChange,\r\n                    onStudentSelect = onStudentSelect\r\n                )\r\n                TimeSection(state = state, onDateSelect = onDateSelect, onTimeSelect = onTimeSelect)\r\n                DurationSection(state = state, onDurationChange = onDurationChange)\r\n                SubjectSection(\r\n                    state = state,\r\n                    onSubjectInputChange = onSubjectInputChange,\r\n                    onSubjectSelect = onSubjectSelect,\r\n                    onSubjectSuggestionToggle = onSubjectSuggestionToggle,\r\n                    onSubjectChipRemove = onSubjectChipRemove\r\n                )\r\n                PriceSection(state = state, onPriceChange = onPriceChange)\r\n                NoteSection(state = state, onNoteChange = onNoteChange)\r\n                ActionButtons(state = state, onSubmit = onSubmit)\r\n            }\r\n        }\r\n    }\r\n\r\n    val conflict = state.showConflictDialog\r\n    if (conflict != null) {\r\n        ConflictDialog(conflict, onConfirm = onConfirmConflict, onDismiss = onDismissConflict)\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SheetHeader(onDismiss: () -> Unit) {\r\n    Row(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.lesson_create_title),\r\n            style = MaterialTheme.typography.titleLarge,\r\n            modifier = Modifier.weight(1f)\r\n        )\r\n        IconButton(onClick = onDismiss) {\r\n            Icon(imageVector = Icons.Filled.Close, contentDescription = null)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentSection(\r\n    state: LessonCreationUiState,\r\n    onQueryChange: (String) -> Unit,\r\n    onStudentSelect: (Long) -> Unit\r\n) {\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        val selectedName = state.selectedStudent?.name ?: state.studentQuery\r\n        var query by remember(selectedName) { mutableStateOf(selectedName) }\r\n        var showSuggestions by remember { mutableStateOf(false) }\r\n        val focusRequester = remember { FocusRequester() }\r\n        val coroutineScope = rememberCoroutineScope()\r\n\r\n        OutlinedTextField(\r\n            value = query,\r\n            onValueChange = {\r\n                query = it\r\n                showSuggestions = true\r\n                onQueryChange(it)\r\n            },\r\n            label = { Text(text = stringResource(id = R.string.lesson_create_student_label)) },\r\n            placeholder = { Text(text = stringResource(id = R.string.lesson_create_student_placeholder)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(focusRequester)\r\n                .onFocusChanged { focusState ->\r\n                    if (!focusState.isFocused) {\r\n                        showSuggestions = false\r\n                    }\r\n                },\r\n            singleLine = true,\r\n            leadingIcon = {\r\n                Icon(imageVector = Icons.Filled.Person, contentDescription = null)\r\n            },\r\n            isError = state.errors.containsKey(LessonCreationField.STUDENT),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                errorBorderColor = MaterialTheme.colorScheme.error\r\n            )\r\n        )\r\n\r\n        if (showSuggestions) {\r\n            SuggestionList(\r\n                students = state.students,\r\n                selectedStudentId = state.selectedStudent?.id,\r\n                onStudentClick = { option ->\r\n                    query = option.name\r\n                    showSuggestions = false\r\n                    onStudentSelect(option.id)\r\n                    coroutineScope.launch { focusRequester.requestFocus() }\r\n                }\r\n            )\r\n        }\r\n\r\n        state.errors[LessonCreationField.STUDENT]?.let { message ->\r\n            ErrorText(message)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SuggestionList(\r\n    students: List<StudentOption>,\r\n    selectedStudentId: Long?,\r\n    onStudentClick: (StudentOption) -> Unit\r\n) {\r\n    if (students.isEmpty()) {\r\n        return\r\n    }\r\n\r\n    SuggestionContainer {\r\n        students.forEach { option ->\r\n            SuggestionItem(onClick = { onStudentClick(option) }) {\r\n                Row(verticalAlignment = Alignment.CenterVertically) {\r\n                    StudentAvatar(name = option.name, size = 32.dp)\r\n                    Spacer(modifier = Modifier.width(12.dp))\r\n                    Column(verticalArrangement = Arrangement.spacedBy(2.dp)) {\r\n                        Text(\r\n                            text = option.name,\r\n                            style = LocalTextStyle.current,\r\n                            maxLines = 1\r\n                        )\r\n                        if (option.subjects.isNotEmpty()) {\r\n                            Text(\r\n                                text = option.subjects.joinToString(separator = \", \"),\r\n                                style = MaterialTheme.typography.bodySmall,\r\n                                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                maxLines = 2\r\n                            )\r\n                        }\r\n                    }\r\n                    Spacer(modifier = Modifier.weight(1f))\r\n                    if (selectedStudentId == option.id) {\r\n                        Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SuggestionContainer(content: @Composable ColumnScope.() -> Unit) {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .border(\r\n                width = 1.dp,\r\n                color = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                shape = MaterialTheme.shapes.medium\r\n            )\r\n            .clip(MaterialTheme.shapes.medium)\r\n            .background(MaterialTheme.colorScheme.surface),\r\n        verticalArrangement = Arrangement.spacedBy(8.dp),\r\n        content = content,\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun SuggestionItem(\r\n    onClick: () -> Unit,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    Surface(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(onClick = onClick)\r\n            .padding(horizontal = 16.dp, vertical = 12.dp),\r\n        color = Color.Transparent\r\n    ) {\r\n        Row(verticalAlignment = Alignment.CenterVertically) {\r\n            content()\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 32.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.extendedColors.chipSelected),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleSmall,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nprivate fun SubjectSection(\r\n    state: LessonCreationUiState,\r\n    onSubjectInputChange: (String) -> Unit,\r\n    onSubjectSelect: (Long) -> Unit,\r\n    onSubjectSuggestionToggle: (String) -> Unit,\r\n    onSubjectChipRemove: (Long?, String) -> Unit\r\n) {\r\n    val availableSubjects = state.availableSubjects\r\n    val studentSubjectNames = state.selectedStudent?.subjects.orEmpty()\r\n        .map { it.trim() }\r\n        .filter { it.isNotEmpty() }\r\n    val additionalNames = studentSubjectNames.filter { name ->\r\n        availableSubjects.none { option -> option.name.equals(name, ignoreCase = true) }\r\n    }\r\n    val locale = state.locale\r\n    val query = state.subjectInput\r\n    val normalizedQuery = query.trim().lowercase(locale)\r\n    val hasQuery = normalizedQuery.isNotEmpty()\r\n    val matchingSubjects = availableSubjects.filter { option ->\r\n        hasQuery && option.name.lowercase(locale).startsWith(normalizedQuery)\r\n    }\r\n    val matchingAdditional = additionalNames.filter { name ->\r\n        hasQuery && name.lowercase(locale).startsWith(normalizedQuery)\r\n    }\r\n    val defaultSuggestions = SubjectSuggestionDefaults.filter { name ->\r\n        hasQuery && name.lowercase(locale).startsWith(normalizedQuery)\r\n    }.filterNot { suggestion ->\r\n        matchingSubjects.any { it.name.equals(suggestion, ignoreCase = true) } ||\r\n            matchingAdditional.any { it.equals(suggestion, ignoreCase = true) }\r\n    }\r\n    val hasSuggestions = matchingSubjects.isNotEmpty() || matchingAdditional.isNotEmpty() || defaultSuggestions.isNotEmpty()\r\n    var expanded by remember(state.selectedStudent, availableSubjects, additionalNames) { mutableStateOf(false) }\r\n    var textFieldSize by remember { mutableStateOf(IntSize.Zero) }\r\n    val dropdownWidth = with(LocalDensity.current) { textFieldSize.width.toDp() }\r\n    val dropdownModifier = if (dropdownWidth > 0.dp) Modifier.width(dropdownWidth) else Modifier\r\n    val selectedChips = state.selectedSubjectChips\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        Box {\r\n            OutlinedTextField(\r\n                value = state.subjectInput,\r\n                onValueChange = {\r\n                    onSubjectInputChange(it)\r\n                    expanded = it.trim().isNotEmpty()\r\n                },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .onGloballyPositioned { textFieldSize = it.size }\r\n                    .onFocusChanged { focusState ->\r\n                        expanded = focusState.isFocused && hasSuggestions\r\n                    },\r\n                label = { Text(text = stringResource(id = R.string.lesson_create_subject_label)) },\r\n                singleLine = true,\r\n                leadingIcon = {\r\n                    Icon(imageVector = Icons.Filled.Book, contentDescription = null)\r\n                },\r\n                prefix = {\r\n                    if (selectedChips.isNotEmpty()) {\r\n                        FlowRow(\r\n                            horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n                            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n                        ) {\r\n                            selectedChips.forEach { chip ->\r\n                                FilterChip(\r\n                                    selected = true,\r\n                                    onClick = {\r\n                                        expanded = false\r\n                                        onSubjectChipRemove(chip.id, chip.name)\r\n                                    },\r\n                                    label = { Text(text = chip.name) },\r\n                                    leadingIcon = {\r\n                                        chip.colorArgb?.let { color ->\r\n                                            Box(\r\n                                                modifier = Modifier\r\n                                                    .size(12.dp)\r\n                                                    .background(Color(color), CircleShape)\r\n                                            )\r\n                                        }\r\n                                    },\r\n                                    trailingIcon = {\r\n                                        Icon(\r\n                                            imageVector = Icons.Filled.Close,\r\n                                            contentDescription = null,\r\n                                            modifier = Modifier.size(16.dp)\r\n                                        )\r\n                                    },\r\n                                    colors = FilterChipDefaults.filterChipColors(\r\n                                        selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                                        selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                colors = OutlinedTextFieldDefaults.colors(\r\n                    focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                    unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                    disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                    errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                    focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                    unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                    disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                    errorBorderColor = MaterialTheme.colorScheme.error\r\n                )\r\n            )\r\n            DropdownMenu(\r\n                expanded = expanded && hasSuggestions,\r\n                onDismissRequest = { expanded = false },\r\n                modifier = dropdownModifier,\r\n                containerColor = MaterialTheme.colorScheme.surface,\r\n                properties = PopupProperties(focusable = false)\r\n            ) {\r\n                matchingSubjects.forEach { subject ->\r\n                    val isSelected = selectedChips.any { it.id == subject.id }\r\n                    DropdownMenuItem(\r\n                        text = {\r\n                            Row(\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                                horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n                            ) {\r\n                                Box(\r\n                                    modifier = Modifier\r\n                                        .size(12.dp)\r\n                                        .background(Color(subject.colorArgb), CircleShape)\r\n                                )\r\n                                Text(text = subject.name)\r\n                            }\r\n                        },\r\n                        trailingIcon = {\r\n                            if (isSelected) {\r\n                                Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                            }\r\n                        },\r\n                        onClick = {\r\n                            expanded = false\r\n                            onSubjectSelect(subject.id)\r\n                        }\r\n                    )\r\n                }\r\n                matchingAdditional.forEach { subjectName ->\r\n                    val isSelected = selectedChips.any { chip ->\r\n                        chip.id == null && chip.name.equals(subjectName, ignoreCase = true)\r\n                    }\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = subjectName) },\r\n                        trailingIcon = {\r\n                            if (isSelected) {\r\n                                Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                            }\r\n                        },\r\n                        onClick = {\r\n                            expanded = false\r\n                            onSubjectSuggestionToggle(subjectName)\r\n                        }\r\n                    )\r\n                }\r\n                defaultSuggestions.forEach { suggestion ->\r\n                    val isSelected = selectedChips.any { chip ->\r\n                        chip.id == null && chip.name.equals(suggestion, ignoreCase = true)\r\n                    }\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = suggestion) },\r\n                        trailingIcon = {\r\n                            if (isSelected) {\r\n                                Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                            }\r\n                        },\r\n                        onClick = {\r\n                            expanded = false\r\n                            onSubjectSuggestionToggle(suggestion)\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    LaunchedEffect(hasSuggestions) {\r\n        if (!hasSuggestions) {\r\n            expanded = false\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TimeSection(\r\n    state: LessonCreationUiState,\r\n    onDateSelect: (LocalDate) -> Unit,\r\n    onTimeSelect: (LocalTime) -> Unit\r\n) {\r\n    val context = LocalContext.current\r\n    val locale = state.locale\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n\r\n    Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        OutlinedButton(\r\n            onClick = {\r\n                DatePickerDialog(\r\n                    context,\r\n                    { _, year, month, day ->\r\n                        onDateSelect(LocalDate.of(year, month + 1, day))\r\n                    },\r\n                    state.date.year,\r\n                    state.date.monthValue - 1,\r\n                    state.date.dayOfMonth\r\n                ).show()\r\n            },\r\n            modifier = Modifier.weight(1f)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.spacedBy(6.dp)\r\n            ) {\r\n                Icon(imageVector = Icons.Outlined.CalendarMonth, contentDescription = null)\r\n                Text(text = state.date.format(dateFormatter), textAlign = TextAlign.Center)\r\n            }\r\n        }\r\n        OutlinedButton(\r\n            onClick = {\r\n                TimePickerDialog(\r\n                    context,\r\n                    { _, hour, minute -> onTimeSelect(LocalTime.of(hour, minute)) },\r\n                    state.time.hour,\r\n                    state.time.minute,\r\n                    true\r\n                ).show()\r\n            },\r\n            modifier = Modifier.weight(1f)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.spacedBy(6.dp)\r\n            ) {\r\n                Icon(imageVector = Icons.Outlined.Schedule, contentDescription = null)\r\n                Text(text = state.time.format(timeFormatter), textAlign = TextAlign.Center)\r\n            }\r\n        }\r\n    }\r\n    state.errors[LessonCreationField.TIME]?.let { ErrorText(it) }\r\n}\r\n\r\n@Composable\r\nprivate fun DurationSection(\r\n    state: LessonCreationUiState,\r\n    onDurationChange: (Int) -> Unit\r\n) {\r\n    val presets = listOf(45, 60, 90, 120)\r\n    var customDurationInput by remember(state.durationMinutes) {\r\n        mutableStateOf(state.durationMinutes.takeIf { it > 0 }?.toString().orEmpty())\r\n    }\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        OutlinedTextField(\r\n            value = customDurationInput,\r\n            onValueChange = { value ->\r\n                val digits = value.filter { it.isDigit() }\r\n                customDurationInput = digits\r\n                onDurationChange(digits.toIntOrNull() ?: 0)\r\n            },\r\n            label = { Text(text = stringResource(id = R.string.lesson_create_duration_label)) },\r\n            suffix = { Text(text = stringResource(id = R.string.lesson_create_minutes_suffix)) },\r\n            leadingIcon = {\r\n                Icon(imageVector = Icons.Filled.Schedule, contentDescription = null)\r\n            },\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n            modifier = Modifier.fillMaxWidth(),\r\n            isError = state.errors.containsKey(LessonCreationField.DURATION),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                errorBorderColor = MaterialTheme.colorScheme.error\r\n            )\r\n        )\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            presets.forEach { minutes ->\r\n                val selected = state.durationMinutes == minutes\r\n                Box(modifier = Modifier.weight(1f)) {\r\n                    FilterChip(\r\n                        selected = selected,\r\n                        onClick = {\r\n                            customDurationInput = minutes.toString()\r\n                            onDurationChange(minutes)\r\n                        },\r\n                        label = {\r\n                            Box(\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                contentAlignment = Alignment.Center\r\n                            ) {\r\n                                Text(\r\n                                    text = stringResource(id = R.string.lesson_create_duration_chip, minutes),\r\n                                    textAlign = TextAlign.Center\r\n                                )\r\n                            }\r\n                        },\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        colors = FilterChipDefaults.filterChipColors(\r\n                            selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                            selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        state.errors[LessonCreationField.DURATION]?.let { ErrorText(it) }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PriceSection(\r\n    state: LessonCreationUiState,\r\n    onPriceChange: (Int) -> Unit\r\n) {\r\n    var priceInput by remember(state.priceCents) {\r\n        mutableStateOf(state.priceCents.takeIf { it >= 0 }?.let { (it / 100).toString() } ?: \"\")\r\n    }\r\n    val priceFormatter = remember(state.locale) {\r\n        NumberFormat.getIntegerInstance(state.locale).apply { maximumFractionDigits = 0 }\r\n    }\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        OutlinedTextField(\r\n            value = priceInput,\r\n            onValueChange = { value ->\r\n                val digits = value.filter { it.isDigit() }\r\n                priceInput = digits\r\n                onPriceChange((digits.toIntOrNull() ?: 0) * 100)\r\n            },\r\n            label = { Text(text = stringResource(id = R.string.lesson_create_price_label)) },\r\n            leadingIcon = {\r\n                Icon(imageVector = Icons.Outlined.CurrencyRuble, contentDescription = null)\r\n            },\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n            modifier = Modifier.fillMaxWidth(),\r\n            isError = state.errors.containsKey(LessonCreationField.PRICE),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                errorBorderColor = MaterialTheme.colorScheme.error\r\n            )\r\n        )\r\n        if (state.pricePresets.isNotEmpty()) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n            ) {\r\n                state.pricePresets.take(4).forEach { preset ->\r\n                    val formatted = priceFormatter.format(preset / 100)\r\n                    Box(modifier = Modifier.weight(1f)) {\r\n                        FilterChip(\r\n                            selected = state.priceCents == preset,\r\n                            onClick = {\r\n                                priceInput = (preset / 100).toString()\r\n                                onPriceChange(preset)\r\n                            },\r\n                            label = {\r\n                                Box(\r\n                                    modifier = Modifier.fillMaxWidth(),\r\n                                    contentAlignment = Alignment.Center\r\n                                ) {\r\n                                    Text(\r\n                                        text = \"$formatted ${state.currencySymbol}\",\r\n                                        textAlign = TextAlign.Center\r\n                                    )\r\n                                }\r\n                            },\r\n                            modifier = Modifier.fillMaxWidth(),\r\n                            colors = FilterChipDefaults.filterChipColors(\r\n                                selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                                selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        state.errors[LessonCreationField.PRICE]?.let { ErrorText(it) }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun NoteSection(state: LessonCreationUiState, onNoteChange: (String) -> Unit) {\r\n    OutlinedTextField(\r\n        value = state.note,\r\n        onValueChange = onNoteChange,\r\n        label = { Text(text = stringResource(id = R.string.lesson_create_note_label)) },\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .heightIn(min = 80.dp),\r\n        leadingIcon = {\r\n            Icon(imageVector = Icons.Filled.Description, contentDescription = null)\r\n        },\r\n        colors = OutlinedTextFieldDefaults.colors(\r\n            focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n            unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n            disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n            errorContainerColor = MaterialTheme.colorScheme.surface,\r\n            focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n            unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n            disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n            errorBorderColor = MaterialTheme.colorScheme.error\r\n        )\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun ActionButtons(\r\n    state: LessonCreationUiState,\r\n    onSubmit: () -> Unit\r\n) {\r\n    androidx.compose.material3.Button(\r\n        onClick = onSubmit,\r\n        enabled = !state.isSubmitting && state.selectedStudent != null,\r\n        modifier = Modifier.fillMaxWidth()\r\n    ) {\r\n        if (state.isSubmitting) {\r\n            androidx.compose.material3.CircularProgressIndicator(\r\n                modifier = Modifier.height(20.dp),\r\n                strokeWidth = 2.dp\r\n            )\r\n        } else {\r\n            Text(text = stringResource(id = R.string.lesson_create_submit))\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ErrorText(text: String) {\r\n    Text(\r\n        text = text,\r\n        color = MaterialTheme.colorScheme.error,\r\n        style = MaterialTheme.typography.bodySmall\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun ConflictDialog(conflict: ConflictInfo, onConfirm: () -> Unit, onDismiss: () -> Unit) {\r\n    val timeFormatter = remember(conflict.start.zone) {\r\n        DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault())\r\n    }\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_create_conflict_title)) },\r\n        text = {\r\n            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n                Text(text = stringResource(id = R.string.lesson_create_conflict_body))\r\n                conflict.conflicts.forEach { lesson ->\r\n                    Text(\r\n                        text = \"${lesson.studentName} • ${lesson.start.format(timeFormatter)}–${lesson.end.format(timeFormatter)}\",\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        confirmButton = {\r\n            TextButton(onClick = onConfirm) {\r\n                Text(text = stringResource(id = R.string.lesson_create_conflict_proceed))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_conflict_back))\r\n            }\r\n        }\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt b/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt
--- a/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt	(revision 7f8aef2ca6051540e6b8e4d65069e508311bbf9e)
+++ b/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt	(date 1760967587603)
@@ -77,6 +77,7 @@
 import androidx.compose.ui.unit.Dp
 import androidx.compose.ui.unit.IntSize
 import androidx.compose.ui.unit.dp
+import androidx.compose.ui.window.PopupProperties
 import com.tutorly.R
 import com.tutorly.ui.components.TutorlyBottomSheetContainer
 import com.tutorly.ui.lessoncreation.StudentOption
