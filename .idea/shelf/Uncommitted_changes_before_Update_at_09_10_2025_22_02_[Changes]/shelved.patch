Index: app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.lessoncard\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Schedule\r\nimport androidx.compose.material.icons.filled.Warning\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.PaymentStatusIcon\r\nimport com.tutorly.models.PaymentStatus\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.ZonedDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Locale\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\ninternal fun LessonCardSheet(\r\n    state: LessonCardUiState,\r\n    zoneId: ZoneId,\r\n    onDismissRequest: () -> Unit,\r\n    onCancelDismiss: () -> Unit,\r\n    onConfirmDismiss: () -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSaveNote: () -> Unit,\r\n    onMarkPaid: () -> Unit,\r\n    onRequestMarkDue: () -> Unit,\r\n    onDismissMarkDue: () -> Unit,\r\n    onConfirmMarkDue: () -> Unit,\r\n    onRequestEdit: () -> Unit,\r\n    onSnackbarConsumed: () -> Unit,\r\n) {\r\n    if (!state.isVisible) {\r\n        return\r\n    }\r\n\r\n    val scope = rememberCoroutineScope()\r\n    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n\r\n    val snackbarText = state.snackbarMessage?.let { message ->\r\n        when (message) {\r\n            LessonCardMessage.NoteSaved -> stringResource(R.string.lesson_card_snackbar_note_saved)\r\n            is LessonCardMessage.PaymentMarked -> when (message.status) {\r\n                PaymentStatus.PAID -> stringResource(R.string.lesson_card_snackbar_paid)\r\n                PaymentStatus.DUE, PaymentStatus.UNPAID -> stringResource(R.string.lesson_card_snackbar_due)\r\n                PaymentStatus.CANCELLED -> stringResource(R.string.lesson_card_snackbar_due)\r\n            }\r\n            is LessonCardMessage.Error -> stringResource(R.string.lesson_card_snackbar_error)\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(snackbarText) {\r\n        snackbarText?.let {\r\n            snackbarHostState.showSnackbar(it)\r\n            onSnackbarConsumed()\r\n        }\r\n    }\r\n\r\n    ModalBottomSheet(\r\n        onDismissRequest = {\r\n            if (state.isNoteDirty) {\r\n                scope.launch { sheetState.show() }\r\n                onDismissRequest()\r\n            } else {\r\n                onDismissRequest()\r\n            }\r\n        },\r\n        sheetState = sheetState,\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        tonalElevation = 8.dp,\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 12.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .verticalScroll(rememberScrollState()),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp)\r\n            ) {\r\n                if (state.isLoading) {\r\n                    LinearProgressIndicator(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 4.dp)\r\n                    )\r\n                }\r\n                LessonHeader(state = state, onClose = onDismissRequest)\r\n                LessonMetadataBlock(state = state, zoneId = zoneId)\r\n                LessonPaymentBlock(state = state, onMarkPaid = onMarkPaid, onRequestMarkDue = onRequestMarkDue)\r\n                LessonNoteBlock(\r\n                    state = state,\r\n                    onNoteChange = onNoteChange,\r\n                    onSaveNote = onSaveNote\r\n                )\r\n                OutlinedButton(\r\n                    onClick = onRequestEdit,\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    enabled = state.details != null\r\n                ) {\r\n                    Icon(imageVector = Icons.Default.Edit, contentDescription = null)\r\n                    Spacer(modifier = Modifier.width(8.dp))\r\n                    Text(text = stringResource(R.string.lesson_card_edit))\r\n                }\r\n                Spacer(modifier = Modifier.height(12.dp))\r\n            }\r\n            SnackbarHost(\r\n                hostState = snackbarHostState,\r\n                modifier = Modifier\r\n                    .align(Alignment.BottomCenter)\r\n                    .padding(bottom = 8.dp)\r\n            )\r\n        }\r\n    }\r\n\r\n    if (state.showUnsavedExitDialog) {\r\n        AlertDialog(\r\n            onDismissRequest = onCancelDismiss,\r\n            title = { Text(stringResource(R.string.lesson_card_unsaved_title)) },\r\n            text = { Text(stringResource(R.string.lesson_card_unsaved_message)) },\r\n            confirmButton = {\r\n                TextButton(onClick = onConfirmDismiss) {\r\n                    Text(stringResource(R.string.lesson_card_unsaved_discard))\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(onClick = onCancelDismiss) {\r\n                    Text(stringResource(R.string.lesson_card_unsaved_keep))\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (state.showMarkDueDialog) {\r\n        AlertDialog(\r\n            onDismissRequest = onDismissMarkDue,\r\n            title = { Text(stringResource(R.string.lesson_card_mark_due_title)) },\r\n            text = { Text(stringResource(R.string.lesson_card_mark_due_message)) },\r\n            confirmButton = {\r\n                TextButton(onClick = onConfirmMarkDue) {\r\n                    Text(stringResource(R.string.lesson_card_mark_due_confirm))\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(onClick = onDismissMarkDue) {\r\n                    Text(stringResource(R.string.lesson_card_mark_due_cancel))\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonHeader(state: LessonCardUiState, onClose: () -> Unit) {\r\n    val details = state.details\r\n    Row(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        val name = details?.studentName.orEmpty()\r\n        val initials = remember(name) {\r\n            name.split(\" \").filter { it.isNotBlank() }.take(2).map { it.first().uppercase() }.joinToString(\"\")\r\n        }\r\n        Surface(\r\n            modifier = Modifier\r\n                .sizeAvatar()\r\n                .clip(CircleShape),\r\n            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f)\r\n        ) {\r\n            Box(contentAlignment = Alignment.Center) {\r\n                Text(\r\n                    text = initials.ifBlank { \"?\" },\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.SemiBold,\r\n                    color = MaterialTheme.colorScheme.primary\r\n                )\r\n            }\r\n        }\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Column(modifier = Modifier.weight(1f)) {\r\n            Text(\r\n                text = name.ifBlank { stringResource(R.string.lesson_card_student_placeholder) },\r\n                style = MaterialTheme.typography.titleLarge,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            details?.lessonTitle?.takeIf { it.isNotBlank() }?.let { title ->\r\n                Text(\r\n                    text = title,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n        }\r\n        IconButton(onClick = onClose) {\r\n            Icon(imageVector = Icons.Default.Close, contentDescription = stringResource(R.string.lesson_card_close))\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonMetadataBlock(state: LessonCardUiState, zoneId: ZoneId) {\r\n    val details = state.details ?: return\r\n    val locale = remember { Locale.getDefault() }\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val durationMinutes = remember(details.duration) { details.duration.toMinutes().toInt().coerceAtLeast(0) }\r\n    val start = remember(details.startAt, zoneId) { ZonedDateTime.ofInstant(details.startAt, zoneId) }\r\n    val end = remember(details.endAt, zoneId) { ZonedDateTime.ofInstant(details.endAt, zoneId) }\r\n\r\n    val subject = details.subjectName?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(R.string.lesson_card_subject_placeholder)\r\n\r\n    Card(\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)\r\n    ) {\r\n        Column(modifier = Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n            Text(text = subject, style = MaterialTheme.typography.titleMedium)\r\n            Row(horizontalArrangement = Arrangement.spacedBy(12.dp), modifier = Modifier.fillMaxWidth()) {\r\n                InfoCell(\r\n                    label = stringResource(R.string.lesson_card_time_label),\r\n                    value = stringResource(\r\n                        R.string.lesson_card_time_value,\r\n                        dateFormatter.format(start),\r\n                        timeFormatter.format(start),\r\n                        timeFormatter.format(end)\r\n                    ),\r\n                    leadingIcon = Icons.Default.Schedule\r\n                )\r\n                InfoCell(\r\n                    label = stringResource(R.string.lesson_card_duration_label),\r\n                    value = stringResource(R.string.lesson_card_duration_value, durationMinutes),\r\n                    leadingIcon = null\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonPaymentBlock(\r\n    state: LessonCardUiState,\r\n    onMarkPaid: () -> Unit,\r\n    onRequestMarkDue: () -> Unit,\r\n) {\r\n    val details = state.details ?: return\r\n    val locale = remember { Locale.getDefault() }\r\n    val currencyFormatter = remember(locale) { NumberFormat.getCurrencyInstance(locale) }\r\n    val amount = remember(details.priceCents) { currencyFormatter.format(details.priceCents / 100.0) }\r\n    val statusChip = remember(details.paymentStatus) { paymentStatusChip(details.paymentStatus) }\r\n\r\n    Card { \r\n        Column(\r\n            modifier = Modifier.padding(16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Column(modifier = Modifier.weight(1f)) {\r\n                    Text(text = stringResource(R.string.lesson_card_price_label), style = MaterialTheme.typography.labelMedium)\r\n                    Text(text = amount, style = MaterialTheme.typography.titleLarge)\r\n                }\r\n                StatusChip(statusChip)\r\n            }\r\n            val isPaid = details.paymentStatus == PaymentStatus.PAID\r\n            val actionLabel = if (isPaid) {\r\n                stringResource(R.string.lesson_card_mark_due)\r\n            } else {\r\n                stringResource(R.string.lesson_card_mark_paid)\r\n            }\r\n            val onClick = if (isPaid) onRequestMarkDue else onMarkPaid\r\n            val enabled = !state.isPaymentActionRunning && details.paymentStatus != PaymentStatus.CANCELLED\r\n            Button(\r\n                onClick = onClick,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                enabled = enabled\r\n            ) {\r\n                if (state.isPaymentActionRunning) {\r\n                    CircularProgressIndicator(modifier = Modifier.size(18.dp), strokeWidth = 2.dp)\r\n                } else {\r\n                    Text(actionLabel)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonNoteBlock(\r\n    state: LessonCardUiState,\r\n    onNoteChange: (String) -> Unit,\r\n    onSaveNote: () -> Unit,\r\n) {\r\n    if (state.details == null) return\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        OutlinedTextField(\r\n            value = state.noteDraft,\r\n            onValueChange = onNoteChange,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            label = { Text(stringResource(R.string.lesson_card_note_label)) },\r\n            placeholder = { Text(stringResource(R.string.lesson_card_note_placeholder)) },\r\n            supportingText = {\r\n                Text(\r\n                    stringResource(\r\n                        R.string.lesson_card_note_counter,\r\n                        state.noteDraft.length,\r\n                        LESSON_CARD_NOTE_LIMIT\r\n                    )\r\n                )\r\n            },\r\n            maxLines = 4,\r\n            shape = RoundedCornerShape(12.dp)\r\n        )\r\n        Button(\r\n            onClick = onSaveNote,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            enabled = state.isNoteDirty && !state.isSavingNote\r\n        ) {\r\n            if (state.isSavingNote) {\r\n                CircularProgressIndicator(modifier = Modifier.size(18.dp), strokeWidth = 2.dp)\r\n            } else {\r\n                Text(stringResource(R.string.lesson_card_note_save))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate data class PaymentStatusChip(\r\n    val labelRes: Int,\r\n    val icon: PaymentStatusIcon?,\r\n    val background: Color,\r\n    val foreground: Color,\r\n)\r\n\r\n@Composable\r\nprivate fun paymentStatusChip(status: PaymentStatus): PaymentStatusChip {\r\n    val (label, background, foreground) = when (status) {\r\n        PaymentStatus.PAID -> Triple(\r\n            R.string.lesson_status_paid,\r\n            MaterialTheme.colorScheme.tertiary.copy(alpha = 0.1f),\r\n            MaterialTheme.colorScheme.tertiary\r\n        )\r\n        PaymentStatus.DUE, PaymentStatus.UNPAID -> Triple(\r\n            R.string.lesson_status_due,\r\n            MaterialTheme.colorScheme.error.copy(alpha = 0.1f),\r\n            MaterialTheme.colorScheme.error\r\n        )\r\n        PaymentStatus.CANCELLED -> Triple(\r\n            R.string.lesson_status_cancelled,\r\n            MaterialTheme.colorScheme.surfaceVariant,\r\n            MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n    val icon = when (status) {\r\n        PaymentStatus.PAID -> PaymentStatusIcon.PAID\r\n        PaymentStatus.DUE, PaymentStatus.UNPAID -> PaymentStatusIcon.OUTSTANDING\r\n        PaymentStatus.CANCELLED -> PaymentStatusIcon.CANCELLED\r\n    }\r\n    return PaymentStatusChip(label, icon, background, foreground)\r\n}\r\n\r\n@Composable\r\nprivate fun StatusChip(chip: PaymentStatusChip) {\r\n    Surface(color = chip.background, contentColor = chip.foreground, shape = RoundedCornerShape(12.dp)) {\r\n        Row(\r\n            modifier = Modifier.padding(horizontal = 10.dp, vertical = 6.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            when (chip.icon) {\r\n                PaymentStatusIcon.PAID -> Icon(imageVector = Icons.Default.Check, contentDescription = null, modifier = Modifier.size(16.dp))\r\n                PaymentStatusIcon.OUTSTANDING -> Icon(imageVector = Icons.Default.Warning, contentDescription = null, modifier = Modifier.size(16.dp))\r\n                PaymentStatusIcon.CANCELLED -> Icon(imageVector = Icons.Default.Close, contentDescription = null, modifier = Modifier.size(16.dp))\r\n            }\r\n            Text(text = stringResource(chip.labelRes), style = MaterialTheme.typography.labelMedium)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun InfoCell(label: String, value: String, leadingIcon: androidx.compose.ui.graphics.vector.ImageVector?) {\r\n    Surface(\r\n        modifier = Modifier.weight(1f),\r\n        color = MaterialTheme.colorScheme.surface,\r\n        tonalElevation = 1.dp,\r\n        shadowElevation = 0.dp,\r\n        shape = RoundedCornerShape(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.padding(16.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            leadingIcon?.let { icon ->\r\n                Surface(\r\n                    modifier = Modifier\r\n                        .size(32.dp)\r\n                        .clip(CircleShape),\r\n                    color = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)\r\n                ) {\r\n                    Box(contentAlignment = Alignment.Center) {\r\n                        Icon(imageVector = icon, contentDescription = null, tint = MaterialTheme.colorScheme.primary)\r\n                    }\r\n                }\r\n            }\r\n            Column(modifier = Modifier.weight(1f)) {\r\n                Text(text = label, style = MaterialTheme.typography.labelMedium, color = MaterialTheme.colorScheme.onSurfaceVariant)\r\n                Text(text = value, style = MaterialTheme.typography.bodyMedium)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun Modifier.sizeAvatar(): Modifier = this.then(Modifier.size(48.dp))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt b/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt
--- a/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt	(revision eccb1ffbdf2af45f36720446da172fc4587e145f)
+++ b/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt	(date 1760036322765)
@@ -9,6 +9,7 @@
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
+import androidx.compose.foundation.layout.width
 import androidx.compose.foundation.rememberScrollState
 import androidx.compose.foundation.shape.CircleShape
 import androidx.compose.foundation.shape.RoundedCornerShape
@@ -46,6 +47,7 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.clip
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.vector.ImageVector
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.text.style.TextOverflow
@@ -432,7 +434,7 @@
 }
 
 @Composable
-private fun InfoCell(label: String, value: String, leadingIcon: androidx.compose.ui.graphics.vector.ImageVector?) {
+private fun InfoCell(label: String, value: String, leadingIcon: ImageVector?) {
     Surface(
         modifier = Modifier.weight(1f),
         color = MaterialTheme.colorScheme.surface,
