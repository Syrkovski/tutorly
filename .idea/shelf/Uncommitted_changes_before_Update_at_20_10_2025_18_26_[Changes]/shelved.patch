Index: app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.ExperimentalLayoutApi\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.interaction.MutableInteractionSource\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.text.BasicTextField\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.AlternateEmail\r\nimport androidx.compose.material.icons.filled.ArrowDropDown\r\nimport androidx.compose.material.icons.filled.ArrowDropUp\r\nimport androidx.compose.material.icons.filled.Book\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Description\r\nimport androidx.compose.material.icons.filled.Message\r\nimport androidx.compose.material.icons.filled.Person\r\nimport androidx.compose.material.icons.filled.Phone\r\nimport androidx.compose.material.icons.filled.School\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.outlined.CurrencyRuble\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.ExposedDropdownMenuDefaults.textFieldColors\r\nimport androidx.compose.material3.FilterChip\r\nimport androidx.compose.material3.FilterChipDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.OutlinedTextFieldDefaults\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TextFieldColors\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.focus.focusRequester\r\nimport androidx.compose.ui.focus.onFocusChanged\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.SolidColor\r\nimport androidx.compose.ui.layout.onGloballyPositioned\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.platform.LocalTextStyle\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.unit.IntSize\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.window.PopupProperties\r\nimport com.tutorly.R\r\nimport com.tutorly.models.SubjectPreset\r\nimport com.tutorly.ui.subject.SubjectSuggestionDefaults\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport java.util.LinkedHashSet\r\nimport java.util.Locale\r\n\r\n@Composable\r\nprivate fun editorFieldColors(): TextFieldColors {\r\n    val colorScheme = MaterialTheme.colorScheme\r\n    val accent = MaterialTheme.extendedColors.accent\r\n    return OutlinedTextFieldDefaults.colors(\r\n        focusedContainerColor = colorScheme.surface,\r\n        unfocusedContainerColor = colorScheme.surface,\r\n        disabledContainerColor = colorScheme.surface,\r\n        errorContainerColor = colorScheme.surface,\r\n        focusedBorderColor = accent,\r\n        unfocusedBorderColor = accent.copy(alpha = 0.4f),\r\n        disabledBorderColor = accent.copy(alpha = 0.24f),\r\n        errorBorderColor = colorScheme.error\r\n    )\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentEditorForm(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    subjectPresets: List<SubjectPreset> = emptyList(),\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    editTarget: StudentEditTarget? = null,\r\n    initialFocus: StudentEditTarget? = null,\r\n    enableScrolling: Boolean = true,\r\n    enabled: Boolean = true,\r\n    onSubmit: (() -> Unit)? = null,\r\n) {\r\n    val nameFocusRequester = remember { FocusRequester() }\r\n    val gradeFocusRequester = remember { FocusRequester() }\r\n    val rateFocusRequester = remember { FocusRequester() }\r\n    val phoneFocusRequester = remember { FocusRequester() }\r\n    val messengerFocusRequester = remember { FocusRequester() }\r\n    val noteFocusRequester = remember { FocusRequester() }\r\n    val scrollState = rememberScrollState()\r\n    var isGradeDropdownExpanded by remember { mutableStateOf(false) }\r\n    val gradeOtherOption = stringResource(id = R.string.student_editor_grade_other)\r\n    val gradeNumbers = remember { (9..11).toList() }\r\n    val gradeOptions = gradeNumbers.map { number ->\r\n        stringResource(id = R.string.student_editor_grade_option, number)\r\n    } + gradeOtherOption\r\n\r\n    LaunchedEffect(initialFocus, enabled) {\r\n        if (enabled) {\r\n            when (initialFocus) {\r\n                StudentEditTarget.PROFILE -> nameFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.RATE -> rateFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.PHONE -> phoneFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.MESSENGER -> messengerFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.NOTES -> noteFocusRequester.safeRequestFocus()\r\n                null -> Unit\r\n            }\r\n        }\r\n    }\r\n\r\n    val showFullForm = editTarget == null\r\n    val isNewStudent = state.studentId == null\r\n    var showAdditionalData by rememberSaveable(state.studentId) {\r\n        mutableStateOf(\r\n            !isNewStudent ||\r\n                state.phone.isNotBlank() ||\r\n                state.messenger.isNotBlank() ||\r\n                state.note.isNotBlank()\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(editTarget) {\r\n        if (editTarget == StudentEditTarget.PHONE ||\r\n            editTarget == StudentEditTarget.MESSENGER ||\r\n            editTarget == StudentEditTarget.NOTES\r\n        ) {\r\n            showAdditionalData = true\r\n        }\r\n    }\r\n\r\n    val columnModifier = if (enableScrolling) {\r\n        modifier.verticalScroll(scrollState)\r\n    } else {\r\n        modifier\r\n    }\r\n\r\n    val textFieldColors = editorFieldColors()\r\n\r\n    Column(\r\n        modifier = columnModifier,\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        if (showFullForm || editTarget == StudentEditTarget.PROFILE) {\r\n            ProfileSection(\r\n                state = state,\r\n                subjectPresets = subjectPresets,\r\n                onNameChange = onNameChange,\r\n                onSubjectChange = onSubjectChange,\r\n                onGradeChange = onGradeChange,\r\n                enabled = enabled,\r\n                nameFocusRequester = nameFocusRequester,\r\n                gradeFocusRequester = gradeFocusRequester,\r\n                isGradeDropdownExpanded = isGradeDropdownExpanded,\r\n                onGradeDropdownExpandedChange = { isGradeDropdownExpanded = it },\r\n                gradeOptions = gradeOptions,\r\n                gradeOtherOption = gradeOtherOption,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.PROFILE,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        if (showFullForm || editTarget == StudentEditTarget.RATE) {\r\n            RateSection(\r\n                rate = state.rate,\r\n                onRateChange = onRateChange,\r\n                enabled = enabled,\r\n                focusRequester = rateFocusRequester,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.RATE,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        val shouldShowAdditionalSections = !isNewStudent || showAdditionalData\r\n\r\n        if (showFullForm && isNewStudent) {\r\n            AdditionalDataToggle(\r\n                expanded = showAdditionalData,\r\n                onToggle = { showAdditionalData = !showAdditionalData },\r\n                enabled = enabled,\r\n                modifier = Modifier.align(Alignment.Start)\r\n            )\r\n        }\r\n\r\n        if ((showFullForm && shouldShowAdditionalSections) || editTarget == StudentEditTarget.PHONE) {\r\n            PhoneSection(\r\n                phone = state.phone,\r\n                onPhoneChange = onPhoneChange,\r\n                enabled = enabled,\r\n                focusRequester = phoneFocusRequester,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.PHONE,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        if ((showFullForm && shouldShowAdditionalSections) || editTarget == StudentEditTarget.MESSENGER) {\r\n            MessengerSection(\r\n                messenger = state.messenger,\r\n                onMessengerChange = onMessengerChange,\r\n                enabled = enabled,\r\n                focusRequester = messengerFocusRequester,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.MESSENGER,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        if ((showFullForm && shouldShowAdditionalSections) || editTarget == StudentEditTarget.NOTES) {\r\n            NotesSection(\r\n                note = state.note,\r\n                onNoteChange = onNoteChange,\r\n                enabled = enabled,\r\n                focusRequester = noteFocusRequester,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileSection(\r\n    state: StudentEditorFormState,\r\n    subjectPresets: List<SubjectPreset>,\r\n    onNameChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    nameFocusRequester: FocusRequester,\r\n    gradeFocusRequester: FocusRequester,\r\n    isGradeDropdownExpanded: Boolean,\r\n    onGradeDropdownExpandedChange: (Boolean) -> Unit,\r\n    gradeOptions: List<String>,\r\n    gradeOtherOption: String,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        OutlinedTextField(\r\n            value = state.name,\r\n            onValueChange = onNameChange,\r\n            label = { Text(text = stringResource(id = R.string.student_editor_name)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(nameFocusRequester),\r\n            singleLine = true,\r\n            enabled = enabled,\r\n            isError = state.nameError,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Person,\r\n                    contentDescription = null,\r\n                    tint = iconTint\r\n                )\r\n            },\r\n            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Next),\r\n            colors = textFieldColors\r\n        )\r\n        if (state.nameError) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_editor_name_required),\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.error\r\n            )\r\n        }\r\n\r\n        SubjectSelector(\r\n            studentId = state.studentId,\r\n            subjectValue = state.subject,\r\n            subjectPresets = subjectPresets,\r\n            onSubjectChange = onSubjectChange,\r\n            enabled = enabled,\r\n            isStandalone = isStandalone,\r\n            onSubmit = onSubmit\r\n        )\r\n\r\n        var gradeFieldSize by remember { mutableStateOf(IntSize.Zero) }\r\n        val gradeDropdownWidth = with(LocalDensity.current) { gradeFieldSize.width.toDp() }\r\n        val gradeDropdownModifier = if (gradeDropdownWidth > 0.dp) Modifier.width(gradeDropdownWidth) else Modifier\r\n        Box {\r\n            OutlinedTextField(\r\n                value = state.grade,\r\n                onValueChange = onGradeChange,\r\n                label = { Text(text = stringResource(id = R.string.student_editor_grade)) },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .onGloballyPositioned { gradeFieldSize = it.size }\r\n                    .focusRequester(gradeFocusRequester)\r\n                    .onFocusChanged { focusState ->\r\n                        if (!focusState.isFocused) {\r\n                            onGradeDropdownExpandedChange(false)\r\n                        } else if (enabled) {\r\n                            onGradeDropdownExpandedChange(true)\r\n                        }\r\n                    },\r\n                singleLine = true,\r\n                enabled = enabled,\r\n                leadingIcon = {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.School,\r\n                        contentDescription = null,\r\n                        tint = iconTint\r\n                    )\r\n                },\r\n                trailingIcon = {\r\n                    IconButton(\r\n                        onClick = { onGradeDropdownExpandedChange(!isGradeDropdownExpanded) },\r\n                        enabled = enabled\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = if (isGradeDropdownExpanded) Icons.Filled.ArrowDropUp else Icons.Filled.ArrowDropDown,\r\n                            contentDescription = null,\r\n                            tint = iconTint\r\n                        )\r\n                    }\r\n                },\r\n                keyboardOptions = KeyboardOptions.Default.copy(\r\n                    imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n                ),\r\n                keyboardActions = if (isStandalone) {\r\n                    KeyboardActions(onDone = { onSubmit?.invoke() })\r\n                } else {\r\n                    KeyboardActions.Default\r\n                },\r\n                colors = textFieldColors\r\n            )\r\n\r\n            DropdownMenu(\r\n                expanded = isGradeDropdownExpanded,\r\n                onDismissRequest = { onGradeDropdownExpandedChange(false) },\r\n                modifier = gradeDropdownModifier,\r\n                containerColor = MaterialTheme.colorScheme.surface\r\n            ) {\r\n                gradeOptions.forEach { option ->\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = option) },\r\n                        onClick = {\r\n                            onGradeDropdownExpandedChange(false)\r\n                            if (option == gradeOtherOption) {\r\n                                onGradeChange(\"\")\r\n                                gradeFocusRequester.requestFocus()\r\n                            } else {\r\n                                onGradeChange(option)\r\n                            }\r\n                        },\r\n                        enabled = enabled\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nprivate fun SubjectSelector(\r\n    studentId: Long?,\r\n    subjectValue: String,\r\n    subjectPresets: List<SubjectPreset>,\r\n    onSubjectChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val locale = remember { Locale.getDefault() }\r\n    var subjectInput by remember { mutableStateOf(\"\") }\r\n    var selectedChips by remember { mutableStateOf<List<StudentSubjectChip>>(emptyList()) }\r\n    var expanded by remember { mutableStateOf(false) }\r\n    var textFieldSize by remember { mutableStateOf(IntSize.Zero) }\r\n    val dropdownWidth = with(LocalDensity.current) { textFieldSize.width.toDp() }\r\n    val dropdownModifier = if (dropdownWidth > 0.dp) Modifier.width(dropdownWidth) else Modifier\r\n    val interactionSource = remember { MutableInteractionSource() }\r\n    val textFieldColors = OutlinedTextFieldDefaults.colors(\r\n        focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n        unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n        disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n        errorContainerColor = MaterialTheme.colorScheme.surface,\r\n        focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n        unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n        disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n        errorBorderColor = MaterialTheme.colorScheme.error\r\n    )\r\n    val presetLookup = remember(subjectPresets, locale) {\r\n        subjectPresets.associateBy { it.name.lowercase(locale) }\r\n    }\r\n\r\n    LaunchedEffect(studentId) { subjectInput = \"\" }\r\n\r\n    LaunchedEffect(subjectValue, subjectPresets) {\r\n        val tokens = subjectValue.split(',')\r\n            .map { it.trim() }\r\n            .filter { it.isNotEmpty() }\r\n        val chips = tokens.map { token ->\r\n            val preset = presetLookup[token.lowercase(locale)]\r\n            if (preset != null) {\r\n                preset.toChip()\r\n            } else {\r\n                StudentSubjectChip(id = null, name = token, colorArgb = null)\r\n            }\r\n        }\r\n        selectedChips = chips\r\n        subjectInput = \"\"\r\n    }\r\n\r\n    val trimmedQuery = subjectInput.trim()\r\n    val normalizedQuery = trimmedQuery.lowercase(locale)\r\n    val hasQuery = normalizedQuery.isNotEmpty()\r\n    val matchingPresets = if (hasQuery) {\r\n        subjectPresets.filter { option ->\r\n            option.name.lowercase(locale).startsWith(normalizedQuery)\r\n        }\r\n    } else {\r\n        emptyList()\r\n    }\r\n    val matchingDefaults = if (hasQuery) {\r\n        SubjectSuggestionDefaults.filter { suggestion ->\r\n            val normalized = suggestion.lowercase(locale)\r\n            normalized.startsWith(normalizedQuery) &&\r\n                subjectPresets.none { it.name.equals(suggestion, ignoreCase = true) }\r\n        }\r\n    } else {\r\n        emptyList()\r\n    }\r\n    val hasSuggestions = matchingPresets.isNotEmpty() || matchingDefaults.isNotEmpty()\r\n\r\n    fun updateChips(updated: List<StudentSubjectChip>) {\r\n        selectedChips = updated\r\n        onSubjectChange(buildSubjectValue(updated))\r\n    }\r\n\r\n    fun addPreset(option: SubjectPreset) {\r\n        if (selectedChips.any { it.id == option.id }) {\r\n            subjectInput = \"\"\r\n            expanded = false\r\n            return\r\n        }\r\n        updateChips(selectedChips + option.toChip())\r\n        subjectInput = \"\"\r\n        expanded = false\r\n    }\r\n\r\n    fun toggleSuggestion(name: String) {\r\n        val normalized = name.trim()\r\n        if (normalized.isEmpty()) {\r\n            subjectInput = \"\"\r\n            expanded = false\r\n            return\r\n        }\r\n        val existingIndex = selectedChips.indexOfFirst { chip ->\r\n            chip.id == null && chip.name.equals(normalized, ignoreCase = true)\r\n        }\r\n        val updated = if (existingIndex >= 0) {\r\n            selectedChips.toMutableList().also { it.removeAt(existingIndex) }\r\n        } else {\r\n            selectedChips + StudentSubjectChip(id = null, name = normalized, colorArgb = null)\r\n        }\r\n        updateChips(updated)\r\n        subjectInput = \"\"\r\n        expanded = false\r\n    }\r\n\r\n    fun removeChip(chip: StudentSubjectChip) {\r\n        val updated = if (chip.id != null) {\r\n            selectedChips.filterNot { it.id == chip.id }\r\n        } else {\r\n            selectedChips.filterNot {\r\n                it.id == null && it.name.equals(chip.name, ignoreCase = true)\r\n            }\r\n        }\r\n        updateChips(updated)\r\n    }\r\n\r\n    fun commitInput(): Boolean {\r\n        if (trimmedQuery.isEmpty()) {\r\n            return false\r\n        }\r\n        if (selectedChips.any { it.name.equals(trimmedQuery, ignoreCase = true) }) {\r\n            subjectInput = \"\"\r\n            expanded = false\r\n            return true\r\n        }\r\n        updateChips(selectedChips + StudentSubjectChip(id = null, name = trimmedQuery, colorArgb = null))\r\n        subjectInput = \"\"\r\n        expanded = false\r\n        return true\r\n    }\r\n\r\n    LaunchedEffect(hasSuggestions) {\r\n        if (!hasSuggestions) {\r\n            expanded = false\r\n        }\r\n    }\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n        Box {\r\n            BasicTextField(\r\n                value = subjectInput,\r\n                onValueChange = {\r\n                    subjectInput = it\r\n                    expanded = enabled && it.trim().isNotEmpty()\r\n                },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .onGloballyPositioned { textFieldSize = it.size }\r\n                    .onFocusChanged { focusState ->\r\n                        expanded = enabled && focusState.isFocused && hasSuggestions\r\n                    },\r\n                singleLine = true,\r\n                enabled = enabled,\r\n                textStyle = LocalTextStyle.current.copy(color = MaterialTheme.colorScheme.onSurface),\r\n                cursorBrush = SolidColor(MaterialTheme.colorScheme.primary),\r\n                interactionSource = interactionSource,\r\n                keyboardOptions = KeyboardOptions.Default.copy(\r\n                    imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n                ),\r\n                keyboardActions = if (isStandalone) {\r\n                    KeyboardActions(onDone = {\r\n                        val consumed = commitInput()\r\n                        if (!consumed) {\r\n                            defaultKeyboardAction(ImeAction.Done)\r\n                        }\r\n                        onSubmit?.invoke()\r\n                    })\r\n                } else {\r\n                    KeyboardActions(onNext = {\r\n                        val consumed = commitInput()\r\n                        if (!consumed) {\r\n                            defaultKeyboardAction(ImeAction.Next)\r\n                        }\r\n                    })\r\n                },\r\n                decorationBox = { innerTextField ->\r\n                    val labelValue = remember(subjectInput, selectedChips) {\r\n                        when {\r\n                            subjectInput.isNotEmpty() -> subjectInput\r\n                            selectedChips.isNotEmpty() -> \" \"\r\n                            else -> \"\"\r\n                        }\r\n                    }\r\n                    OutlinedTextFieldDefaults.DecorationBox(\r\n                        value = labelValue,\r\n                        visualTransformation = VisualTransformation.None,\r\n                        innerTextField = {\r\n                            Row(\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n                                verticalAlignment = Alignment.CenterVertically\r\n                            ) {\r\n                                if (selectedChips.isNotEmpty()) {\r\n                                    FlowRow(\r\n                                        horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n                                        verticalArrangement = Arrangement.Center\r\n                                    ) {\r\n                                        selectedChips.forEach { chip ->\r\n                                            FilterChip(\r\n                                                selected = true,\r\n                                                onClick = {\r\n                                                    if (enabled) {\r\n                                                        removeChip(chip)\r\n                                                    }\r\n                                                },\r\n                                                label = { Text(text = chip.name) },\r\n                                                leadingIcon = {\r\n                                                    chip.colorArgb?.let { color ->\r\n                                                        Box(\r\n                                                            modifier = Modifier\r\n                                                                .size(12.dp)\r\n                                                                .background(Color(color), CircleShape)\r\n                                                        )\r\n                                                    }\r\n                                                },\r\n                                                trailingIcon = {\r\n                                                    Icon(\r\n                                                        imageVector = Icons.Filled.Close,\r\n                                                        contentDescription = null,\r\n                                                        modifier = Modifier.size(16.dp)\r\n                                                    )\r\n                                                },\r\n                                                colors = FilterChipDefaults.filterChipColors(\r\n                                                    selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                                                    selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                                                ),\r\n                                                enabled = enabled\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Box(modifier = Modifier.weight(1f, fill = true)) {\r\n                                    innerTextField()\r\n                                }\r\n                            }\r\n                        },\r\n                        label = { Text(text = stringResource(id = R.string.student_editor_subject)) },\r\n                        placeholder = null,\r\n                        leadingIcon = { Icon(imageVector = Icons.Filled.Book, contentDescription = null) },\r\n                        trailingIcon = null,\r\n                        supportingText = null,\r\n                        singleLine = true,\r\n                        enabled = enabled,\r\n                        isError = false,\r\n                        interactionSource = interactionSource,\r\n                        colors = textFieldColors,\r\n                        contentPadding = OutlinedTextFieldDefaults.contentPadding()\r\n                    )\r\n                }\r\n            )\r\n\r\n            DropdownMenu(\r\n                expanded = expanded && hasSuggestions,\r\n                onDismissRequest = { expanded = false },\r\n                modifier = dropdownModifier,\r\n                containerColor = MaterialTheme.colorScheme.surface,\r\n                properties = PopupProperties(focusable = false)\r\n            ) {\r\n                matchingPresets.forEach { option ->\r\n                    val isSelected = selectedChips.any { it.id == option.id }\r\n                    DropdownMenuItem(\r\n                        text = {\r\n                            Row(\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                                horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n                            ) {\r\n                                Box(\r\n                                    modifier = Modifier\r\n                                        .size(12.dp)\r\n                                        .background(Color(option.colorArgb), CircleShape)\r\n                                )\r\n                                Text(text = option.name)\r\n                            }\r\n                        },\r\n                        trailingIcon = {\r\n                            if (isSelected) {\r\n                                Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                            }\r\n                        },\r\n                        onClick = { addPreset(option) }\r\n                    )\r\n                }\r\n                matchingDefaults.forEach { suggestion ->\r\n                    val isSelected = selectedChips.any {\r\n                        it.id == null && it.name.equals(suggestion, ignoreCase = true)\r\n                    }\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = suggestion) },\r\n                        trailingIcon = {\r\n                            if (isSelected) {\r\n                                Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                            }\r\n                        },\r\n                        onClick = { toggleSuggestion(suggestion) }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate data class StudentSubjectChip(\r\n    val id: Long?,\r\n    val name: String,\r\n    val colorArgb: Int?\r\n)\r\n\r\nprivate fun SubjectPreset.toChip(): StudentSubjectChip =\r\n    StudentSubjectChip(id = id, name = name, colorArgb = colorArgb)\r\n\r\nprivate fun buildSubjectValue(chips: List<StudentSubjectChip>): String {\r\n    val seen = LinkedHashSet<String>()\r\n    val ordered = mutableListOf<String>()\r\n    chips.forEach { chip ->\r\n        val trimmed = chip.name.trim()\r\n        if (trimmed.isNotEmpty()) {\r\n            val normalized = trimmed.lowercase(Locale.getDefault())\r\n            if (seen.add(normalized)) {\r\n                ordered.add(trimmed)\r\n            }\r\n        }\r\n    }\r\n    return ordered.joinToString(separator = \", \")\r\n}\r\n\r\n@Composable\r\nprivate fun RateSection(\r\n    rate: String,\r\n    onRateChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    var isRateDropdownExpanded by remember { mutableStateOf(false) }\r\n    var rateFieldSize by remember { mutableStateOf(IntSize.Zero) }\r\n    val rateDropdownWidth = with(LocalDensity.current) { rateFieldSize.width.toDp() }\r\n    val rateDropdownModifier = if (rateDropdownWidth > 0.dp) Modifier.width(rateDropdownWidth) else Modifier\r\n    val rateOptions = remember { listOf(1500, 2000, 2500, 3000) }\r\n    val textFieldColors = editorFieldColors()\r\n\r\n    Box {\r\n        OutlinedTextField(\r\n            value = rate,\r\n            onValueChange = onRateChange,\r\n            label = { Text(text = stringResource(id = R.string.student_editor_rate)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(focusRequester)\r\n                .onGloballyPositioned { rateFieldSize = it.size },\r\n            singleLine = true,\r\n            enabled = enabled,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = Icons.Outlined.CurrencyRuble,\r\n                    contentDescription = null,\r\n                    tint = iconTint\r\n                )\r\n            },\r\n            trailingIcon = {\r\n                IconButton(\r\n                    onClick = { isRateDropdownExpanded = !isRateDropdownExpanded },\r\n                    enabled = enabled\r\n                ) {\r\n                    Icon(\r\n                        imageVector = if (isRateDropdownExpanded) Icons.Filled.ArrowDropUp else Icons.Filled.ArrowDropDown,\r\n                        contentDescription = null,\r\n                        tint = iconTint\r\n                    )\r\n                }\r\n            },\r\n            supportingText = {\r\n                Text(text = stringResource(id = R.string.student_editor_rate_support))\r\n            },\r\n            keyboardOptions = KeyboardOptions.Default.copy(\r\n                keyboardType = KeyboardType.Decimal,\r\n                imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n            ),\r\n            keyboardActions = if (isStandalone) {\r\n                KeyboardActions(onDone = { onSubmit?.invoke() })\r\n            } else {\r\n                KeyboardActions.Default\r\n            },\r\n            colors = textFieldColors\r\n        )\r\n\r\n        DropdownMenu(\r\n            expanded = isRateDropdownExpanded,\r\n            onDismissRequest = { isRateDropdownExpanded = false },\r\n            modifier = rateDropdownModifier,\r\n            containerColor = MaterialTheme.colorScheme.surface\r\n        ) {\r\n            rateOptions.forEach { option ->\r\n                DropdownMenuItem(\r\n                    text = { Text(text = stringResource(id = R.string.student_editor_rate_option_value, option)) },\r\n                    onClick = {\r\n                        onRateChange(option.toString())\r\n                        isRateDropdownExpanded = false\r\n                    },\r\n                    enabled = enabled\r\n                )\r\n            }\r\n            DropdownMenuItem(\r\n                text = { Text(text = stringResource(id = R.string.student_editor_rate_option_other)) },\r\n                onClick = {\r\n                    isRateDropdownExpanded = false\r\n                    onRateChange(\"\")\r\n                    focusRequester.tryRequestFocus()\r\n                },\r\n                enabled = enabled\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun AdditionalDataToggle(\r\n    expanded: Boolean,\r\n    onToggle: () -> Unit,\r\n    enabled: Boolean,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val title = stringResource(id = R.string.student_editor_additional_data_title)\r\n    val description = stringResource(\r\n        id = if (expanded) {\r\n            R.string.student_editor_additional_data_hide\r\n        } else {\r\n            R.string.student_editor_additional_data_show\r\n        }\r\n    )\r\n    TextButton(\r\n        onClick = onToggle,\r\n        modifier = modifier,\r\n        enabled = enabled\r\n    ) {\r\n        Text(text = title)\r\n        Spacer(modifier = Modifier.width(8.dp))\r\n        Icon(\r\n            imageVector = if (expanded) Icons.Filled.ArrowDropUp else Icons.Filled.ArrowDropDown,\r\n            contentDescription = description\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PhoneSection(\r\n    phone: String,\r\n    onPhoneChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n    OutlinedTextField(\r\n        value = phone,\r\n        onValueChange = onPhoneChange,\r\n        label = { Text(text = stringResource(id = R.string.student_editor_phone)) },\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .focusRequester(focusRequester),\r\n        singleLine = true,\r\n        enabled = enabled,\r\n        leadingIcon = {\r\n            Icon(\r\n                imageVector = Icons.Filled.Phone,\r\n                contentDescription = null,\r\n                tint = iconTint\r\n            )\r\n        },\r\n        keyboardOptions = KeyboardOptions.Default.copy(\r\n            imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n        ),\r\n        keyboardActions = if (isStandalone) {\r\n            KeyboardActions(onDone = { onSubmit?.invoke() })\r\n        } else {\r\n            KeyboardActions.Default\r\n        },\r\n        colors = textFieldColors\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun MessengerSection(\r\n    messenger: String,\r\n    onMessengerChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val messengerOptions = remember { StudentMessengerType.values().toList() }\r\n    var selectedType by remember { mutableStateOf(StudentMessengerType.TELEGRAM) }\r\n    var customLabel by remember { mutableStateOf(\"\") }\r\n    var identifier by remember { mutableStateOf(\"\") }\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n\r\n    LaunchedEffect(messenger) {\r\n        val parsed = messenger.parseMessengerValue()\r\n        selectedType = parsed.type\r\n        customLabel = parsed.customLabel\r\n        identifier = parsed.identifier\r\n    }\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        var isDropdownExpanded by remember { mutableStateOf(false) }\r\n        Box {\r\n            OutlinedTextField(\r\n                value = if (selectedType == StudentMessengerType.OTHER) customLabel else stringResource(id = selectedType.labelRes),\r\n                onValueChange = {\r\n                    if (selectedType == StudentMessengerType.OTHER) {\r\n                        customLabel = it\r\n                        onMessengerChange(buildMessengerValue(selectedType, customLabel, identifier))\r\n                    }\r\n                },\r\n                label = { Text(text = stringResource(id = R.string.student_editor_messenger_type)) },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .onFocusChanged { focusState ->\r\n                        if (enabled && focusState.isFocused) {\r\n                            isDropdownExpanded = true\r\n                        }\r\n                    },\r\n                enabled = enabled,\r\n                readOnly = selectedType != StudentMessengerType.OTHER,\r\n                leadingIcon = {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.Message,\r\n                        contentDescription = null,\r\n                        tint = iconTint\r\n                    )\r\n                },\r\n                trailingIcon = {\r\n                    IconButton(onClick = { isDropdownExpanded = !isDropdownExpanded }, enabled = enabled) {\r\n                        Icon(\r\n                            imageVector = if (isDropdownExpanded) Icons.Filled.ArrowDropUp else Icons.Filled.ArrowDropDown,\r\n                            contentDescription = null,\r\n                            tint = iconTint\r\n                        )\r\n                    }\r\n                },\r\n                colors = textFieldColors\r\n            )\r\n\r\n            DropdownMenu(\r\n                expanded = isDropdownExpanded,\r\n                onDismissRequest = { isDropdownExpanded = false },\r\n                containerColor = MaterialTheme.colorScheme.surface\r\n            ) {\r\n                messengerOptions.forEach { option ->\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = stringResource(id = option.labelRes)) },\r\n                        onClick = {\r\n                            isDropdownExpanded = false\r\n                            selectedType = option\r\n                            if (option != StudentMessengerType.OTHER) {\r\n                                customLabel = \"\"\r\n                            }\r\n                            onMessengerChange(buildMessengerValue(selectedType, customLabel, identifier))\r\n                        },\r\n                        enabled = enabled\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        OutlinedTextField(\r\n            value = identifier,\r\n            onValueChange = {\r\n                identifier = it\r\n                onMessengerChange(buildMessengerValue(selectedType, customLabel, identifier))\r\n            },\r\n            label = { Text(text = stringResource(id = R.string.student_editor_messenger_id)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(focusRequester),\r\n            singleLine = true,\r\n            enabled = enabled,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = Icons.Filled.AlternateEmail,\r\n                    contentDescription = null,\r\n                    tint = iconTint\r\n                )\r\n            },\r\n            keyboardOptions = KeyboardOptions.Default.copy(\r\n                imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n            ),\r\n            keyboardActions = if (isStandalone) {\r\n                KeyboardActions(onDone = { onSubmit?.invoke() })\r\n            } else {\r\n                KeyboardActions.Default\r\n            },\r\n            colors = textFieldColors\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun NotesSection(\r\n    note: String,\r\n    onNoteChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    onSubmit: (() -> Unit)?\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n    OutlinedTextField(\r\n        value = note,\r\n        onValueChange = onNoteChange,\r\n        label = { Text(text = stringResource(id = R.string.student_editor_notes)) },\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .focusRequester(focusRequester),\r\n        minLines = 3,\r\n        enabled = enabled,\r\n        leadingIcon = {\r\n            Icon(\r\n                imageVector = Icons.Filled.Description,\r\n                contentDescription = null,\r\n                tint = iconTint\r\n            )\r\n        },\r\n        keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),\r\n        keyboardActions = KeyboardActions(onDone = {\r\n            onSubmit?.invoke()\r\n        }),\r\n        colors = textFieldColors\r\n    )\r\n}\r\n\r\nprivate suspend fun FocusRequester.safeRequestFocus() {\r\n    repeat(5) {\r\n        if (tryRequestFocus()) {\r\n            return\r\n        }\r\n        // When the dialog is first shown the focus target might not yet be attached.\r\n        // Wait for the next frame so Compose has a chance to attach the node before retrying.\r\n        withFrameNanos { }\r\n    }\r\n    tryRequestFocus()\r\n}\r\n\r\nprivate fun FocusRequester.tryRequestFocus(): Boolean =\r\n    runCatching { requestFocus() }.isSuccess\r\n\r\nprivate data class MessengerValue(\r\n    val type: StudentMessengerType,\r\n    val customLabel: String,\r\n    val identifier: String\r\n)\r\n\r\nprivate fun String.parseMessengerValue(): MessengerValue {\r\n    val raw = trim()\r\n    if (raw.isEmpty()) {\r\n        return MessengerValue(StudentMessengerType.TELEGRAM, \"\", \"\")\r\n    }\r\n\r\n    val delimiterIndex = raw.indexOf(':')\r\n    if (delimiterIndex == -1) {\r\n        return MessengerValue(StudentMessengerType.OTHER, \"\", raw)\r\n    }\r\n\r\n    val label = raw.substring(0, delimiterIndex).trim()\r\n    val value = raw.substring(delimiterIndex + 1).trim()\r\n    val type = StudentMessengerType.fromLabel(label)\r\n    return if (type == StudentMessengerType.OTHER) {\r\n        MessengerValue(type, label, value)\r\n    } else {\r\n        MessengerValue(type, \"\", value)\r\n    }\r\n}\r\n\r\nprivate fun buildMessengerValue(\r\n    type: StudentMessengerType,\r\n    customLabel: String,\r\n    identifier: String\r\n): String {\r\n    val trimmedIdentifier = identifier.trim()\r\n    if (trimmedIdentifier.isEmpty()) {\r\n        return \"\"\r\n    }\r\n\r\n    val label = when (type) {\r\n        StudentMessengerType.OTHER -> customLabel.trim()\r\n        else -> type.label\r\n    }\r\n\r\n    return if (label.isNotEmpty()) {\r\n        \"$label: $trimmedIdentifier\"\r\n    } else {\r\n        trimmedIdentifier\r\n    }\r\n}\r\n\r\n\r\n\r\nprivate enum class StudentMessengerType(\r\n    val label: String,\r\n    val labelRes: Int,\r\n) {\r\n    TELEGRAM(label = \"Telegram\", labelRes = R.string.student_editor_messenger_type_telegram),\r\n    WHATSAPP(label = \"WhatsApp\", labelRes = R.string.student_editor_messenger_type_whatsapp),\r\n    VIBER(label = \"Viber\", labelRes = R.string.student_editor_messenger_type_viber),\r\n    VK(label = \"VK\", labelRes = R.string.student_editor_messenger_type_vk),\r\n    OTHER(label = \"\", labelRes = R.string.student_editor_messenger_type_other);\r\n\r\n    companion object {\r\n        fun fromLabel(label: String): StudentMessengerType {\r\n            val normalized = label.lowercase(Locale.getDefault())\r\n            return values().firstOrNull { option ->\r\n                option.label.lowercase(Locale.getDefault()) == normalized && option != OTHER\r\n            } ?: OTHER\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt b/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt	(revision e01a194328cdbdd45073b50f8707d9bab3e4b2ea)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt	(date 1760973705657)
@@ -1,6 +1,6 @@
 package com.tutorly.ui.screens
 
-import androidx.compose.foundation.ExperimentalLayoutApi
+//import androidx.compose.foundation.ExperimentalLayoutApi
 import androidx.compose.foundation.background
 import androidx.compose.foundation.interaction.MutableInteractionSource
 import androidx.compose.foundation.layout.*
@@ -31,6 +31,7 @@
 import androidx.compose.material3.FilterChipDefaults
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
+import androidx.compose.material3.LocalTextStyle
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.OutlinedTextField
 import androidx.compose.material3.OutlinedTextFieldDefaults
@@ -48,7 +49,7 @@
 import androidx.compose.ui.graphics.SolidColor
 import androidx.compose.ui.layout.onGloballyPositioned
 import androidx.compose.ui.platform.LocalDensity
-import androidx.compose.ui.platform.LocalTextStyle
+//import androidx.compose.ui.platform.LocalTextStyle
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.input.ImeAction
 import androidx.compose.ui.text.input.KeyboardType
