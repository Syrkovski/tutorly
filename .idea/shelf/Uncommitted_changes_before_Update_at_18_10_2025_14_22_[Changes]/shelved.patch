Index: app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.animation.animateContentSize\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.combinedClickable\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.ColumnScope\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.weight\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.ExpandLess\r\nimport androidx.compose.material.icons.filled.ExpandMore\r\nimport androidx.compose.material.icons.outlined.CalendarMonth\r\nimport androidx.compose.material.icons.outlined.LockOpen\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.WarningAmber\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardColors\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CardElevation\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarDuration\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.SnackbarResult\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.material3.rememberSwipeToDismissBoxState\r\nimport androidx.compose.material3.SwipeToDismissBox\r\nimport androidx.compose.material3.SwipeToDismissBoxValue\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.pluralStringResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.LessonForToday\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\r\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\r\nimport com.tutorly.ui.theme.DebtChipContent\r\nimport com.tutorly.ui.theme.DebtChipFill\r\nimport com.tutorly.ui.theme.PaidChipContent\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport java.text.NumberFormat\r\nimport java.time.Instant\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TodayScreen(\r\n    modifier: Modifier = Modifier,\r\n    onAddStudent: () -> Unit = {},\r\n    onOpenStudentProfile: (Long) -> Unit = {},\r\n    onOpenDebtors: () -> Unit = {},\r\n    viewModel: TodayViewModel = hiltViewModel()\r\n) {\r\n    val uiState by viewModel.uiState.collectAsState()\r\n    val snackbarMessage by viewModel.snackbarMessage.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val context = LocalContext.current\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\r\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\r\n    var showCloseDayDialog by rememberSaveable { mutableStateOf(false) }\r\n\r\n    LessonCardSheet(\r\n        state = lessonCardState,\r\n        onDismissRequest = lessonCardViewModel::dismiss,\r\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            lessonCardViewModel.dismiss()\r\n            onAddStudent()\r\n        },\r\n        onDateSelect = lessonCardViewModel::onDateSelected,\r\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\r\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\r\n        onPriceChange = lessonCardViewModel::onPriceChanged,\r\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\r\n        onNoteChange = lessonCardViewModel::onNoteChanged,\r\n        onDeleteLesson = lessonCardViewModel::deleteLesson,\r\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\r\n    )\r\n\r\n    if (showCloseDayDialog) {\r\n        ConfirmCloseDayDialog(\r\n            onConfirm = {\r\n                showCloseDayDialog = false\r\n                viewModel.onDayCloseConfirmed()\r\n            },\r\n            onDismiss = { showCloseDayDialog = false }\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(snackbarMessage) {\r\n        val message = snackbarMessage ?: return@LaunchedEffect\r\n        val text = when (message.status) {\r\n            PaymentStatus.PAID -> context.getString(R.string.today_snackbar_paid)\r\n            PaymentStatus.DUE -> context.getString(R.string.today_snackbar_due)\r\n            else -> context.getString(R.string.today_snackbar_marked)\r\n        }\r\n        val action = context.getString(R.string.today_snackbar_action_undo)\r\n        val result = snackbarHostState.showSnackbar(\r\n            message = text,\r\n            actionLabel = action,\r\n            duration = SnackbarDuration.Short,\r\n            withDismissAction = true\r\n        )\r\n        viewModel.onSnackbarShown()\r\n        if (result == SnackbarResult.ActionPerformed) {\r\n            viewModel.onUndo(message.lessonId)\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        topBar = { TodayTopBar(state = uiState, onReopenDay = viewModel::onReopenDay) },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = Color.Transparent\r\n    ) { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            when (val state = uiState) {\r\n                TodayUiState.Loading -> LoadingState()\r\n                is TodayUiState.Empty -> EmptyState(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors\r\n                )\r\n                is TodayUiState.DayInProgress -> DayInProgressContent(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors,\r\n                    onRequestCloseDay = { showCloseDayDialog = true }\r\n                )\r\n                is TodayUiState.DayClosed -> DayClosedContent(\r\n                    state = state,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LoadingState() {\r\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\r\n        CircularProgressIndicator()\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyState(\r\n    state: TodayUiState.Empty,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit\r\n) {\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"empty_state_header\") {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 32.dp, vertical = 48.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.spacedBy(16.dp)\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Outlined.CalendarMonth,\r\n                    contentDescription = null,\r\n                    modifier = Modifier.size(64.dp),\r\n                    tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                Text(\r\n                    text = stringResource(R.string.today_empty_title),\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Text(\r\n                    text = stringResource(R.string.today_empty_subtitle),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    textAlign = TextAlign.Center,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun DayInProgressContent(\r\n    state: TodayUiState.DayInProgress,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit,\r\n    onRequestCloseDay: () -> Unit\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val (pendingLessons, markedLessons) = remember(state.lessons) {\r\n        state.lessons.partition { it.paymentStatus == PaymentStatus.UNPAID }\r\n    }\r\n    val allLessonsCompleted = remember(state.completedLessons, state.totalLessons) {\r\n        state.totalLessons > 0 && state.completedLessons == state.totalLessons\r\n    }\r\n    val showProgressSummary = !state.showCloseDayCallout\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        state = listState,\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        if (showProgressSummary) {\r\n            item(key = \"summary\") {\r\n                DayProgressSummary(\r\n                    completed = state.completedLessons,\r\n                    total = state.totalLessons,\r\n                    remaining = state.remainingLessons,\r\n                    allLessonsCompleted = allLessonsCompleted\r\n                )\r\n            }\r\n        }\r\n        if (state.showCloseDayCallout) {\r\n            item(key = \"close_day_callout\") {\r\n                CloseDayCallout(onRequestCloseDay = onRequestCloseDay)\r\n            }\r\n        }\r\n        items(pendingLessons, key = { it.id }) { lesson ->\r\n            TodayLessonRow(\r\n                lesson = lesson,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onClick = { onLessonOpen(lesson.id) },\r\n                onLongPress = { onLessonOpen(lesson.id) }\r\n            )\r\n        }\r\n        if (markedLessons.isNotEmpty()) {\r\n            item(key = \"marked_header\") {\r\n                SectionHeader(text = stringResource(id = R.string.today_marked_section_title))\r\n            }\r\n            items(markedLessons, key = { it.id }) { lesson ->\r\n                TodayLessonRow(\r\n                    lesson = lesson,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onClick = { onLessonOpen(lesson.id) },\r\n                    onLongPress = { onLessonOpen(lesson.id) }\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SectionHeader(text: String) {\r\n    Text(\r\n        text = text,\r\n        style = MaterialTheme.typography.titleSmall,\r\n        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 4.dp, vertical = 4.dp)\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun DayProgressSummary(\r\n    completed: Int,\r\n    total: Int,\r\n    remaining: Int,\r\n    allLessonsCompleted: Boolean\r\n) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            val summaryText = if (allLessonsCompleted) {\r\n                stringResource(id = R.string.today_progress_all_done)\r\n            } else {\r\n                stringResource(R.string.today_progress_summary, completed, total)\r\n            }\r\n            Text(\r\n                text = summaryText,\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            if (!allLessonsCompleted) {\r\n                val remainingText = pluralStringResource(\r\n                    id = R.plurals.today_progress_remaining,\r\n                    count = remaining,\r\n                    remaining\r\n                )\r\n                Text(\r\n                    text = remainingText,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun CloseDayCallout(onRequestCloseDay: () -> Unit) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.today_close_day_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            Text(\r\n                text = stringResource(R.string.today_close_day_subtitle),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Button(onClick = onRequestCloseDay) {\r\n                Text(text = stringResource(R.string.today_close_day_action))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ConfirmCloseDayDialog(\r\n    onConfirm: () -> Unit,\r\n    onDismiss: () -> Unit\r\n) {\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(R.string.today_close_day_dialog_title)) },\r\n        text = { Text(text = stringResource(R.string.today_close_day_dialog_body)) },\r\n        confirmButton = {\r\n            TextButton(onClick = onConfirm) {\r\n                Text(text = stringResource(R.string.today_close_day_dialog_confirm))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(R.string.today_close_day_dialog_dismiss))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun DayClosedContent(\r\n    state: TodayUiState.DayClosed,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit\r\n) {\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"summary\") {\r\n            DayClosedSummary(\r\n                paidAmountCents = state.paidAmountCents,\r\n                dueAmountCents = state.todayDueAmountCents,\r\n                formatter = currencyFormatter\r\n            )\r\n        }\r\n        item(key = \"today_debtors\") {\r\n            TodayDebtorsSection(\r\n                lessons = state.todayDueLessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile\r\n            )\r\n        }\r\n        if (state.lessons.isNotEmpty()) {\r\n            item(key = \"closed_lessons\") {\r\n                ClosedDayLessonsSection(\r\n                    lessons = state.lessons,\r\n                    onLessonOpen = onLessonOpen\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DayClosedSummary(\r\n    paidAmountCents: Long,\r\n    dueAmountCents: Long,\r\n    formatter: NumberFormat\r\n) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                SummaryMetric(\r\n                    modifier = Modifier.weight(1f),\r\n                    label = stringResource(R.string.today_closed_income_label),\r\n                    value = formatCurrency(paidAmountCents, formatter),\r\n                    valueColor = MaterialTheme.colorScheme.tertiary\r\n                )\r\n                SummaryMetric(\r\n                    modifier = Modifier.weight(1f),\r\n                    label = stringResource(R.string.today_closed_debt_label),\r\n                    value = formatCurrency(dueAmountCents, formatter),\r\n                    valueColor = MaterialTheme.colorScheme.error\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SummaryMetric(\r\n    modifier: Modifier,\r\n    label: String,\r\n    value: String,\r\n    valueColor: Color\r\n) {\r\n    Column(\r\n        modifier = modifier,\r\n        verticalArrangement = Arrangement.spacedBy(6.dp)\r\n    ) {\r\n        Text(\r\n            text = label,\r\n            style = MaterialTheme.typography.bodySmall,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Text(\r\n            text = value,\r\n            style = MaterialTheme.typography.headlineSmall,\r\n            color = valueColor,\r\n            maxLines = 1,\r\n            overflow = TextOverflow.Ellipsis\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TodayDebtorsSection(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit\r\n) {\r\n    Column(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(R.string.today_debtors_today_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        if (lessons.isEmpty()) {\r\n            Surface(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                shape = MaterialTheme.shapes.large,\r\n                color = MaterialTheme.colorScheme.surface,\r\n                tonalElevation = 0.dp\r\n            ) {\r\n                Text(\r\n                    text = stringResource(R.string.today_debtors_empty),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp)\r\n                )\r\n            }\r\n        } else {\r\n            LessonsList(\r\n                lessons = lessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ClosedDayLessonsSection(\r\n    lessons: List<LessonForToday>,\r\n    onLessonOpen: (Long) -> Unit\r\n) {\r\n    val subtitle = stringResource(\r\n        R.string.today_closed_lessons_section_subtitle,\r\n        lessons.size\r\n    )\r\n    CollapsibleSection(\r\n        title = stringResource(R.string.today_closed_lessons_section_title),\r\n        subtitle = subtitle\r\n    ) {\r\n        lessons.forEach { lesson ->\r\n            LessonCard(\r\n                lesson = lesson,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { onLessonOpen(lesson.id) },\r\n                cardElevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PastDebtorsCollapsible(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit,\r\n    hasMore: Boolean\r\n) {\r\n    val subtitle = if (hasMore) {\r\n        stringResource(R.string.today_debtors_past_subtitle_more, lessons.size)\r\n    } else {\r\n        stringResource(R.string.today_debtors_past_subtitle, lessons.size)\r\n    }\r\n    CollapsibleSection(\r\n        title = stringResource(R.string.today_debtors_past_title),\r\n        subtitle = subtitle\r\n    ) {\r\n        if (lessons.isEmpty()) {\r\n            Text(\r\n                text = stringResource(R.string.today_debtors_past_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        } else {\r\n            LessonsList(\r\n                lessons = lessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                cardElevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n            )\r\n        }\r\n        if (hasMore) {\r\n            Button(onClick = onOpenDebtors) {\r\n                Text(text = stringResource(R.string.today_debtors_more_cta))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun CollapsibleSection(\r\n    title: String,\r\n    modifier: Modifier = Modifier,\r\n    subtitle: String? = null,\r\n    content: @Composable ColumnScope.() -> Unit\r\n) {\r\n    var expanded by rememberSaveable { mutableStateOf(false) }\r\n    Column(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .animateContentSize()\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .clickable { expanded = !expanded }\r\n                .padding(vertical = 6.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = title,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                if (subtitle != null) {\r\n                    Text(\r\n                        text = subtitle,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n            Icon(\r\n                imageVector = if (expanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        }\r\n        if (expanded) {\r\n            Spacer(modifier = Modifier.height(12.dp))\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                content = content\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonsList(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation()\r\n) {\r\n    Column(\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        lessons.forEach { lesson ->\r\n            TodayLessonRow(\r\n                lesson = lesson,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onClick = { onLessonOpen(lesson.id) },\r\n                onLongPress = { onOpenStudentProfile(lesson.studentId) },\r\n                cardElevation = cardElevation\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun TodayLessonRow(\r\n    lesson: LessonForToday,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onClick: () -> Unit,\r\n    onLongPress: () -> Unit,\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation()\r\n) {\r\n    val dismissState = rememberSwipeToDismissBoxState(confirmValueChange = { value ->\r\n        when (value) {\r\n            SwipeToDismissBoxValue.StartToEnd -> {\r\n                onSwipeRight(lesson.id)\r\n                false\r\n            }\r\n            SwipeToDismissBoxValue.EndToStart -> {\r\n                onSwipeLeft(lesson.id)\r\n                false\r\n            }\r\n            else -> false\r\n        }\r\n    })\r\n\r\n    SwipeToDismissBox(\r\n        state = dismissState,\r\n        modifier = Modifier.fillMaxWidth(),\r\n        backgroundContent = { DismissBackground(state = dismissState) }\r\n    ) {\r\n        LessonCard(\r\n            lesson = lesson,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .combinedClickable(\r\n                    onClick = onClick,\r\n                    onLongClick = onLongPress\r\n                ),\r\n            cardElevation = cardElevation\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DismissBackground(state: androidx.compose.material3.SwipeToDismissBoxState) {\r\n    val target = state.targetValue\r\n    if (target == SwipeToDismissBoxValue.Settled) {\r\n        return\r\n    }\r\n    val color: Color\r\n    val icon: ImageVector\r\n    val tint: Color\r\n    val alignment: Alignment\r\n    if (target == SwipeToDismissBoxValue.StartToEnd) {\r\n        color = MaterialTheme.colorScheme.tertiaryContainer\r\n        icon = Icons.Filled.Check\r\n        tint = MaterialTheme.colorScheme.onTertiaryContainer\r\n        alignment = Alignment.CenterStart\r\n    } else {\r\n        color = MaterialTheme.colorScheme.errorContainer\r\n        icon = Icons.Outlined.WarningAmber\r\n        tint = MaterialTheme.colorScheme.onErrorContainer\r\n        alignment = Alignment.CenterEnd\r\n    }\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(color),\r\n        contentAlignment = alignment\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = tint,\r\n            modifier = Modifier\r\n                .padding(horizontal = 24.dp)\r\n                .size(28.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun LessonCard(\r\n    lesson: LessonForToday,\r\n    modifier: Modifier = Modifier,\r\n    cardColors: CardColors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation()\r\n) {\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\") }\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    val startTime = remember(lesson.startAt) { lesson.startAt.atZone(zoneId).toLocalTime() }\r\n    val timeText = remember(startTime) { timeFormatter.format(startTime) }\r\n    val durationMinutes = remember(lesson.duration) { lesson.duration.toMinutes().toInt().coerceAtLeast(0) }\r\n    val amount = remember(lesson.priceCents) { formatCurrency(lesson.priceCents.toLong(), currencyFormatter) }\r\n    val subjectTitle = lesson.lessonTitle?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val grade = lesson.studentGrade?.takeIf { it.isNotBlank() }?.trim()\r\n    val subtitle = listOfNotNull(grade, subjectTitle).joinToString(separator = \" • \")\r\n    val durationLabel = stringResource(R.string.today_duration_format, durationMinutes)\r\n    val isFutureLesson = remember(lesson.startAt) { lesson.startAt.isAfter(Instant.now()) }\r\n\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = cardColors,\r\n        elevation = cardElevation\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp),\r\n                verticalAlignment = Alignment.Top\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.weight(1f),\r\n                    verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                ) {\r\n                    Text(\r\n                        text = lesson.studentName,\r\n                        style = MaterialTheme.typography.titleMedium,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                    if (subtitle.isNotBlank()) {\r\n                        Text(\r\n                            text = subtitle,\r\n                            style = MaterialTheme.typography.bodyMedium,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                    }\r\n                }\r\n                PaymentStatusChip(\r\n                    status = lesson.paymentStatus,\r\n                    isFutureLesson = isFutureLesson\r\n                )\r\n            }\r\n            androidx.compose.foundation.layout.FlowRow(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp),\r\n                verticalArrangement = Arrangement.spacedBy(8.dp)\r\n            ) {\r\n                LessonMetaPill(text = timeText)\r\n                LessonMetaPill(text = durationLabel)\r\n                LessonMetaPill(text = amount)\r\n            }\r\n            val note = lesson.note?.takeIf { it.isNotBlank() }\r\n            if (note != null) {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Outlined.StickyNote2,\r\n                        contentDescription = null,\r\n                        tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        modifier = Modifier.size(18.dp)\r\n                    )\r\n                    Text(\r\n                        text = note,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 2,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PaymentStatusChip(\r\n    status: PaymentStatus,\r\n    isFutureLesson: Boolean,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    if (status == PaymentStatus.UNPAID) return\r\n    val label = when (status) {\r\n        PaymentStatus.PAID -> stringResource(\r\n            if (isFutureLesson) R.string.lesson_card_status_prepaid else R.string.lesson_status_paid\r\n        )\r\n        PaymentStatus.DUE -> stringResource(R.string.lesson_status_due)\r\n        PaymentStatus.CANCELLED -> stringResource(R.string.lesson_status_cancelled)\r\n        PaymentStatus.UNPAID -> return\r\n    }\r\n    val (container, content) = when (status) {\r\n        PaymentStatus.PAID -> MaterialTheme.extendedColors.accent to PaidChipContent\r\n        PaymentStatus.DUE -> DebtChipFill to DebtChipContent\r\n        else -> MaterialTheme.colorScheme.surfaceVariant to MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n    Surface(\r\n        color = container,\r\n        shape = RoundedCornerShape(12.dp),\r\n        shadowElevation = 4.dp,\r\n        modifier = modifier\r\n    ) {\r\n        Text(\r\n            text = label,\r\n            color = content,\r\n            style = MaterialTheme.typography.labelSmall,\r\n            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonMetaPill(text: String, modifier: Modifier = Modifier) {\r\n    Surface(\r\n        color = MaterialTheme.colorScheme.surface,\r\n        contentColor = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        shape = RoundedCornerShape(50),\r\n        modifier = modifier\r\n    ) {\r\n        Text(\r\n            text = text,\r\n            style = MaterialTheme.typography.labelSmall,\r\n            modifier = Modifier.padding(horizontal = 10.dp, vertical = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun TodayTopBar(state: TodayUiState, onReopenDay: () -> Unit) {\r\n    GradientTopBarContainer {\r\n        val titleRes = when (state) {\r\n            is TodayUiState.DayClosed -> R.string.today_topbar_closed\r\n            else -> R.string.today_title\r\n        }\r\n        TopAppBar(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(80.dp),\r\n            title = {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxHeight()\r\n                        .weight(1f)\r\n                        .padding(start = 30.dp),\r\n                    contentAlignment = Alignment.CenterStart\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(titleRes),\r\n                        color = Color.White\r\n                    )\r\n                }\r\n            },\r\n            actions = {\r\n                if (state is TodayUiState.DayClosed) {\r\n                    IconButton(onClick = onReopenDay) {\r\n                        Icon(\r\n                            imageVector = Icons.Outlined.LockOpen,\r\n                            contentDescription = stringResource(R.string.today_reopen_day_action),\r\n                            tint = Color.White\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            colors = TopAppBarDefaults.topAppBarColors(\r\n                containerColor = Color.Transparent,\r\n                scrolledContainerColor = Color.Transparent,\r\n                titleContentColor = Color.White\r\n            ),\r\n            windowInsets = androidx.compose.foundation.layout.WindowInsets(0, 0, 0, 0)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberCurrencyFormatter(): NumberFormat {\r\n    return remember {\r\n        NumberFormat.getCurrencyInstance(Locale.getDefault()).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(revision 2ca187f4f6d5669937ec442b574897796fd83ea1)
+++ b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(date 1760785641426)
@@ -18,7 +18,6 @@
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
-import androidx.compose.foundation.layout.weight
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.items
 import androidx.compose.foundation.lazy.rememberLazyListState
@@ -1006,7 +1005,6 @@
                 Box(
                     modifier = Modifier
                         .fillMaxHeight()
-                        .weight(1f)
                         .padding(start = 30.dp),
                     contentAlignment = Alignment.CenterStart
                 ) {
Index: app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.outlined.Archive\r\nimport androidx.compose.material.icons.outlined.CalendarToday\r\nimport androidx.compose.material.icons.outlined.CreditCard\r\nimport androidx.compose.material.icons.outlined.Delete\r\nimport androidx.compose.material.icons.outlined.Edit\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.ExpandLess\r\nimport androidx.compose.material.icons.outlined.ExpandMore\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material.icons.outlined.Savings\r\nimport androidx.compose.material.icons.outlined.Schedule\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.Unarchive\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.HorizontalDivider\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.IconButtonDefaults\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport com.tutorly.ui.components.PaymentBadgeStatus\r\nimport com.tutorly.ui.components.TutorlyDialog\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\r\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\r\nimport com.tutorly.ui.lessoncreation.LessonCreationConfig\r\nimport com.tutorly.ui.lessoncreation.LessonCreationOrigin\r\nimport com.tutorly.ui.lessoncreation.LessonCreationSheet\r\nimport com.tutorly.ui.lessoncreation.LessonCreationViewModel\r\nimport com.tutorly.ui.theme.PrimaryTextColor\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport java.text.NumberFormat\r\nimport java.time.Instant\r\nimport java.time.ZoneId\r\nimport java.time.ZonedDateTime\r\nimport java.time.YearMonth\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.math.max\r\nimport kotlin.math.roundToInt\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentDetailsScreen(\r\n    onBack: () -> Unit,\r\n    onAddStudentFromCreation: () -> Unit = {},\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentDetailsViewModel = hiltViewModel(),\r\n    creationViewModel: LessonCreationViewModel,\r\n) {\r\n    val state by vm.uiState.collectAsState()\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\r\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\r\n    val editorViewModel: StudentEditorVM = hiltViewModel()\r\n    val creationState by creationViewModel.uiState.collectAsState()\r\n    val context = LocalContext.current\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val editorSnackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var showPrepaymentDialog by rememberSaveable { mutableStateOf(false) }\r\n    var isArchiving by remember { mutableStateOf(false) }\r\n    var showDeleteDialog by rememberSaveable { mutableStateOf(false) }\r\n    var isDeleting by remember { mutableStateOf(false) }\r\n    var showEditorDialog by rememberSaveable { mutableStateOf(false) }\r\n    var pendingEditTarget by remember { mutableStateOf<StudentEditTarget?>(null) }\r\n\r\n    val editorFormState = editorViewModel.formState\r\n\r\n    val closeEditor: () -> Unit = {\r\n        if (!editorFormState.isSaving) {\r\n            showEditorDialog = false\r\n            pendingEditTarget = null\r\n            editorViewModel.updateEditTarget(null)\r\n        }\r\n    }\r\n\r\n    val attemptEditorSave: () -> Unit = {\r\n        if (!editorFormState.isSaving) {\r\n            editorViewModel.save(\r\n                onSaved = {\r\n                    closeEditor()\r\n                },\r\n                onError = { message ->\r\n                    val text = if (message.isNotBlank()) {\r\n                        message\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { editorSnackbarHostState.showSnackbar(text) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    val openEditor: (StudentEditTarget) -> Unit = { target ->\r\n        pendingEditTarget = target\r\n        editorSnackbarHostState.currentSnackbarData?.dismiss()\r\n        editorViewModel.resetFormToLoadedStudent()\r\n        editorViewModel.updateEditTarget(target)\r\n        showEditorDialog = true\r\n    }\r\n    LessonCardSheet(\r\n        state = lessonCardState,\r\n        onDismissRequest = lessonCardViewModel::dismiss,\r\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            lessonCardViewModel.dismiss()\r\n            onAddStudentFromCreation()\r\n        },\r\n        onDateSelect = lessonCardViewModel::onDateSelected,\r\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\r\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\r\n        onPriceChange = lessonCardViewModel::onPriceChanged,\r\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\r\n        onNoteChange = lessonCardViewModel::onNoteChanged,\r\n        onDeleteLesson = lessonCardViewModel::deleteLesson,\r\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\r\n    )\r\n\r\n    LessonCreationSheet(\r\n        state = creationState,\r\n        onDismiss = { creationViewModel.dismiss() },\r\n        onStudentQueryChange = creationViewModel::onStudentQueryChange,\r\n        onStudentSelect = creationViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            creationViewModel.prepareForStudentCreation()\r\n            creationViewModel.dismiss()\r\n            onAddStudentFromCreation()\r\n        },\r\n        onSubjectInputChange = creationViewModel::onSubjectInputChanged,\r\n        onSubjectSelect = creationViewModel::onSubjectSelected,\r\n        onDateSelect = creationViewModel::onDateSelected,\r\n        onTimeSelect = creationViewModel::onTimeSelected,\r\n        onDurationChange = creationViewModel::onDurationChanged,\r\n        onPriceChange = creationViewModel::onPriceChanged,\r\n        onNoteChange = creationViewModel::onNoteChanged,\r\n        onSubmit = creationViewModel::submit,\r\n        onConfirmConflict = creationViewModel::confirmConflict,\r\n        onDismissConflict = creationViewModel::dismissConflict\r\n    )\r\n\r\n    LaunchedEffect(creationState.snackbarMessage) {\r\n        val message = creationState.snackbarMessage\r\n        if (message != null) {\r\n            snackbarHostState.showSnackbar(message)\r\n            creationViewModel.consumeSnackbar()\r\n        }\r\n    }\r\n\r\n    if (showPrepaymentDialog) {\r\n        StudentPrepaymentDialog(\r\n            onDismiss = { showPrepaymentDialog = false },\r\n            onSaved = { result ->\r\n                showPrepaymentDialog = false\r\n                val amountText = formatMoneyInput(result.depositedCents)\r\n                val message = if (result.debtCoveredCents > 0) {\r\n                    val debtText = formatMoneyInput(result.debtCoveredCents)\r\n                    context.getString(R.string.student_prepayment_success_with_debt, amountText, debtText)\r\n                } else {\r\n                    context.getString(R.string.student_prepayment_success, amountText)\r\n                }\r\n                coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n            }\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(showDeleteDialog) {\r\n        if (!showDeleteDialog) {\r\n            isDeleting = false\r\n        }\r\n    }\r\n\r\n    val contentState = state as? StudentProfileUiState.Content\r\n\r\n    val title = contentState?.profile?.student?.name\r\n        ?: stringResource(id = R.string.student_details_title_placeholder)\r\n    val subtitle = contentState?.profile?.let { profile ->\r\n        val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n        val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n        listOfNotNull(grade, subject).joinToString(separator = \" • \")\r\n            .takeIf { it.isNotBlank() }\r\n    }\r\n\r\n    val openLessonCreation: (Long) -> Unit = { id ->\r\n        creationViewModel.start(\r\n            LessonCreationConfig(\r\n                studentId = id,\r\n                zoneId = ZonedDateTime.now().zone,\r\n                origin = LessonCreationOrigin.STUDENT\r\n            )\r\n        )\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            StudentProfileTopBar(\r\n                title = title,\r\n                subtitle = subtitle,\r\n                onEditProfileClick = contentState?.let {\r\n                    { openEditor(StudentEditTarget.PROFILE) }\r\n                },\r\n                isArchived = contentState?.profile?.student?.isArchived,\r\n                onArchiveClick = contentState?.let {\r\n                    {\r\n                        if (!isArchiving) {\r\n                            isArchiving = true\r\n                            vm.toggleArchive(\r\n                                onComplete = { isArchiving = false },\r\n                                onError = { throwable ->\r\n                                    val message = throwable.message?.takeIf { it.isNotBlank() }\r\n                                        ?: context.getString(R.string.student_details_archive_error)\r\n                                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                                }\r\n                            )\r\n                        }\r\n                    }\r\n                },\r\n                onDeleteClick = contentState?.let { { showDeleteDialog = true } },\r\n                archiveEnabled = !isArchiving,\r\n                deleteEnabled = !isDeleting\r\n            )\r\n        },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        floatingActionButton = {\r\n            contentState?.let { current ->\r\n                val profile = current.profile\r\n                FloatingActionButton(\r\n                    onClick = { openLessonCreation(profile.student.id) },\r\n                    modifier = Modifier.navigationBarsPadding(),\r\n                    containerColor = MaterialTheme.extendedColors.accent,\r\n                    contentColor = MaterialTheme.colorScheme.onPrimary\r\n                ) {\r\n                    Icon(imageVector = Icons.Outlined.CalendarToday, contentDescription = null)\r\n                }\r\n            }\r\n        },\r\n        containerColor = Color.Transparent\r\n    ) { innerPadding ->\r\n        when (val currentState = state) {\r\n            StudentProfileUiState.Hidden, StudentProfileUiState.Loading -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n\r\n            StudentProfileUiState.Error -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_profile_error),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n\r\n            is StudentProfileUiState.Content -> {\r\n                StudentProfileContent(\r\n                    profile = currentState.profile,\r\n                    onEdit = openEditor,\r\n                    onAddLesson = openLessonCreation,\r\n                    onPrepaymentClick = { showPrepaymentDialog = true },\r\n                    onLessonClick = lessonCardViewModel::open,\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showDeleteDialog && contentState != null) {\r\n        val studentName = contentState.profile.student.name\r\n        AlertDialog(\r\n            onDismissRequest = {\r\n                if (!isDeleting) {\r\n                    showDeleteDialog = false\r\n                }\r\n            },\r\n            title = { Text(text = stringResource(id = R.string.student_details_delete_title)) },\r\n            text = {\r\n                Text(text = stringResource(id = R.string.student_details_delete_message, studentName))\r\n            },\r\n            confirmButton = {\r\n                TextButton(\r\n                    onClick = {\r\n                        if (!isDeleting) {\r\n                            isDeleting = true\r\n                            vm.deleteStudent(\r\n                                onSuccess = {\r\n                                    isDeleting = false\r\n                                    showDeleteDialog = false\r\n                                    onBack()\r\n                                },\r\n                                onError = { throwable ->\r\n                                    isDeleting = false\r\n                                    val message = throwable.message?.takeIf { it.isNotBlank() }\r\n                                        ?: context.getString(R.string.student_details_delete_error)\r\n                                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                                }\r\n                            )\r\n                        }\r\n                    },\r\n                    enabled = !isDeleting\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_details_delete_confirm))\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(\r\n                    onClick = { showDeleteDialog = false },\r\n                    enabled = !isDeleting\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_details_delete_cancel))\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (showEditorDialog) {\r\n        val focusTarget = pendingEditTarget ?: StudentEditTarget.PROFILE\r\n        StudentEditorDialogContent(\r\n            state = editorFormState,\r\n            onNameChange = editorViewModel::onNameChange,\r\n            onPhoneChange = editorViewModel::onPhoneChange,\r\n            onMessengerChange = editorViewModel::onMessengerChange,\r\n            onRateChange = editorViewModel::onRateChange,\r\n            onSubjectChange = editorViewModel::onSubjectChange,\r\n            onGradeChange = editorViewModel::onGradeChange,\r\n            onNoteChange = editorViewModel::onNoteChange,\r\n            onSave = attemptEditorSave,\r\n            onDismiss = closeEditor,\r\n            editTarget = pendingEditTarget,\r\n            initialFocus = focusTarget,\r\n            snackbarHostState = editorSnackbarHostState\r\n        )\r\n    }\r\n}\r\n\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun StudentProfileTopBar(\r\n    title: String,\r\n    subtitle: String?,\r\n    onEditProfileClick: (() -> Unit)? = null,\r\n    isArchived: Boolean?,\r\n    onArchiveClick: (() -> Unit)? = null,\r\n    onDeleteClick: (() -> Unit)? = null,\r\n    archiveEnabled: Boolean = true,\r\n    deleteEnabled: Boolean = true,\r\n) {\r\n    GradientTopBarContainer {\r\n        val actionCount = listOfNotNull(\r\n            onEditProfileClick,\r\n            if (onArchiveClick != null && isArchived != null) onArchiveClick else null,\r\n            onDeleteClick\r\n        ).size\r\n        val titlePaddingEnd = if (actionCount > 0) {\r\n            val buttonWidth = 48.dp\r\n            val buttonSpacing = 4.dp\r\n            val spacingBetweenTitleAndButtons = 12.dp\r\n            (buttonWidth * actionCount) + (buttonSpacing * max(0, actionCount - 1)) + spacingBetweenTitleAndButtons\r\n        } else {\r\n            0.dp\r\n        }\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(start = 30.dp, end = 16.dp, top = 12.dp, bottom = 12.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(end = titlePaddingEnd)\r\n            ) {\r\n                Text(\r\n                    text = title,\r\n                    maxLines = 2,\r\n                    overflow = TextOverflow.Ellipsis,\r\n                    color = Color.White,\r\n                    style = MaterialTheme.typography.titleLarge\r\n                )\r\n\r\n                if (!subtitle.isNullOrBlank()) {\r\n                    Text(\r\n                        text = subtitle,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis,\r\n                        color = Color.White.copy(alpha = 0.75f),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        modifier = Modifier.padding(top = 4.dp)\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (actionCount > 0) {\r\n                val buttonColors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)\r\n\r\n                Row(\r\n                    modifier = Modifier.align(Alignment.TopEnd),\r\n                    horizontalArrangement = Arrangement.spacedBy(4.dp),\r\n                    verticalAlignment = Alignment.Top\r\n                ) {\r\n                    if (onEditProfileClick != null) {\r\n                        IconButton(onClick = onEditProfileClick, colors = buttonColors) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Edit,\r\n                                contentDescription = stringResource(id = R.string.student_details_edit)\r\n                            )\r\n                        }\r\n                    }\r\n                    if (onArchiveClick != null && isArchived != null) {\r\n                        IconButton(\r\n                            onClick = onArchiveClick,\r\n                            enabled = archiveEnabled,\r\n                            colors = buttonColors\r\n                        ) {\r\n                            val (icon, description) = if (isArchived) {\r\n                                Icons.Outlined.Unarchive to stringResource(id = R.string.student_details_unarchive)\r\n                            } else {\r\n                                Icons.Outlined.Archive to stringResource(id = R.string.student_details_archive)\r\n                            }\r\n                            Icon(imageVector = icon, contentDescription = description)\r\n                        }\r\n                    }\r\n                    if (onDeleteClick != null) {\r\n                        IconButton(\r\n                            onClick = onDeleteClick,\r\n                            enabled = deleteEnabled,\r\n                            colors = buttonColors\r\n                        ) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Delete,\r\n                                contentDescription = stringResource(id = R.string.student_details_delete)\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorDialogContent(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSave: () -> Unit,\r\n    onDismiss: () -> Unit,\r\n    editTarget: StudentEditTarget?,\r\n    initialFocus: StudentEditTarget?,\r\n    snackbarHostState: SnackbarHostState,\r\n) {\r\n    val titleRes = when {\r\n        state.studentId == null -> R.string.add_student\r\n        editTarget == StudentEditTarget.RATE -> R.string.student_editor_title_rate\r\n        editTarget == StudentEditTarget.PHONE -> R.string.student_editor_title_phone\r\n        editTarget == StudentEditTarget.MESSENGER -> R.string.student_editor_title_messenger\r\n        editTarget == StudentEditTarget.NOTES -> R.string.student_editor_title_note\r\n        else -> R.string.student_editor_title\r\n    }\r\n    val title = stringResource(id = titleRes)\r\n\r\n    TutorlyDialog(\r\n        onDismissRequest = {\r\n            if (!state.isSaving) {\r\n                onDismiss()\r\n            }\r\n        },\r\n        modifier = Modifier.imePadding()\r\n    ) {\r\n        Text(\r\n            text = title,\r\n            style = MaterialTheme.typography.titleLarge\r\n        )\r\n\r\n        if (state.isSaving) {\r\n            LinearProgressIndicator(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                color = MaterialTheme.colorScheme.secondary\r\n            )\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            editTarget = editTarget,\r\n            initialFocus = initialFocus,\r\n            enableScrolling = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.End,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            val accent = MaterialTheme.extendedColors.accent\r\n            val actionColors = ButtonDefaults.textButtonColors(\r\n                contentColor = accent,\r\n                disabledContentColor = accent.copy(alpha = 0.5f)\r\n            )\r\n            TextButton(\r\n                onClick = onDismiss,\r\n                enabled = !state.isSaving,\r\n                colors = actionColors\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n            Spacer(modifier = Modifier.width(8.dp))\r\n            TextButton(\r\n                onClick = onSave,\r\n                enabled = !state.isSaving && state.name.isNotBlank(),\r\n                colors = actionColors\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_save))\r\n            }\r\n        }\r\n\r\n        SnackbarHost(\r\n            hostState = snackbarHostState,\r\n            modifier = Modifier.fillMaxWidth()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (StudentEditTarget) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onPrepaymentClick: (Long) -> Unit,\r\n    onLessonClick: (Long) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val locale = remember { Locale(\"ru\", \"RU\") }\r\n    val numberFormatter = remember(locale) {\r\n        NumberFormat.getNumberInstance(locale).apply {\r\n            maximumFractionDigits = 0\r\n            minimumFractionDigits = 0\r\n        }\r\n    }\r\n    val currencyFormatter = remember(locale) {\r\n        NumberFormat.getCurrencyInstance(locale).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n            minimumFractionDigits = 0\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val referenceTime = remember(profile) { Instant.now() }\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val monthFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"LLLL yyyy\", locale) }\r\n\r\n    val groupedLessons = remember(profile.recentLessons, zoneId) {\r\n        val sorted = profile.recentLessons.sortedByDescending { it.startAt }\r\n        val groups = linkedMapOf<YearMonth, MutableList<StudentProfileLesson>>()\r\n        sorted.forEach { lesson ->\r\n            val key = YearMonth.from(lesson.startAt.atZone(zoneId))\r\n            groups.getOrPut(key) { mutableListOf() }.add(lesson)\r\n        }\r\n        groups.map { it.key to it.value.toList() }\r\n    }\r\n\r\n    val listState = rememberLazyListState()\r\n\r\n    LazyColumn(\r\n        state = listState,\r\n        modifier = modifier,\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(24.dp)\r\n    ) {\r\n        item {\r\n            StudentProfileMetricsSection(\r\n                profile = profile,\r\n                numberFormatter = numberFormatter,\r\n                onRateClick = { onEdit(StudentEditTarget.RATE) },\r\n                onPrepaymentClick = { onPrepaymentClick(profile.student.id) }\r\n            )\r\n        }\r\n\r\n        item {\r\n            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                ProfileContactsCard(\r\n                    phone = profile.student.phone,\r\n                    messenger = profile.student.messenger,\r\n                    onPhoneClick = { onEdit(StudentEditTarget.PHONE) },\r\n                    onMessengerClick = { onEdit(StudentEditTarget.MESSENGER) }\r\n                )\r\n                ProfileInfoCard(\r\n                    icon = Icons.Outlined.StickyNote2,\r\n                    label = stringResource(id = R.string.student_details_notes_title),\r\n                    value = profile.student.note,\r\n                    onClick = { onEdit(StudentEditTarget.NOTES) },\r\n                    valueMaxLines = 4\r\n                )\r\n            }\r\n        }\r\n\r\n        item {\r\n            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n\r\n                if (groupedLessons.isEmpty()) {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                } else {\r\n                    Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                        groupedLessons.forEach { (month, lessons) ->\r\n                            StudentProfileLessonMonthSection(\r\n                                month = month,\r\n                                monthLabel = monthFormatter.format(month),\r\n                                lessons = lessons,\r\n                                fallbackSubject = profile.subject,\r\n                                currencyFormatter = currencyFormatter,\r\n                                zoneId = zoneId,\r\n                                dateFormatter = dateFormatter,\r\n                                timeFormatter = timeFormatter,\r\n                                referenceTime = referenceTime,\r\n                                onLessonClick = onLessonClick\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        item { Spacer(modifier = Modifier.height(60.dp)) }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonMonthSection(\r\n    month: YearMonth,\r\n    monthLabel: String,\r\n    lessons: List<StudentProfileLesson>,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    referenceTime: Instant,\r\n    onLessonClick: (Long) -> Unit\r\n) {\r\n    var expanded by rememberSaveable(month) { mutableStateOf(false) }\r\n    val toggleDescription = stringResource(\r\n        id = if (expanded) {\r\n            R.string.student_details_history_collapse_month\r\n        } else {\r\n            R.string.student_details_history_expand_month\r\n        },\r\n        monthLabel\r\n    )\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .clickable { expanded = !expanded }\r\n                .padding(vertical = 4.dp),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = monthLabel,\r\n                style = MaterialTheme.typography.titleSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Icon(\r\n                imageVector = if (expanded) {\r\n                    Icons.Outlined.ExpandLess\r\n                } else {\r\n                    Icons.Outlined.ExpandMore\r\n                },\r\n                contentDescription = toggleDescription,\r\n                tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        }\r\n        if (expanded) {\r\n            Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                lessons.forEach { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = fallbackSubject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter,\r\n                        referenceTime = referenceTime,\r\n                        onClick = { onLessonClick(lesson.id) }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileInfoCard(\r\n    icon: ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    valueMaxLines: Int = 2,\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 14.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Icon(\r\n                imageVector = icon,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n                Text(\r\n                    text = label,\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                Text(\r\n                    text = displayValue,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = if (hasValue) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = valueMaxLines,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    numberFormatter: NumberFormat,\r\n    onRateClick: () -> Unit,\r\n    onPrepaymentClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val lessonsCount = profile.metrics.totalLessons.toString()\r\n    val baseRateCents = profile.student.rateCents?.takeIf { it > 0 }\r\n    val recentRateCents = profile.rate?.let { rate ->\r\n        if (rate.durationMinutes > 0) {\r\n            ((rate.priceCents.toDouble() * 60) / rate.durationMinutes).roundToInt()\r\n        } else {\r\n            null\r\n        }\r\n    }\r\n    val rateCents = baseRateCents ?: recentRateCents\r\n    val rateValue = rateCents?.let { cents ->\r\n        numberFormatter.format(cents / 100.0)\r\n    } ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val earnedValue = numberFormatter.format(profile.metrics.totalPaidCents / 100.0)\r\n    val prepaymentValue = numberFormatter.format(profile.metrics.prepaymentCents / 100.0)\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.CalendarToday,\r\n                    value = lessonsCount,\r\n                    label = stringResource(id = R.string.student_profile_metrics_lessons_label)\r\n                )\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.Schedule,\r\n                    value = rateValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_rate_label),\r\n                    onClick = onRateClick\r\n                )\r\n            }\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.CreditCard,\r\n                    value = earnedValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_earned_label)\r\n                )\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.Savings,\r\n                    value = prepaymentValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_prepayment_label),\r\n                    onClick = onPrepaymentClick\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricTile(\r\n    icon: ImageVector,\r\n    value: String,\r\n    label: String,\r\n    modifier: Modifier = Modifier,\r\n    onClick: (() -> Unit)? = null\r\n) {\r\n    val cardModifier = modifier.fillMaxWidth()\r\n    val content: @Composable () -> Unit = {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(vertical = 16.dp, horizontal = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Icon(\r\n                imageVector = icon,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.primary\r\n            )\r\n            Text(\r\n                text = value,\r\n                style = MaterialTheme.typography.titleLarge,\r\n                fontWeight = FontWeight.SemiBold,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n    if (onClick != null) {\r\n        Card(\r\n            onClick = onClick,\r\n            modifier = cardModifier,\r\n            shape = MaterialTheme.shapes.large,\r\n            colors = TutorlyCardDefaults.colors(),\r\n            elevation = TutorlyCardDefaults.elevation()\r\n        ) { content() }\r\n    } else {\r\n        Card(\r\n            modifier = cardModifier,\r\n            shape = MaterialTheme.shapes.large,\r\n            colors = TutorlyCardDefaults.colors(),\r\n            elevation = TutorlyCardDefaults.elevation()\r\n        ) { content() }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactsCard(\r\n    phone: String?,\r\n    messenger: String?,\r\n    onPhoneClick: () -> Unit,\r\n    onMessengerClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(\r\n        modifier = modifier\r\n            .fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.fillMaxWidth()\r\n        ) {\r\n            ProfileContactRow(\r\n                icon = Icons.Outlined.Phone,\r\n                label = stringResource(id = R.string.student_details_phone_label),\r\n                value = phone,\r\n                placeholder = stringResource(id = R.string.student_profile_contact_placeholder),\r\n                onClick = onPhoneClick\r\n            )\r\n            HorizontalDivider(color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.4f))\r\n            ProfileContactRow(\r\n                icon = Icons.Outlined.Email,\r\n                label = stringResource(id = R.string.student_details_messenger_label),\r\n                value = messenger,\r\n                placeholder = stringResource(id = R.string.student_profile_contact_placeholder),\r\n                onClick = onMessengerClick\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    placeholder: String,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() } ?: placeholder\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clickable(onClick = onClick)\r\n            .padding(horizontal = 16.dp, vertical = 12.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = if (hasValue) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = androidx.compose.ui.text.style.TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    referenceTime: Instant,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = currencyFormatter.format(lesson.priceCents / 100.0)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n    val isUpcoming = lesson.startAt.isAfter(referenceTime)\r\n    val badgeStatus = when {\r\n        !isPaid -> PaymentBadgeStatus.DEBT\r\n        isUpcoming -> PaymentBadgeStatus.PREPAID\r\n        else -> PaymentBadgeStatus.PAID\r\n    }\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = dateText,\r\n                    style = MaterialTheme.typography.labelSmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.weight(1f)\r\n                )\r\n                PaymentBadge(status = badgeStatus)\r\n            }\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                Text(\r\n                    text = timeText,\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.weight(1f)\r\n                )\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(revision 2ca187f4f6d5669937ec442b574897796fd83ea1)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(date 1760781620269)
@@ -60,6 +60,7 @@
 import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.graphics.vector.ImageVector
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.stringResource
