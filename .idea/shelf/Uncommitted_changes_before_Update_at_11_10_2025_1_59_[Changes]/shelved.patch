Index: app/src/main/java/com/tutorly/ui/screens/LessonScreens.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport android.app.DatePickerDialog\r\nimport android.app.TimePickerDialog\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\r\nimport androidx.compose.foundation.layout.FlowRow\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.outlined.CalendarMonth\r\nimport androidx.compose.material.icons.outlined.Schedule\r\nimport androidx.compose.material.icons.outlined.Timelapse\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FilterChip\r\nimport androidx.compose.material3.FilterChipDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport java.text.NumberFormat\r\nimport java.time.Instant\r\nimport java.time.LocalDate\r\nimport java.time.LocalTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\n\r\n@Composable\r\nfun LessonEditorScreen(\r\n    startTime: Instant?,\r\n    studentId: Long?,\r\n    onClose: () -> Unit\r\n) {\r\n    LessonPlaceholder(\r\n        title = \"Создать урок\",\r\n        primary = startTime?.toString() ?: \"—\",\r\n        secondary = studentId?.toString() ?: \"—\",\r\n        actionLabel = \"Закрыть\",\r\n        onAction = onClose\r\n    )\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun LessonDetailsScreen(\r\n    lessonId: Long,\r\n    studentId: Long?,\r\n    startTime: Instant?,\r\n    onBack: () -> Unit,\r\n    vm: LessonDetailsViewModel = hiltViewModel()\r\n) {\r\n    val state by vm.uiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val snackbarMessage = state.snackbarMessage\r\n    LaunchedEffect(snackbarMessage) {\r\n        if (!snackbarMessage.isNullOrBlank()) {\r\n            snackbarHostState.showSnackbar(snackbarMessage)\r\n            vm.consumeSnackbar()\r\n        }\r\n    }\r\n\r\n    var showStudentSheet by remember { mutableStateOf(false) }\r\n    var showDurationDialog by remember { mutableStateOf(false) }\r\n    var showPriceDialog by remember { mutableStateOf(false) }\r\n\r\n    val locale = state.locale\r\n    val context = LocalContext.current\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"EEEE, d MMMM\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val capitalizedDate = remember(state.date, locale) {\r\n        dateFormatter.format(state.date).replaceFirstChar { char ->\r\n            if (char.isLowerCase()) {\r\n                char.titlecase(locale)\r\n            } else {\r\n                char.toString()\r\n            }\r\n        }\r\n    }\r\n    val currencyFormatter = remember(state.locale, state.currencyCode) {\r\n        runCatching {\r\n            NumberFormat.getCurrencyInstance(state.locale).apply {\r\n                currency = Currency.getInstance(state.currencyCode)\r\n            }\r\n        }.getOrElse { NumberFormat.getCurrencyInstance(state.locale) }\r\n    }\r\n    val formattedPrice = remember(state.priceCents, currencyFormatter) {\r\n        currencyFormatter.format(state.priceCents / 100.0)\r\n    }\r\n\r\n    if (showDurationDialog) {\r\n        DurationDialog(\r\n            currentMinutes = state.durationMinutes,\r\n            onDismiss = { showDurationDialog = false },\r\n            onConfirm = { minutes ->\r\n                vm.onDurationSelected(minutes)\r\n                showDurationDialog = false\r\n            }\r\n        )\r\n    }\r\n\r\n    if (showPriceDialog) {\r\n        PriceDialog(\r\n            currentPriceCents = state.priceCents,\r\n            currencySymbol = state.currencySymbol,\r\n            onDismiss = { showPriceDialog = false },\r\n            onConfirm = { cents ->\r\n                vm.onPriceChanged(cents)\r\n                showPriceDialog = false\r\n            }\r\n        )\r\n    }\r\n\r\n    if (showStudentSheet) {\r\n        val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n        ModalBottomSheet(\r\n            onDismissRequest = { showStudentSheet = false },\r\n            sheetState = sheetState\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 20.dp, vertical = 16.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp)\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.lesson_details_student_sheet_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                if (state.studentOptions.isEmpty()) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.lesson_details_empty_students),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                } else {\r\n                    LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n                        items(state.studentOptions, key = { it.id }) { option ->\r\n                            val selected = option.id == state.studentId\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .clickable {\r\n                                        vm.onStudentSelected(option.id)\r\n                                        showStudentSheet = false\r\n                                    }\r\n                                    .padding(vertical = 12.dp),\r\n                                horizontalArrangement = Arrangement.SpaceBetween,\r\n                                verticalAlignment = Alignment.CenterVertically\r\n                            ) {\r\n                                Column(modifier = Modifier.weight(1f)) {\r\n                                    Text(\r\n                                        text = option.name,\r\n                                        style = MaterialTheme.typography.titleMedium,\r\n                                        maxLines = 1,\r\n                                        overflow = TextOverflow.Ellipsis\r\n                                    )\r\n                                    val subtitle = listOfNotNull(option.subject, option.grade)\r\n                                        .joinToString(separator = \" \")\r\n                                    if (subtitle.isNotBlank()) {\r\n                                        Text(\r\n                                            text = subtitle,\r\n                                            style = MaterialTheme.typography.bodySmall,\r\n                                            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                            maxLines = 1,\r\n                                            overflow = TextOverflow.Ellipsis\r\n                                        )\r\n                                    }\r\n                                }\r\n                                if (selected) {\r\n                                    Icon(\r\n                                        imageVector = Icons.Filled.Check,\r\n                                        contentDescription = null,\r\n                                        tint = MaterialTheme.colorScheme.primary\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = { LessonDetailsTopBar(onBack = onBack) },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }\r\n    ) { innerPadding ->\r\n        when {\r\n            state.isLoading -> {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n\r\n            state.isNotFound -> {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.lesson_details_not_found),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n\r\n            else -> {\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                        .padding(horizontal = 20.dp, vertical = 16.dp),\r\n                    verticalArrangement = Arrangement.spacedBy(16.dp)\r\n                ) {\r\n                    if (state.isSaving) {\r\n                        LinearProgressIndicator(modifier = Modifier.fillMaxWidth())\r\n                    }\r\n\r\n                    Surface(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .clickable { showStudentSheet = true },\r\n                        shape = MaterialTheme.shapes.extraLarge,\r\n                        tonalElevation = 2.dp,\r\n                        color = MaterialTheme.colorScheme.surfaceVariant\r\n                    ) {\r\n                        Column(\r\n                            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n                            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n                        ) {\r\n                            Text(\r\n                                text = state.studentName.takeIf { it.isNotBlank() }\r\n                                    ?: stringResource(id = R.string.lesson_details_student_placeholder),\r\n                                style = MaterialTheme.typography.titleLarge,\r\n                                fontWeight = FontWeight.SemiBold\r\n                            )\r\n                            val subtitle = listOfNotNull(state.subjectName, state.studentGrade)\r\n                                .joinToString(separator = \" \")\r\n                            if (subtitle.isNotBlank()) {\r\n                                Text(\r\n                                    text = subtitle,\r\n                                    style = MaterialTheme.typography.bodyMedium,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                    maxLines = 2,\r\n                                    overflow = TextOverflow.Ellipsis\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Surface(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .clickable {\r\n                                DatePickerDialog(\r\n                                    context,\r\n                                    { _, year, month, day ->\r\n                                        vm.onDateSelected(LocalDate.of(year, month + 1, day))\r\n                                    },\r\n                                    state.date.year,\r\n                                    state.date.monthValue - 1,\r\n                                    state.date.dayOfMonth\r\n                                ).show()\r\n                            },\r\n                        shape = MaterialTheme.shapes.large,\r\n                        tonalElevation = 1.dp,\r\n                        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n                    ) {\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(horizontal = 20.dp, vertical = 14.dp),\r\n                            verticalAlignment = Alignment.CenterVertically,\r\n                            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n                        ) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.CalendarMonth,\r\n                                contentDescription = null,\r\n                                tint = MaterialTheme.colorScheme.primary\r\n                            )\r\n                            Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n                                Text(\r\n                                    text = stringResource(id = R.string.lesson_details_date_label),\r\n                                    style = MaterialTheme.typography.labelMedium,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                                )\r\n                                Text(\r\n                                    text = capitalizedDate,\r\n                                    style = MaterialTheme.typography.titleMedium\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                        Surface(\r\n                            modifier = Modifier\r\n                                .weight(1f)\r\n                                .clickable {\r\n                                    TimePickerDialog(\r\n                                        context,\r\n                                        { _, hour, minute ->\r\n                                            vm.onTimeSelected(LocalTime.of(hour, minute))\r\n                                        },\r\n                                        state.time.hour,\r\n                                        state.time.minute,\r\n                                        true\r\n                                    ).show()\r\n                                },\r\n                            shape = MaterialTheme.shapes.large,\r\n                            tonalElevation = 1.dp,\r\n                            color = MaterialTheme.colorScheme.surfaceContainerLow\r\n                        ) {\r\n                            Column(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .padding(horizontal = 20.dp, vertical = 14.dp),\r\n                                verticalArrangement = Arrangement.spacedBy(6.dp)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Outlined.Schedule,\r\n                                    contentDescription = null,\r\n                                    tint = MaterialTheme.colorScheme.primary\r\n                                )\r\n                                Text(\r\n                                    text = stringResource(id = R.string.lesson_details_time_label),\r\n                                    style = MaterialTheme.typography.labelMedium,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                                )\r\n                                Text(\r\n                                    text = state.time.format(timeFormatter),\r\n                                    style = MaterialTheme.typography.titleMedium\r\n                                )\r\n                            }\r\n                        }\r\n\r\n                        Surface(\r\n                            modifier = Modifier\r\n                                .weight(1f)\r\n                                .clickable { showDurationDialog = true },\r\n                            shape = MaterialTheme.shapes.large,\r\n                            tonalElevation = 1.dp,\r\n                            color = MaterialTheme.colorScheme.surfaceContainerLow\r\n                        ) {\r\n                            Column(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .padding(horizontal = 20.dp, vertical = 14.dp),\r\n                                verticalArrangement = Arrangement.spacedBy(6.dp)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Outlined.Timelapse,\r\n                                    contentDescription = null,\r\n                                    tint = MaterialTheme.colorScheme.primary\r\n                                )\r\n                                Text(\r\n                                    text = stringResource(id = R.string.lesson_details_duration_label),\r\n                                    style = MaterialTheme.typography.labelMedium,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                                )\r\n                                Text(\r\n                                    text = \"${state.durationMinutes} ${stringResource(id = R.string.lesson_create_minutes_suffix)}\",\r\n                                    style = MaterialTheme.typography.titleMedium\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Surface(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .clickable { showPriceDialog = true },\r\n                        shape = MaterialTheme.shapes.large,\r\n                        tonalElevation = 1.dp,\r\n                        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n                    ) {\r\n                        Column(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(horizontal = 20.dp, vertical = 14.dp),\r\n                            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n                        ) {\r\n                            Text(\r\n                                text = stringResource(id = R.string.lesson_details_price_label),\r\n                                style = MaterialTheme.typography.labelMedium,\r\n                                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                            )\r\n                            Text(\r\n                                text = formattedPrice,\r\n                                style = MaterialTheme.typography.titleMedium\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonDetailsTopBar(onBack: () -> Unit) {\r\n    TopAppBar(\r\n        title = { Text(text = stringResource(id = R.string.lesson_details_title)) },\r\n        navigationIcon = {\r\n            IconButton(onClick = onBack) {\r\n                Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = null)\r\n            }\r\n        },\r\n        colors = TopAppBarDefaults.topAppBarColors(\r\n            containerColor = MaterialTheme.colorScheme.surface,\r\n            titleContentColor = MaterialTheme.colorScheme.onSurface\r\n        )\r\n    )\r\n}\r\n\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nprivate fun DurationDialog(\r\n    currentMinutes: Int,\r\n    onDismiss: () -> Unit,\r\n    onConfirm: (Int) -> Unit\r\n) {\r\n    val presets = listOf(45, 60, 90, 120)\r\n    var selectedPreset by remember(currentMinutes) {\r\n        mutableStateOf(presets.firstOrNull { it == currentMinutes })\r\n    }\r\n    var customInput by remember(currentMinutes) {\r\n        mutableStateOf(if (currentMinutes in presets) \"\" else currentMinutes.takeIf { it > 0 }?.toString().orEmpty())\r\n    }\r\n    val confirmEnabled = selectedPreset != null || customInput.toIntOrNull()?.let { it > 0 } == true\r\n\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_details_duration_dialog_title)) },\r\n        text = {\r\n            Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                FlowRow(horizontalArrangement = Arrangement.spacedBy(8.dp), verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n                    presets.forEach { option ->\r\n                        val selected = selectedPreset == option\r\n                        FilterChip(\r\n                            selected = selected,\r\n                            onClick = {\r\n                                selectedPreset = option\r\n                                customInput = \"\"\r\n                            },\r\n                            label = { Text(text = stringResource(id = R.string.lesson_create_duration_chip, option)) },\r\n                            colors = FilterChipDefaults.filterChipColors(\r\n                                selectedContainerColor = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),\r\n                                selectedLabelColor = MaterialTheme.colorScheme.primary\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n                OutlinedTextField(\r\n                    value = customInput,\r\n                    onValueChange = { value ->\r\n                        val digits = value.filter { it.isDigit() }\r\n                        customInput = digits\r\n                        if (digits.isNotEmpty()) {\r\n                            selectedPreset = null\r\n                        }\r\n                    },\r\n                    label = { Text(text = stringResource(id = R.string.lesson_details_duration_custom_hint)) },\r\n                    suffix = { Text(text = stringResource(id = R.string.lesson_create_minutes_suffix)) },\r\n                    keyboardOptions = KeyboardOptions(keyboardType = androidx.compose.ui.text.input.KeyboardType.Number),\r\n                    modifier = Modifier.fillMaxWidth()\r\n                )\r\n            }\r\n        },\r\n        confirmButton = {\r\n            TextButton(\r\n                onClick = {\r\n                    val minutes = selectedPreset ?: customInput.toIntOrNull()\r\n                    if (minutes != null && minutes > 0) {\r\n                        onConfirm(minutes)\r\n                    }\r\n                },\r\n                enabled = confirmEnabled\r\n            ) {\r\n                Text(text = stringResource(id = R.string.lesson_details_save))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_cancel))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun PriceDialog(\r\n    currentPriceCents: Int,\r\n    currencySymbol: String,\r\n    onDismiss: () -> Unit,\r\n    onConfirm: (Int) -> Unit\r\n) {\r\n    var priceInput by remember(currentPriceCents) {\r\n        mutableStateOf(currentPriceCents.takeIf { it > 0 }?.let { (it / 100).toString() } ?: \"\")\r\n    }\r\n    val confirmEnabled = priceInput.toIntOrNull() != null\r\n\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_details_price_dialog_title)) },\r\n        text = {\r\n            OutlinedTextField(\r\n                value = priceInput,\r\n                onValueChange = { value ->\r\n                    priceInput = value.filter { it.isDigit() }\r\n                },\r\n                label = { Text(text = stringResource(id = R.string.lesson_details_price_hint)) },\r\n                suffix = { Text(text = currencySymbol) },\r\n                keyboardOptions = KeyboardOptions(keyboardType = androidx.compose.ui.text.input.KeyboardType.Number),\r\n                modifier = Modifier.fillMaxWidth()\r\n            )\r\n        },\r\n        confirmButton = {\r\n            TextButton(\r\n                onClick = {\r\n                    priceInput.toIntOrNull()?.let { rubles ->\r\n                        onConfirm(rubles * 100)\r\n                    }\r\n                },\r\n                enabled = confirmEnabled\r\n            ) {\r\n                Text(text = stringResource(id = R.string.lesson_details_save))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_cancel))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun LessonPlaceholder(\r\n    title: String,\r\n    primary: String,\r\n    secondary: String,\r\n    actionLabel: String,\r\n    onAction: () -> Unit\r\n) {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(32.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.CenterVertically),\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        Text(text = title, style = MaterialTheme.typography.headlineMedium)\r\n        Text(text = \"startTime: $primary\", style = MaterialTheme.typography.bodyMedium)\r\n        Text(text = \"studentId: $secondary\", style = MaterialTheme.typography.bodyMedium)\r\n        Button(onClick = onAction) {\r\n            Text(text = actionLabel)\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/LessonScreens.kt b/app/src/main/java/com/tutorly/ui/screens/LessonScreens.kt
--- a/app/src/main/java/com/tutorly/ui/screens/LessonScreens.kt	(revision 54f423004fd990cdd5fec46b320232a9dfe77a35)
+++ b/app/src/main/java/com/tutorly/ui/screens/LessonScreens.kt	(date 1760132216374)
@@ -448,6 +448,7 @@
     }
 }
 
+@OptIn(ExperimentalMaterial3Api::class)
 @Composable
 private fun LessonDetailsTopBar(onBack: () -> Unit) {
     TopAppBar(
