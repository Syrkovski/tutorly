Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nagp = \"8.13.0\"\r\nkotlin = \"2.0.21\"\r\ncoreKtx = \"1.17.0\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.3.0\"\r\nespressoCore = \"3.7.0\"\r\nlifecycleRuntimeKtx = \"2.9.4\"\r\nactivityCompose = \"1.11.0\"\r\ncomposeBom = \"2025.09.01\"\r\nnavigation = \"2.9.5\"\r\nlifecycle = \"2.9.4\"\r\ncoroutines = \"1.10.2\"\r\nsplashscreen = \"1.0.1\"\r\ndesugar = \"2.1.5\"\r\nroom = \"2.8.1\"\r\nhilt = \"2.57.2\"\r\nhilt-navigation-compose = \"1.3.0\"\r\nkotlinx-metadata-jvm = \"0.9.0\"\r\n\r\n\r\n[libraries]\r\nkotlinx-metadata-jvm = { module = \"org.jetbrains.kotlinx:kotlinx-metadata-jvm\", version.ref = \"kotlinx-metadata-jvm\" }\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\r\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\r\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\r\nandroidx-compose-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\r\nandroidx-compose-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\r\nandroidx-compose-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\r\nandroidx-compose-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\r\nandroidx-compose-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\r\nandroidx-compose-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\r\nandroidx-compose-foundation = { group = \"androidx.compose.foundation\", name = \"foundation\" }\r\nandroidx-compose-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\r\nandroidx-navigation-compose = { module = \"androidx.navigation:navigation-compose\", version.ref = \"navigation\" }\r\nkotlinx-coroutines-android = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-android\", version.ref = \"coroutines\" }\r\nkotlinx-coroutines-core = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"coroutines\" }\r\nandroidx-lifecycle-viewmodel-compose = { module = \"androidx.lifecycle:lifecycle-viewmodel-compose\", version.ref = \"lifecycle\" }\r\nandroidx-compose-material-icons-extended = { module = \"androidx.compose.material:material-icons-extended\" }\r\nandroidx-core-splashscreen = { module = \"androidx.core:core-splashscreen\", version.ref = \"splashscreen\" }\r\ndesugar-jdk-libs = { module = \"com.android.tools:desugar_jdk_libs\", version.ref = \"desugar\" }\r\nroom-runtime = { module = \"androidx.room:room-runtime\", version.ref = \"room\" }\r\nroom-ktx = { module = \"androidx.room:room-ktx\", version.ref = \"room\" }\r\nroom-compiler = { module = \"androidx.room:room-compiler\", version.ref = \"room\" }\r\nhilt-android = { module = \"com.google.dagger:hilt-android\", version.ref = \"hilt\" }\r\nhilt-compiler = { module = \"com.google.dagger:hilt-compiler\", version.ref = \"hilt\" }\r\nhilt-navigation-compose = {module = \"androidx.hilt:hilt-navigation-compose\", version.ref = \"hilt-navigation-compose\"}\r\n\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\nkotlin-compose = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\r\nksp = { id = \"com.google.devtools.ksp\", version = \"2.0.21-1.0.27\" }\r\nhilt = { id = \"com.google.dagger.hilt.android\", version.ref = \"hilt\" }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
+++ b/gradle/libs.versions.toml	(date 1760127698419)
@@ -17,6 +17,7 @@
 hilt = "2.57.2"
 hilt-navigation-compose = "1.3.0"
 kotlinx-metadata-jvm = "0.9.0"
+foundation = "1.9.3"
 
 
 [libraries]
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1760127283407)
+++ b/.idea/compiler.xml	(date 1760127283407)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="21" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
+++ b/.idea/misc.xml	(date 1760127283307)
@@ -1,4 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1760127283357)
+++ b/.idea/.name	(date 1760127283357)
@@ -0,0 +1,1 @@
+Tutorly
\ No newline at end of file
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. For more details, visit\r\n# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app's APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Kotlin code style for this project: \"official\" or \"obsolete\":\r\nkotlin.code.style=official\r\n# Enables namespacing of each library's R class so that its R class includes only the\r\n# resources declared in the library itself and none from the library's dependencies,\r\n# thereby reducing the size of the R class for that library\r\nandroid.nonTransitiveRClass=true\r\norg.gradle.java.home=C\\:\\\\Users\\\\Syrok\\\\.jdks\\\\ms-17.0.16\r\n\r\ndagger.hilt.android.plugin.disableAggregatingTask=true\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
+++ b/gradle.properties	(date 1760127283219)
@@ -21,7 +21,7 @@
 # resources declared in the library itself and none from the library's dependencies,
 # thereby reducing the size of the R class for that library
 android.nonTransitiveRClass=true
-org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
+#org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
 
 dagger.hilt.android.plugin.disableAggregatingTask=true
 
Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Add,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onRateChange = vm::onEditorRateChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .imePadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            modifier = Modifier\r\n                .weight(1f, fill = false)\r\n                .fillMaxWidth(),\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_editor_save)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val rate = item.profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n    val subtitle = listOfNotNull(subject, grade, rate)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onClose = onClose,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    onClose = onClose\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = profile.subject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        Row(horizontalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            IconButton(onClick = onClose) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_profile_close)\r\n                )\r\n            }\r\n            IconButton(onClick = { onEdit(profile.student.id) }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Edit,\r\n                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        0 -> stringResource(id = R.string.students_rate_label_generic)\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760127283257)
@@ -829,10 +829,10 @@
                     }
                 } else {
                     null
-                }
-            }
+                    }
+            )}
         }
-    }
+
 }
 
 @Composable
