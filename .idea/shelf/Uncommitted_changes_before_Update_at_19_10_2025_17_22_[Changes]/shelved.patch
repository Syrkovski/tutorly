Index: app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.defaultMinSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.text.KeyboardActions\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.AlternateEmail\r\nimport androidx.compose.material.icons.filled.ArrowDropDown\r\nimport androidx.compose.material.icons.filled.ArrowDropUp\r\nimport androidx.compose.material.icons.filled.Book\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Description\r\nimport androidx.compose.material.icons.filled.Message\r\nimport androidx.compose.material.icons.filled.Person\r\nimport androidx.compose.material.icons.filled.Phone\r\nimport androidx.compose.material.icons.filled.School\r\nimport androidx.compose.material.icons.outlined.CurrencyRuble\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.DropdownMenuItem\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.OutlinedTextFieldDefaults\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TextFieldColors\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.focus.focusRequester\r\nimport androidx.compose.ui.focus.onFocusChanged\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.text.input.KeyboardCapitalization\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.tutorly.R\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport java.util.Locale\r\n\r\n@Composable\r\nprivate fun editorFieldColors(): TextFieldColors {\r\n    val colorScheme = MaterialTheme.colorScheme\r\n    val accent = MaterialTheme.extendedColors.accent\r\n    return OutlinedTextFieldDefaults.colors(\r\n        focusedContainerColor = colorScheme.surface,\r\n        unfocusedContainerColor = colorScheme.surface,\r\n        disabledContainerColor = colorScheme.surface,\r\n        errorContainerColor = colorScheme.surface,\r\n        focusedBorderColor = accent,\r\n        unfocusedBorderColor = accent.copy(alpha = 0.4f),\r\n        disabledBorderColor = accent.copy(alpha = 0.24f),\r\n        errorBorderColor = colorScheme.error\r\n    )\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentEditorForm(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    editTarget: StudentEditTarget? = null,\r\n    initialFocus: StudentEditTarget? = null,\r\n    enableScrolling: Boolean = true,\r\n    enabled: Boolean = true,\r\n    onSubmit: (() -> Unit)? = null,\r\n) {\r\n    val nameFocusRequester = remember { FocusRequester() }\r\n    val gradeFocusRequester = remember { FocusRequester() }\r\n    val rateFocusRequester = remember { FocusRequester() }\r\n    val phoneFocusRequester = remember { FocusRequester() }\r\n    val messengerFocusRequester = remember { FocusRequester() }\r\n    val noteFocusRequester = remember { FocusRequester() }\r\n    val scrollState = rememberScrollState()\r\n\r\n    LaunchedEffect(initialFocus, enabled) {\r\n        if (enabled) {\r\n            when (initialFocus) {\r\n                StudentEditTarget.PROFILE -> nameFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.RATE -> rateFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.PHONE -> phoneFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.MESSENGER -> messengerFocusRequester.safeRequestFocus()\r\n                StudentEditTarget.NOTES -> noteFocusRequester.safeRequestFocus()\r\n                null -> Unit\r\n            }\r\n        }\r\n    }\r\n\r\n    val showFullForm = editTarget == null\r\n    val isNewStudent = state.studentId == null\r\n    var showAdditionalData by rememberSaveable(state.studentId) {\r\n        mutableStateOf(\r\n            !isNewStudent ||\r\n                state.phone.isNotBlank() ||\r\n                state.messenger.isNotBlank() ||\r\n                state.note.isNotBlank()\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(editTarget) {\r\n        if (editTarget == StudentEditTarget.PHONE ||\r\n            editTarget == StudentEditTarget.MESSENGER ||\r\n            editTarget == StudentEditTarget.NOTES\r\n        ) {\r\n            showAdditionalData = true\r\n        }\r\n    }\r\n\r\n    val columnModifier = if (enableScrolling) {\r\n        modifier.verticalScroll(scrollState)\r\n    } else {\r\n        modifier\r\n    }\r\n\r\n    val textFieldColors = editorFieldColors()\r\n\r\n    Column(\r\n        modifier = columnModifier,\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        if (showFullForm || editTarget == StudentEditTarget.PROFILE) {\r\n            ProfileSection(\r\n                state = state,\r\n                onNameChange = onNameChange,\r\n                onSubjectChange = onSubjectChange,\r\n                onGradeChange = onGradeChange,\r\n                enabled = enabled,\r\n                nameFocusRequester = nameFocusRequester,\r\n                gradeFocusRequester = gradeFocusRequester,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.PROFILE,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        if (showFullForm || editTarget == StudentEditTarget.RATE) {\r\n            RateSection(\r\n                rate = state.rate,\r\n                onRateChange = onRateChange,\r\n                enabled = enabled,\r\n                focusRequester = rateFocusRequester,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.RATE,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        val shouldShowAdditionalSections = !isNewStudent || showAdditionalData\r\n\r\n        if (showFullForm && isNewStudent) {\r\n            AdditionalDataToggle(\r\n                expanded = showAdditionalData,\r\n                onToggle = { showAdditionalData = !showAdditionalData },\r\n                enabled = enabled,\r\n                modifier = Modifier.align(Alignment.Start)\r\n            )\r\n        }\r\n\r\n        if ((showFullForm && shouldShowAdditionalSections) || editTarget == StudentEditTarget.PHONE) {\r\n            PhoneSection(\r\n                phone = state.phone,\r\n                onPhoneChange = onPhoneChange,\r\n                enabled = enabled,\r\n                focusRequester = phoneFocusRequester,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.PHONE,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        if ((showFullForm && shouldShowAdditionalSections) || editTarget == StudentEditTarget.MESSENGER) {\r\n            MessengerSection(\r\n                messenger = state.messenger,\r\n                onMessengerChange = onMessengerChange,\r\n                enabled = enabled,\r\n                focusRequester = messengerFocusRequester,\r\n                isStandalone = !showFullForm && editTarget == StudentEditTarget.MESSENGER,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n        if ((showFullForm && shouldShowAdditionalSections) || editTarget == StudentEditTarget.NOTES) {\r\n            NotesSection(\r\n                note = state.note,\r\n                onNoteChange = onNoteChange,\r\n                enabled = enabled,\r\n                focusRequester = noteFocusRequester,\r\n                onSubmit = onSubmit\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SubjectInputField(\r\n    value: String,\r\n    onValueChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    label: @Composable (() -> Unit)?,\r\n    placeholder: @Composable (() -> Unit)?,\r\n    supportingText: @Composable (() -> Unit)?,\r\n    leadingIcon: @Composable (() -> Unit)?,\r\n    onSubmit: (() -> Unit)?,\r\n    locale: Locale,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val parts = remember(value, locale) { parseSubjectInput(value, locale) }\r\n    val tokens = parts.tokens\r\n    val query = parts.query\r\n    val displayValue = remember(parts) {\r\n        buildSubjectInput(tokens, query, forceSeparator = parts.hasSeparator)\r\n    }\r\n    val colors = editorFieldColors()\r\n\r\n    OutlinedTextField(\r\n        value = displayValue,\r\n        onValueChange = { raw ->\r\n            val parsed = parseSubjectInput(raw, locale)\r\n            val sanitized = buildSubjectInput(\r\n                parsed.tokens,\r\n                parsed.query,\r\n                forceSeparator = parsed.hasSeparator\r\n            )\r\n            if (sanitized != value) {\r\n                onValueChange(sanitized)\r\n            }\r\n        },\r\n        modifier = modifier.fillMaxWidth(),\r\n        enabled = enabled,\r\n        singleLine = true,\r\n        label = label,\r\n        placeholder = placeholder,\r\n        supportingText = supportingText,\r\n        leadingIcon = leadingIcon,\r\n        keyboardOptions = KeyboardOptions(\r\n            capitalization = KeyboardCapitalization.Sentences,\r\n            imeAction = ImeAction.Next\r\n        ),\r\n        keyboardActions = KeyboardActions(onNext = { onSubmit?.invoke() }),\r\n        colors = colors\r\n    )\r\n}\r\n\r\nprivate data class SubjectInputParts(\r\n    val tokens: List<String>,\r\n    val query: String,\r\n    val hasSeparator: Boolean\r\n)\r\n\r\nprivate fun parseSubjectInput(raw: String, locale: Locale): SubjectInputParts {\r\n    if (raw.isBlank()) {\r\n        return SubjectInputParts(emptyList(), \"\", false)\r\n    }\r\n    val hasSeparator = raw.trimEnd().endsWith(',')\r\n    val segments = raw.split(',').map { it.trim() }\r\n    val baseTokens = if (hasSeparator) {\r\n        segments\r\n    } else {\r\n        segments.dropLast(1)\r\n    }\r\n    val tokens = baseTokens.fold(mutableListOf<String>()) { acc, item ->\r\n        val normalized = enforceCapitalized(item, locale)\r\n        if (normalized.isNotEmpty() && acc.none { it.equals(normalized, ignoreCase = true) }) {\r\n            acc.add(normalized)\r\n        }\r\n        acc\r\n    }\r\n    val query = if (hasSeparator) \"\" else segments.lastOrNull().orEmpty()\r\n    return SubjectInputParts(tokens, enforceCapitalized(query, locale), hasSeparator)\r\n}\r\n\r\nprivate fun buildSubjectInput(tokens: List<String>, query: String, forceSeparator: Boolean = false): String {\r\n    val base = tokens.filter { it.isNotBlank() }.joinToString(separator = \", \")\r\n    val normalizedQuery = query.trim()\r\n    return when {\r\n        normalizedQuery.isNotEmpty() -> if (base.isEmpty()) normalizedQuery else \"$base, $normalizedQuery\"\r\n        forceSeparator -> if (base.isEmpty()) \"\" else \"$base, \"\r\n        else -> base\r\n    }\r\n}\r\n\r\nprivate fun mergeSubjectToken(tokens: List<String>, token: String, locale: Locale): List<String> {\r\n    val normalized = enforceCapitalized(token, locale)\r\n    if (normalized.isBlank()) return tokens\r\n    return if (tokens.any { it.equals(normalized, ignoreCase = true) }) {\r\n        tokens\r\n    } else {\r\n        tokens + normalized\r\n    }\r\n}\r\n\r\nprivate fun enforceCapitalized(value: String, locale: Locale): String {\r\n    val trimmed = value.trimStart()\r\n    if (trimmed.isEmpty()) return \"\"\r\n    val first = trimmed.first().uppercase(locale)\r\n    return first + trimmed.drop(1)\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileSection(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    nameFocusRequester: FocusRequester,\r\n    gradeFocusRequester: FocusRequester,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val locale = remember { Locale.getDefault() }\r\n    val textFieldColors = editorFieldColors()\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        OutlinedTextField(\r\n            value = state.name,\r\n            onValueChange = onNameChange,\r\n            label = { Text(text = stringResource(id = R.string.student_editor_name)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(nameFocusRequester),\r\n            singleLine = true,\r\n            enabled = enabled,\r\n            isError = state.nameError,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Person,\r\n                    contentDescription = null,\r\n                    tint = iconTint\r\n                )\r\n            },\r\n            keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Next),\r\n            colors = textFieldColors\r\n        )\r\n        if (state.nameError) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_editor_name_required),\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.error\r\n            )\r\n        }\r\n\r\n        SubjectInputField(\r\n            value = state.subject,\r\n            onValueChange = onSubjectChange,\r\n            enabled = enabled,\r\n            label = { Text(text = stringResource(id = R.string.student_editor_subject)) },\r\n            placeholder = { Text(text = stringResource(id = R.string.student_editor_subject_placeholder)) },\r\n            supportingText = { Text(text = stringResource(id = R.string.student_editor_subject_support)) },\r\n            leadingIcon = {\r\n                Icon(imageVector = Icons.Filled.Book, contentDescription = null, tint = iconTint)\r\n            },\r\n            onSubmit = { gradeFocusRequester.tryRequestFocus() },\r\n            locale = locale,\r\n            modifier = Modifier.fillMaxWidth()\r\n        )\r\n\r\n        OutlinedTextField(\r\n            value = state.grade,\r\n            onValueChange = onGradeChange,\r\n            label = { Text(text = stringResource(id = R.string.student_editor_grade)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(gradeFocusRequester),\r\n            singleLine = true,\r\n            enabled = enabled,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = Icons.Filled.School,\r\n                    contentDescription = null,\r\n                    tint = iconTint\r\n                )\r\n            },\r\n            keyboardOptions = KeyboardOptions.Default.copy(\r\n                imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n            ),\r\n            keyboardActions = if (isStandalone) {\r\n                KeyboardActions(onDone = { onSubmit?.invoke() })\r\n            } else {\r\n                KeyboardActions.Default\r\n            },\r\n            colors = textFieldColors\r\n        )\r\n    }\r\n}\r\n \r\n@Composable\r\nprivate fun RateSection(\r\n    rate: String,\r\n    onRateChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        OutlinedTextField(\r\n            value = rate,\r\n            onValueChange = onRateChange,\r\n            label = { Text(text = stringResource(id = R.string.student_editor_rate)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(focusRequester),\r\n            singleLine = true,\r\n            enabled = enabled,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = Icons.Outlined.CurrencyRuble,\r\n                    contentDescription = null,\r\n                    tint = iconTint\r\n                )\r\n            },\r\n            supportingText = {\r\n                Text(text = stringResource(id = R.string.student_editor_rate_support))\r\n            },\r\n            keyboardOptions = KeyboardOptions.Default.copy(\r\n                keyboardType = KeyboardType.Decimal,\r\n                imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n            ),\r\n            keyboardActions = if (isStandalone) {\r\n                KeyboardActions(onDone = { onSubmit?.invoke() })\r\n            } else {\r\n                KeyboardActions.Default\r\n            },\r\n            colors = textFieldColors\r\n        )\r\n\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun AdditionalDataToggle(\r\n    expanded: Boolean,\r\n    onToggle: () -> Unit,\r\n    enabled: Boolean,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val title = stringResource(id = R.string.student_editor_additional_data_title)\r\n    val description = stringResource(\r\n        id = if (expanded) {\r\n            R.string.student_editor_additional_data_hide\r\n        } else {\r\n            R.string.student_editor_additional_data_show\r\n        }\r\n    )\r\n    TextButton(\r\n        onClick = onToggle,\r\n        modifier = modifier,\r\n        enabled = enabled\r\n    ) {\r\n        Text(text = title)\r\n        Spacer(modifier = Modifier.width(8.dp))\r\n        Icon(\r\n            imageVector = if (expanded) Icons.Filled.ArrowDropUp else Icons.Filled.ArrowDropDown,\r\n            contentDescription = description\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PhoneSection(\r\n    phone: String,\r\n    onPhoneChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n    OutlinedTextField(\r\n        value = phone,\r\n        onValueChange = onPhoneChange,\r\n        label = { Text(text = stringResource(id = R.string.student_editor_phone)) },\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .focusRequester(focusRequester),\r\n        singleLine = true,\r\n        enabled = enabled,\r\n        leadingIcon = {\r\n            Icon(\r\n                imageVector = Icons.Filled.Phone,\r\n                contentDescription = null,\r\n                tint = iconTint\r\n            )\r\n        },\r\n        keyboardOptions = KeyboardOptions.Default.copy(\r\n            imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n        ),\r\n        keyboardActions = if (isStandalone) {\r\n            KeyboardActions(onDone = { onSubmit?.invoke() })\r\n        } else {\r\n            KeyboardActions.Default\r\n        },\r\n        colors = textFieldColors\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun MessengerSection(\r\n    messenger: String,\r\n    onMessengerChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    isStandalone: Boolean,\r\n    onSubmit: (() -> Unit)?,\r\n) {\r\n    val messengerOptions = remember { StudentMessengerType.values().toList() }\r\n    var selectedType by remember { mutableStateOf(StudentMessengerType.TELEGRAM) }\r\n    var customLabel by remember { mutableStateOf(\"\") }\r\n    var identifier by remember { mutableStateOf(\"\") }\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n\r\n    LaunchedEffect(messenger) {\r\n        val parsed = messenger.parseMessengerValue()\r\n        selectedType = parsed.type\r\n        customLabel = parsed.customLabel\r\n        identifier = parsed.identifier\r\n    }\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        var isDropdownExpanded by remember { mutableStateOf(false) }\r\n        Box {\r\n            OutlinedTextField(\r\n                value = if (selectedType == StudentMessengerType.OTHER) customLabel else stringResource(id = selectedType.labelRes),\r\n                onValueChange = {\r\n                    if (selectedType == StudentMessengerType.OTHER) {\r\n                        customLabel = it\r\n                        onMessengerChange(buildMessengerValue(selectedType, customLabel, identifier))\r\n                    }\r\n                },\r\n                label = { Text(text = stringResource(id = R.string.student_editor_messenger_type)) },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .onFocusChanged { focusState ->\r\n                        if (enabled && focusState.isFocused) {\r\n                            isDropdownExpanded = true\r\n                        }\r\n                    },\r\n                enabled = enabled,\r\n                readOnly = selectedType != StudentMessengerType.OTHER,\r\n                leadingIcon = {\r\n                    Icon(\r\n                        imageVector = Icons.Filled.Message,\r\n                        contentDescription = null,\r\n                        tint = iconTint\r\n                    )\r\n                },\r\n                trailingIcon = {\r\n                    IconButton(onClick = { isDropdownExpanded = !isDropdownExpanded }, enabled = enabled) {\r\n                        Icon(\r\n                            imageVector = if (isDropdownExpanded) Icons.Filled.ArrowDropUp else Icons.Filled.ArrowDropDown,\r\n                            contentDescription = null,\r\n                            tint = iconTint\r\n                        )\r\n                    }\r\n                },\r\n                colors = textFieldColors\r\n            )\r\n\r\n            DropdownMenu(\r\n                expanded = isDropdownExpanded,\r\n                onDismissRequest = { isDropdownExpanded = false },\r\n                containerColor = MaterialTheme.colorScheme.surface\r\n            ) {\r\n                messengerOptions.forEach { option ->\r\n                    DropdownMenuItem(\r\n                        text = { Text(text = stringResource(id = option.labelRes)) },\r\n                        onClick = {\r\n                            isDropdownExpanded = false\r\n                            selectedType = option\r\n                            if (option != StudentMessengerType.OTHER) {\r\n                                customLabel = \"\"\r\n                            }\r\n                            onMessengerChange(buildMessengerValue(selectedType, customLabel, identifier))\r\n                        },\r\n                        enabled = enabled\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        OutlinedTextField(\r\n            value = identifier,\r\n            onValueChange = {\r\n                identifier = it\r\n                onMessengerChange(buildMessengerValue(selectedType, customLabel, identifier))\r\n            },\r\n            label = { Text(text = stringResource(id = R.string.student_editor_messenger_id)) },\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .focusRequester(focusRequester),\r\n            singleLine = true,\r\n            enabled = enabled,\r\n            leadingIcon = {\r\n                Icon(\r\n                    imageVector = Icons.Filled.AlternateEmail,\r\n                    contentDescription = null,\r\n                    tint = iconTint\r\n                )\r\n            },\r\n            keyboardOptions = KeyboardOptions.Default.copy(\r\n                imeAction = if (isStandalone) ImeAction.Done else ImeAction.Next\r\n            ),\r\n            keyboardActions = if (isStandalone) {\r\n                KeyboardActions(onDone = { onSubmit?.invoke() })\r\n            } else {\r\n                KeyboardActions.Default\r\n            },\r\n            colors = textFieldColors\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun NotesSection(\r\n    note: String,\r\n    onNoteChange: (String) -> Unit,\r\n    enabled: Boolean,\r\n    focusRequester: FocusRequester,\r\n    onSubmit: (() -> Unit)?\r\n) {\r\n    val iconTint = MaterialTheme.colorScheme.onSurfaceVariant\r\n    val textFieldColors = editorFieldColors()\r\n    OutlinedTextField(\r\n        value = note,\r\n        onValueChange = onNoteChange,\r\n        label = { Text(text = stringResource(id = R.string.student_editor_notes)) },\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .focusRequester(focusRequester),\r\n        minLines = 3,\r\n        enabled = enabled,\r\n        leadingIcon = {\r\n            Icon(\r\n                imageVector = Icons.Filled.Description,\r\n                contentDescription = null,\r\n                tint = iconTint\r\n            )\r\n        },\r\n        keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),\r\n        keyboardActions = KeyboardActions(onDone = {\r\n            onSubmit?.invoke()\r\n        }),\r\n        colors = textFieldColors\r\n    )\r\n}\r\n\r\nprivate suspend fun FocusRequester.safeRequestFocus() {\r\n    repeat(5) {\r\n        if (tryRequestFocus()) {\r\n            return\r\n        }\r\n        // When the dialog is first shown the focus target might not yet be attached.\r\n        // Wait for the next frame so Compose has a chance to attach the node before retrying.\r\n        withFrameNanos { }\r\n    }\r\n    tryRequestFocus()\r\n}\r\n\r\nprivate fun FocusRequester.tryRequestFocus(): Boolean =\r\n    runCatching { requestFocus() }.isSuccess\r\n\r\nprivate data class MessengerValue(\r\n    val type: StudentMessengerType,\r\n    val customLabel: String,\r\n    val identifier: String\r\n)\r\n\r\nprivate fun String.parseMessengerValue(): MessengerValue {\r\n    val raw = trim()\r\n    if (raw.isEmpty()) {\r\n        return MessengerValue(StudentMessengerType.TELEGRAM, \"\", \"\")\r\n    }\r\n\r\n    val delimiterIndex = raw.indexOf(':')\r\n    if (delimiterIndex == -1) {\r\n        return MessengerValue(StudentMessengerType.OTHER, \"\", raw)\r\n    }\r\n\r\n    val label = raw.substring(0, delimiterIndex).trim()\r\n    val value = raw.substring(delimiterIndex + 1).trim()\r\n    val type = StudentMessengerType.fromLabel(label)\r\n    return if (type == StudentMessengerType.OTHER) {\r\n        MessengerValue(type, label, value)\r\n    } else {\r\n        MessengerValue(type, \"\", value)\r\n    }\r\n}\r\n\r\nprivate fun buildMessengerValue(\r\n    type: StudentMessengerType,\r\n    customLabel: String,\r\n    identifier: String\r\n): String {\r\n    val trimmedIdentifier = identifier.trim()\r\n    if (trimmedIdentifier.isEmpty()) {\r\n        return \"\"\r\n    }\r\n\r\n    val label = when (type) {\r\n        StudentMessengerType.OTHER -> customLabel.trim()\r\n        else -> type.label\r\n    }\r\n\r\n    return if (label.isNotEmpty()) {\r\n        \"$label: $trimmedIdentifier\"\r\n    } else {\r\n        trimmedIdentifier\r\n    }\r\n}\r\n\r\nprivate enum class StudentMessengerType(\r\n    val label: String,\r\n    val labelRes: Int,\r\n) {\r\n    TELEGRAM(label = \"Telegram\", labelRes = R.string.student_editor_messenger_type_telegram),\r\n    WHATSAPP(label = \"WhatsApp\", labelRes = R.string.student_editor_messenger_type_whatsapp),\r\n    VIBER(label = \"Viber\", labelRes = R.string.student_editor_messenger_type_viber),\r\n    VK(label = \"VK\", labelRes = R.string.student_editor_messenger_type_vk),\r\n    OTHER(label = \"\", labelRes = R.string.student_editor_messenger_type_other);\r\n\r\n    companion object {\r\n        fun fromLabel(label: String): StudentMessengerType {\r\n            val normalized = label.lowercase(Locale.getDefault())\r\n            return values().firstOrNull { option ->\r\n                option.label.lowercase(Locale.getDefault()) == normalized && option != OTHER\r\n            } ?: OTHER\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt b/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt	(revision b7ef461e8f209f8d9c53b998d94435f8d9677b5f)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentEditorForm.kt	(date 1760882917567)
@@ -42,6 +42,7 @@
 import androidx.compose.runtime.remember
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.runtime.setValue
+import androidx.compose.runtime.withFrameNanos
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.focus.FocusRequester
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2025-10-09T16:57:23.367251200Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"PhysicalDevice\" identifier=\"serial=918616c6\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision b7ef461e8f209f8d9c53b998d94435f8d9677b5f)
+++ b/.idea/deploymentTargetSelector.xml	(date 1760882904427)
@@ -4,7 +4,7 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
-        <DropdownSelection timestamp="2025-10-09T16:57:23.367251200Z">
+        <DropdownSelection timestamp="2025-10-19T13:27:32.690290400Z">
           <Target type="DEFAULT_BOOT">
             <handle>
               <DeviceId pluginId="PhysicalDevice" identifier="serial=918616c6" />
