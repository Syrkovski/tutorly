Index: app/src/main/java/com/tutorly/navigation/AppNav.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.navigation\r\n\r\nimport androidx.compose.animation.ExperimentalAnimationApi\r\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\r\nimport androidx.compose.animation.SharedTransitionLayout\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.RowScope\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.systemBars\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.outlined.Archive\r\nimport androidx.compose.material.icons.outlined.Unarchive\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.IconButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.window.DialogProperties\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.navArgument\r\nimport com.google.accompanist.navigation.animation.AnimatedNavHost\r\nimport com.google.accompanist.navigation.animation.composable\r\nimport androidx.navigation.compose.dialog\r\nimport com.google.accompanist.navigation.animation.rememberAnimatedNavController\r\nimport com.tutorly.ui.CalendarMode\r\nimport com.tutorly.ui.CalendarScreen\r\nimport com.tutorly.ui.CalendarViewModel\r\nimport com.tutorly.ui.lessoncreation.LessonCreationConfig\r\nimport com.tutorly.ui.lessoncreation.LessonCreationOrigin\r\nimport com.tutorly.ui.lessoncreation.LessonCreationViewModel\r\nimport com.tutorly.ui.components.AppBottomBar\r\nimport com.tutorly.ui.components.AppTopBar\r\nimport com.tutorly.ui.screens.*\r\nimport java.time.LocalDate\r\nimport java.time.ZonedDateTime\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport com.tutorly.R\r\n\r\nconst val ROUTE_CALENDAR = \"calendar\"\r\nprivate const val ROUTE_CALENDAR_PATTERN = \"${ROUTE_CALENDAR}?${CalendarViewModel.ARG_ANCHOR_DATE}={${CalendarViewModel.ARG_ANCHOR_DATE}}&${CalendarViewModel.ARG_CALENDAR_MODE}={${CalendarViewModel.ARG_CALENDAR_MODE}}\"\r\nconst val ROUTE_TODAY = \"today\"\r\nconst val ROUTE_STUDENTS = \"students\"\r\nconst val ROUTE_SETTINGS = \"settings\"\r\nprivate const val ARG_STUDENT_EDITOR_ORIGIN = \"studentEditorOrigin\"\r\nprivate const val ROUTE_STUDENTS_PATTERN = \"$ROUTE_STUDENTS?$ARG_STUDENT_EDITOR_ORIGIN={$ARG_STUDENT_EDITOR_ORIGIN}\"\r\nconst val ROUTE_FINANCE = \"finance\"\r\nconst val ROUTE_STUDENT_DETAILS = \"student/{studentId}\"\r\nprivate const val ROUTE_STUDENT_EDIT_BASE = \"student/{studentId}/edit\"\r\nprivate const val ARG_STUDENT_EDIT_TARGET = \"editTarget\"\r\nconst val ROUTE_STUDENT_EDIT = \"$ROUTE_STUDENT_EDIT_BASE?$ARG_STUDENT_EDIT_TARGET={$ARG_STUDENT_EDIT_TARGET}\"\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentsRoute(origin: StudentEditorOrigin = StudentEditorOrigin.NONE) =\r\n    \"$ROUTE_STUDENTS?$ARG_STUDENT_EDITOR_ORIGIN=${origin.name}\"\r\nprivate fun studentEditRoute(studentId: Long, target: StudentEditTarget? = null): String {\r\n    val base = ROUTE_STUDENT_EDIT_BASE.replace(\"{studentId}\", studentId.toString())\r\n    return if (target != null) {\r\n        \"$base?$ARG_STUDENT_EDIT_TARGET=${target.name}\"\r\n    } else {\r\n        base\r\n    }\r\n}\r\n\r\n@OptIn(\r\n    ExperimentalSharedTransitionApi::class,\r\n    ExperimentalAnimationApi::class\r\n)\r\n@Composable\r\nfun AppNavRoot() {\r\n    val nav = rememberAnimatedNavController()\r\n    val backStack by nav.currentBackStackEntryAsState()\r\n    val destinationRoute = backStack?.destination?.route ?: ROUTE_CALENDAR\r\n    val route = destinationRoute.substringBefore(\"?\")\r\n\r\n    val extendedColors = MaterialTheme.extendedColors\r\n\r\n    var financePeriod by rememberSaveable { mutableStateOf(FinancePeriod.WEEK) }\r\n    var financePeriodOffset by rememberSaveable { mutableIntStateOf(0) }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(\r\n                Brush.verticalGradient(\r\n                    colors = listOf(extendedColors.backgroundTop, extendedColors.backgroundBottom)\r\n                )\r\n            )\r\n    ) {\r\n        Scaffold(\r\n            topBar = {\r\n                when (route) {\r\n                    ROUTE_STUDENTS -> StudentsTopBar(nav)\r\n                    ROUTE_FINANCE -> FinanceTopBar(\r\n                        selectedPeriod = financePeriod,\r\n                        onSelectPeriod = {\r\n                            financePeriod = it\r\n                            financePeriodOffset = 0\r\n                        }\r\n                    )\r\n                }\r\n            },\r\n            bottomBar = {\r\n                AppBottomBar(\r\n                    currentRoute = route,\r\n                    onSelect = { dest ->\r\n                        if (dest == ROUTE_STUDENTS) {\r\n                            val returnedToList = nav.popBackStack(ROUTE_STUDENTS_PATTERN, inclusive = false)\r\n                            if (returnedToList) {\r\n                                return@AppBottomBar\r\n                            }\r\n                        }\r\n\r\n                        val target = when (dest) {\r\n                            ROUTE_CALENDAR -> calendarRoute(nav)\r\n                            ROUTE_STUDENTS -> studentsRoute()\r\n                            else -> dest\r\n                        }\r\n                        nav.navigate(target) {\r\n                            launchSingleTop = true\r\n                            restoreState = true\r\n                            popUpTo(nav.graph.startDestinationId) { saveState = true }\r\n                        }\r\n                    }\r\n                )\r\n            },\r\n            containerColor = Color.Transparent,\r\n            // чтобы контент корректно учитывал статус/навигационные панели\r\n            contentWindowInsets = WindowInsets.systemBars\r\n        ) { innerPadding ->\r\n            SharedTransitionLayout {\r\n                val sharedScope = this\r\n                AnimatedNavHost(\r\n                    navController = nav,\r\n                    startDestination = ROUTE_CALENDAR_PATTERN,\r\n                    modifier = Modifier.padding(innerPadding)\r\n                ) {\r\n                composable(\r\n                    route = ROUTE_CALENDAR_PATTERN,\r\n                    arguments = listOf(\r\n                        navArgument(CalendarViewModel.ARG_ANCHOR_DATE) {\r\n                            type = NavType.StringType\r\n                            defaultValue = \"\"\r\n                        },\r\n                        navArgument(CalendarViewModel.ARG_CALENDAR_MODE) {\r\n                            type = NavType.StringType\r\n                            defaultValue = CalendarMode.DAY.name\r\n                        }\r\n                    )\r\n                ) { entry ->\r\n                    val creationViewModel: LessonCreationViewModel = hiltViewModel(entry)\r\n                    CalendarScreen(\r\n                        onAddStudent = {\r\n                            nav.navigate(studentsRoute(StudentEditorOrigin.LESSON_CREATION)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onOpenSettings = {\r\n                            nav.navigate(ROUTE_SETTINGS) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        creationViewModel = creationViewModel\r\n                    )\r\n                }\r\n                composable(ROUTE_TODAY) {\r\n                    TodayScreen(\r\n                        onAddStudent = {\r\n                            nav.navigate(studentsRoute(StudentEditorOrigin.LESSON_CREATION)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onOpenStudentProfile = { studentId ->\r\n                            nav.navigate(studentDetailsRoute(studentId)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onOpenDebtors = {\r\n                            nav.navigate(ROUTE_FINANCE) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        }\r\n                    )\r\n                }      // сам рисует свой верх (заголовок + счетчики)\r\n                composable(\r\n                    route = ROUTE_STUDENTS_PATTERN,\r\n                    arguments = listOf(\r\n                        navArgument(ARG_STUDENT_EDITOR_ORIGIN) {\r\n                            type = NavType.StringType\r\n                            defaultValue = StudentEditorOrigin.NONE.name\r\n                        }\r\n                    )\r\n                ) { entry ->\r\n                    val calendarEntry =\r\n                        remember(nav) { nav.getBackStackEntry(ROUTE_CALENDAR_PATTERN) }\r\n                    val creationViewModel: LessonCreationViewModel = hiltViewModel(calendarEntry)\r\n                    val originName = entry.arguments?.getString(ARG_STUDENT_EDITOR_ORIGIN).orEmpty()\r\n                    val origin =\r\n                        runCatching { StudentEditorOrigin.valueOf(originName) }.getOrDefault(\r\n                            StudentEditorOrigin.NONE\r\n                        )\r\n                    StudentsScreen(\r\n                        onStudentEdit = { id ->\r\n                            nav.navigate(studentEditRoute(id)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onAddLesson = { studentId ->\r\n                            creationViewModel.start(\r\n                                LessonCreationConfig(\r\n                                    studentId = studentId,\r\n                                    zoneId = ZonedDateTime.now().zone,\r\n                                    origin = LessonCreationOrigin.STUDENT\r\n                                )\r\n                            )\r\n                            nav.navigate(calendarRoute(nav)) {\r\n                                launchSingleTop = true\r\n                                restoreState = true\r\n                            }\r\n                        },\r\n                        onStudentOpen = { id ->\r\n                            nav.navigate(studentDetailsRoute(id)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onStudentCreatedFromLesson = { newId ->\r\n                            val reopened = creationViewModel.onStudentCreated(newId)\r\n                            nav.popBackStack()\r\n                            nav.navigate(calendarRoute(nav)) {\r\n                                launchSingleTop = true\r\n                                restoreState = true\r\n                            }\r\n                            if (!reopened) {\r\n                                creationViewModel.dismiss()\r\n                            }\r\n                        },\r\n                        initialEditorOrigin = origin,\r\n                        sharedTransitionScope = sharedScope,\r\n                        animatedVisibilityScope = this\r\n                    )\r\n                }\r\n                composable(\r\n                    route = ROUTE_STUDENT_DETAILS,\r\n                    arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n                ) { entry ->\r\n                    val studentId = entry.arguments?.getLong(\"studentId\") ?: return@composable\r\n                    val calendarEntry =\r\n                        remember(nav) { nav.getBackStackEntry(ROUTE_CALENDAR_PATTERN) }\r\n                    val creationViewModel: LessonCreationViewModel = hiltViewModel(calendarEntry)\r\n                    StudentDetailsScreen(\r\n                        onBack = { nav.popBackStack() },\r\n                        onAddStudentFromCreation = {\r\n                            nav.navigate(studentsRoute(StudentEditorOrigin.LESSON_CREATION)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        creationViewModel = creationViewModel\r\n                    )\r\n                }\r\n                dialog(\r\n                    route = ROUTE_STUDENT_EDIT,\r\n                    arguments = listOf(\r\n                        navArgument(\"studentId\") { type = NavType.LongType },\r\n                        navArgument(ARG_STUDENT_EDIT_TARGET) {\r\n                            type = NavType.StringType\r\n                            defaultValue = StudentEditTarget.PROFILE.name\r\n                        }\r\n                    ),\r\n                    dialogProperties = DialogProperties(usePlatformDefaultWidth = false)\r\n                ) {\r\n                    StudentEditorDialog(\r\n                        onDismiss = { nav.popBackStack() },\r\n                        onSaved = {\r\n                            nav.popBackStack()\r\n                        }\r\n                    )\r\n                }\r\n                composable(ROUTE_FINANCE) {\r\n                    FinanceScreen(\r\n                        selectedPeriod = financePeriod,\r\n                        periodOffset = financePeriodOffset,\r\n                        onPeriodOffsetChange = { financePeriodOffset = it },\r\n                        onOpenStudent = { studentId ->\r\n                            nav.navigate(studentDetailsRoute(studentId)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n                composable(ROUTE_SETTINGS) {\r\n                    SettingsScreen(\r\n                        onBack = { nav.popBackStack() }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}}\r\n\r\nfun calendarRoute(nav: NavHostController): String {\r\n    val entry = runCatching { nav.getBackStackEntry(ROUTE_CALENDAR_PATTERN) }.getOrNull()\r\n    val savedDate = entry?.savedStateHandle?.get<String>(CalendarViewModel.ARG_ANCHOR_DATE)\r\n    val savedMode = entry?.savedStateHandle?.get<String>(CalendarViewModel.ARG_CALENDAR_MODE)\r\n    return buildCalendarRoute(savedDate, savedMode)\r\n}\r\n\r\n@Composable\r\nprivate fun StudentsTopBar(navController: NavHostController) {\r\n    val backStackEntry = remember(navController) { navController.getBackStackEntry(ROUTE_STUDENTS_PATTERN) }\r\n    val viewModel: StudentsViewModel = hiltViewModel(backStackEntry)\r\n    val isArchiveMode by viewModel.isArchiveMode.collectAsState()\r\n\r\n    val titleRes = if (isArchiveMode) {\r\n        R.string.students_archive_title\r\n    } else {\r\n        R.string.students_title\r\n    }\r\n\r\n    AppTopBar(\r\n        title = stringResource(id = titleRes),\r\n        actions = {\r\n            StudentsArchiveAction(\r\n                isArchiveMode = isArchiveMode,\r\n                onToggle = viewModel::toggleArchiveMode\r\n            )\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun RowScope.StudentsArchiveAction(\r\n    isArchiveMode: Boolean,\r\n    onToggle: () -> Unit\r\n) {\r\n    val icon = if (isArchiveMode) {\r\n        Icons.Outlined.Unarchive\r\n    } else {\r\n        Icons.Outlined.Archive\r\n    }\r\n    val contentDescription = stringResource(\r\n        id = if (isArchiveMode) {\r\n            R.string.students_archive_show_active\r\n        } else {\r\n            R.string.students_archive_show\r\n        }\r\n    )\r\n    val buttonColors = IconButtonDefaults.iconButtonColors(\r\n        contentColor = Color.White,\r\n        disabledContentColor = Color.White.copy(alpha = 0.4f)\r\n    )\r\n\r\n    IconButton(\r\n        onClick = onToggle,\r\n        colors = buttonColors\r\n    ) {\r\n        Icon(imageVector = icon, contentDescription = contentDescription)\r\n    }\r\n}\r\n\r\nfun buildCalendarRoute(date: String?, mode: String?): String {\r\n    val anchor = date?.takeIf { it.isNotBlank() } ?: LocalDate.now().toString()\r\n    val tab = mode?.takeIf { it.isNotBlank() } ?: CalendarMode.DAY.name\r\n    return \"${ROUTE_CALENDAR}?${CalendarViewModel.ARG_ANCHOR_DATE}=$anchor&${CalendarViewModel.ARG_CALENDAR_MODE}=$tab\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/navigation/AppNav.kt b/app/src/main/java/com/tutorly/navigation/AppNav.kt
--- a/app/src/main/java/com/tutorly/navigation/AppNav.kt	(revision b29c52fcb86971bdac50f640ee91503c203ba3ec)
+++ b/app/src/main/java/com/tutorly/navigation/AppNav.kt	(date 1760959940968)
@@ -25,6 +25,7 @@
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
Index: app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.lessoncreation\r\n\r\nimport android.app.DatePickerDialog\r\nimport android.app.TimePickerDialog\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\r\nimport androidx.compose.foundation.layout.FlowRow\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.heightIn\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowDropDown\r\nimport androidx.compose.material.icons.filled.ArrowDropUp\r\nimport androidx.compose.material.icons.filled.Book\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Description\r\nimport androidx.compose.material.icons.filled.Person\r\nimport androidx.compose.material.icons.filled.Schedule\r\nimport androidx.compose.material.icons.outlined.CalendarMonth\r\nimport androidx.compose.material.icons.outlined.CurrencyRuble\r\nimport androidx.compose.material.icons.outlined.Schedule\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.DropdownMenu\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FilterChip\r\nimport androidx.compose.material3.FilterChipDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.LocalTextStyle\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.OutlinedTextFieldDefaults\r\nimport androidx.compose.material3.SheetState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.focus.onFocusChanged\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.onGloballyPositioned\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.IntSize\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.window.PopupProperties\r\nimport com.tutorly.R\r\nimport com.tutorly.ui.components.TutorlyBottomSheetContainer\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport java.text.NumberFormat\r\nimport java.time.LocalDate\r\nimport java.time.LocalTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Locale\r\n\r\nprivate val SectionSpacing = 12.dp\r\n\r\nprivate val SubjectSuggestionDefaults = listOf(\r\n    \"Математика\",\r\n    \"Русский язык\",\r\n    \"Английский язык\",\r\n    \"Физика\",\r\n    \"Химия\",\r\n    \"Биология\",\r\n    \"История\",\r\n    \"Обществознание\",\r\n    \"Литература\",\r\n    \"География\",\r\n    \"Информатика\",\r\n    \"Алгебра\",\r\n    \"Геометрия\",\r\n    \"Экономика\",\r\n    \"Право\",\r\n    \"Немецкий язык\",\r\n    \"Французский язык\",\r\n    \"Испанский язык\",\r\n    \"Китайский язык\",\r\n    \"Итальянский язык\",\r\n    \"Турецкий язык\",\r\n    \"Программирование\",\r\n    \"Шахматы\",\r\n    \"Музыка\",\r\n    \"Вокал\",\r\n    \"Фортепиано\",\r\n    \"Гитара\",\r\n    \"Логопед\",\r\n    \"Подготовка к школе\",\r\n    \"Начальная школа\",\r\n    \"ЕГЭ\",\r\n    \"ОГЭ\",\r\n    \"Олимпиады\"\r\n)\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun LessonCreationSheet(\r\n    state: LessonCreationUiState,\r\n    onDismiss: () -> Unit,\r\n    onStudentQueryChange: (String) -> Unit,\r\n    onStudentSelect: (Long) -> Unit,\r\n    onAddStudent: () -> Unit,\r\n    onSubjectInputChange: (String) -> Unit,\r\n    onSubjectSelect: (Long?) -> Unit,\r\n    onDateSelect: (LocalDate) -> Unit,\r\n    onTimeSelect: (LocalTime) -> Unit,\r\n    onDurationChange: (Int) -> Unit,\r\n    onPriceChange: (Int) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSubmit: () -> Unit,\r\n    onConfirmConflict: () -> Unit,\r\n    onDismissConflict: () -> Unit\r\n) {\r\n    if (!state.isVisible) return\r\n\r\n    val sheetState: SheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val configuration = LocalConfiguration.current\r\n    val minHeight = remember(configuration) { configuration.screenHeightDp.dp * 0.6f }\r\n\r\n    ModalBottomSheet(\r\n        onDismissRequest = onDismiss,\r\n        sheetState = sheetState,\r\n        containerColor = Color.Transparent,\r\n        contentColor = Color.Unspecified,\r\n        scrimColor = Color.Black.copy(alpha = 0.32f)\r\n    ) {\r\n        TutorlyBottomSheetContainer(dragHandle = null) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .heightIn(min = minHeight)\r\n                    .verticalScroll(rememberScrollState())\r\n                    .padding(horizontal = 20.dp, vertical = 16.dp),\r\n                verticalArrangement = Arrangement.spacedBy(SectionSpacing)\r\n            ) {\r\n                SheetHeader(onDismiss)\r\n                StudentSection(\r\n                    state = state,\r\n                    onQueryChange = onStudentQueryChange,\r\n                    onStudentSelect = onStudentSelect,\r\n                    onAddStudent = onAddStudent\r\n                )\r\n                TimeSection(state = state, onDateSelect = onDateSelect, onTimeSelect = onTimeSelect)\r\n                DurationSection(state = state, onDurationChange = onDurationChange)\r\n                SubjectSection(\r\n                    state = state,\r\n                    onSubjectInputChange = onSubjectInputChange,\r\n                    onSubjectSelect = onSubjectSelect\r\n                )\r\n                PriceSection(state = state, onPriceChange = onPriceChange)\r\n                NoteSection(state = state, onNoteChange = onNoteChange)\r\n                ActionButtons(state = state, onSubmit = onSubmit)\r\n            }\r\n        }\r\n    }\r\n\r\n    val conflict = state.showConflictDialog\r\n    if (conflict != null) {\r\n        ConflictDialog(conflict, onConfirm = onConfirmConflict, onDismiss = onDismissConflict)\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SheetHeader(onDismiss: () -> Unit) {\r\n    Row(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.lesson_create_title),\r\n            style = MaterialTheme.typography.titleLarge,\r\n            modifier = Modifier.weight(1f)\r\n        )\r\n        IconButton(onClick = onDismiss) {\r\n            Icon(imageVector = Icons.Filled.Close, contentDescription = null)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentSection(\r\n    state: LessonCreationUiState,\r\n    onQueryChange: (String) -> Unit,\r\n    onStudentSelect: (Long) -> Unit,\r\n    onAddStudent: () -> Unit\r\n) {\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        val selectedName = state.selectedStudent?.name ?: state.studentQuery\r\n        var query by remember(selectedName) { mutableStateOf(selectedName) }\r\n        var expanded by remember { mutableStateOf(false) }\r\n        var textFieldSize by remember { mutableStateOf(IntSize.Zero) }\r\n        val dropdownWidth = with(LocalDensity.current) { textFieldSize.width.toDp() }\r\n        val dropdownModifier = if (dropdownWidth > 0.dp) Modifier.width(dropdownWidth) else Modifier\r\n        Box {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = {\r\n                    query = it\r\n                    expanded = true\r\n                    onQueryChange(it)\r\n                },\r\n                label = { Text(text = stringResource(id = R.string.lesson_create_student_label)) },\r\n                placeholder = { Text(text = stringResource(id = R.string.lesson_create_student_placeholder)) },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .onGloballyPositioned { textFieldSize = it.size }\r\n                    .onFocusChanged { focusState -> expanded = focusState.isFocused },\r\n                singleLine = true,\r\n                leadingIcon = {\r\n                    Icon(imageVector = Icons.Filled.Person, contentDescription = null)\r\n                },\r\n                trailingIcon = {\r\n                    IconButton(onClick = { expanded = !expanded }) {\r\n                        Icon(\r\n                            imageVector = if (expanded) Icons.Filled.ArrowDropUp else Icons.Filled.ArrowDropDown,\r\n                            contentDescription = null\r\n                        )\r\n                    }\r\n                },\r\n                isError = state.errors.containsKey(LessonCreationField.STUDENT),\r\n                colors = OutlinedTextFieldDefaults.colors(\r\n                    focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                    unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                    disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                    errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                    focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                    unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                    disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                    errorBorderColor = MaterialTheme.colorScheme.error\r\n                )\r\n            )\r\n            DropdownMenu(\r\n                expanded = expanded,\r\n                onDismissRequest = { expanded = false },\r\n                modifier = dropdownModifier,\r\n                containerColor = MaterialTheme.colorScheme.surface\r\n            ) {\r\n                DropdownMenuItem(\r\n                    text = { Text(text = stringResource(id = R.string.lesson_create_new_student)) },\r\n                    onClick = {\r\n                        expanded = false\r\n                        onAddStudent()\r\n                    }\r\n                )\r\n                state.students.forEach { option ->\r\n                    DropdownMenuItem(\r\n                        text = {\r\n                            Column(verticalArrangement = Arrangement.spacedBy(2.dp)) {\r\n                                Text(\r\n                                    text = option.name,\r\n                                    style = LocalTextStyle.current,\r\n                                    maxLines = 1\r\n                                )\r\n                                if (option.subjects.isNotEmpty()) {\r\n                                    Text(\r\n                                        text = option.subjects.joinToString(separator = \", \"),\r\n                                        style = MaterialTheme.typography.bodySmall,\r\n                                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                        maxLines = 2\r\n                                    )\r\n                                }\r\n                            }\r\n                        },\r\n                        leadingIcon = {\r\n                            StudentAvatar(name = option.name, size = 32.dp)\r\n                        },\r\n                        trailingIcon = {\r\n                            if (state.selectedStudent?.id == option.id) {\r\n                                Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                            }\r\n                        },\r\n                        onClick = {\r\n                            query = option.name\r\n                            expanded = false\r\n                            onStudentSelect(option.id)\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        state.errors[LessonCreationField.STUDENT]?.let { message ->\r\n            ErrorText(message)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 32.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.extendedColors.chipSelected),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleSmall,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalLayoutApi::class)\r\n@Composable\r\nprivate fun SubjectSection(\r\n    state: LessonCreationUiState,\r\n    onSubjectInputChange: (String) -> Unit,\r\n    onSubjectSelect: (Long?) -> Unit\r\n) {\r\n    val availableSubjects = state.availableSubjects\r\n    val studentSubjectNames = state.selectedStudent?.subjects.orEmpty()\r\n        .map { it.trim() }\r\n        .filter { it.isNotEmpty() }\r\n    val additionalNames = studentSubjectNames.filter { name ->\r\n        availableSubjects.none { option -> option.name.equals(name, ignoreCase = true) }\r\n    }\r\n    val locale = state.locale\r\n    val query = state.subjectInput\r\n    val normalizedQuery = query.trim().lowercase(locale)\r\n    val hasQuery = normalizedQuery.isNotEmpty()\r\n    val matchingSubjects = availableSubjects.filter { option ->\r\n        hasQuery && option.name.lowercase(locale).startsWith(normalizedQuery)\r\n    }\r\n    val matchingAdditional = additionalNames.filter { name ->\r\n        hasQuery && name.lowercase(locale).startsWith(normalizedQuery)\r\n    }\r\n    val defaultSuggestions = SubjectSuggestionDefaults.filter { name ->\r\n        hasQuery && name.lowercase(locale).startsWith(normalizedQuery)\r\n    }.filterNot { suggestion ->\r\n        matchingSubjects.any { it.name.equals(suggestion, ignoreCase = true) } ||\r\n            matchingAdditional.any { it.equals(suggestion, ignoreCase = true) }\r\n    }\r\n    val hasSuggestions = matchingSubjects.isNotEmpty() || matchingAdditional.isNotEmpty() || defaultSuggestions.isNotEmpty()\r\n    var expanded by remember(state.selectedStudent, availableSubjects, additionalNames) { mutableStateOf(false) }\r\n    var textFieldSize by remember { mutableStateOf(IntSize.Zero) }\r\n    val dropdownWidth = with(LocalDensity.current) { textFieldSize.width.toDp() }\r\n    val dropdownModifier = if (dropdownWidth > 0.dp) Modifier.width(dropdownWidth) else Modifier\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        Box {\r\n            OutlinedTextField(\r\n                value = if (state.selectedSubjectId != null) \"\" else state.subjectInput,\r\n                onValueChange = {\r\n                    onSubjectInputChange(it)\r\n                    expanded = it.trim().isNotEmpty()\r\n                },\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .onGloballyPositioned { textFieldSize = it.size }\r\n                    .onFocusChanged { focusState ->\r\n                        expanded = focusState.isFocused && hasSuggestions\r\n                    },\r\n                label = { Text(text = stringResource(id = R.string.lesson_create_subject_label)) },\r\n                singleLine = true,\r\n                leadingIcon = {\r\n                    Icon(imageVector = Icons.Filled.Book, contentDescription = null)\r\n                },\r\n                colors = OutlinedTextFieldDefaults.colors(\r\n                    focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                    unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                    disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                    errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                    focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                    unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                    disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                    errorBorderColor = MaterialTheme.colorScheme.error\r\n                )\r\n            )\r\n            DropdownMenu(\r\n                expanded = expanded && hasSuggestions,\r\n                onDismissRequest = { expanded = false },\r\n                modifier = dropdownModifier,\r\n                containerColor = MaterialTheme.colorScheme.surface,\r\n                properties = PopupProperties(focusable = false)\r\n            ) {\r\n                FlowRow(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(all = 8.dp),\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n                    verticalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    matchingSubjects.forEach { subject ->\r\n                        val isSelected = state.selectedSubjectId == subject.id\r\n                        FilterChip(\r\n                            selected = isSelected,\r\n                            onClick = {\r\n                                expanded = false\r\n                                onSubjectSelect(subject.id)\r\n                            },\r\n                            label = { Text(text = subject.name) },\r\n                            leadingIcon = {\r\n                                Box(\r\n                                    modifier = Modifier\r\n                                        .size(12.dp)\r\n                                        .background(Color(subject.colorArgb), CircleShape)\r\n                                )\r\n                            },\r\n                            trailingIcon = {\r\n                                if (isSelected) {\r\n                                    Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                                }\r\n                            },\r\n                            colors = FilterChipDefaults.filterChipColors(\r\n                                selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                                selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                            )\r\n                        )\r\n                    }\r\n                    matchingAdditional.forEach { subjectName ->\r\n                        val isSelected = state.selectedSubjectId == null &&\r\n                            state.subjectInput.equals(subjectName, ignoreCase = true)\r\n                        FilterChip(\r\n                            selected = isSelected,\r\n                            onClick = {\r\n                                expanded = false\r\n                                onSubjectInputChange(subjectName)\r\n                            },\r\n                            label = { Text(text = subjectName) },\r\n                            trailingIcon = {\r\n                                if (isSelected) {\r\n                                    Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                                }\r\n                            },\r\n                            colors = FilterChipDefaults.filterChipColors(\r\n                                selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                                selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                            )\r\n                        )\r\n                    }\r\n                    defaultSuggestions.forEach { suggestion ->\r\n                        val isSelected = state.selectedSubjectId == null &&\r\n                            state.subjectInput.equals(suggestion, ignoreCase = true)\r\n                        FilterChip(\r\n                            selected = isSelected,\r\n                            onClick = {\r\n                                expanded = false\r\n                                onSubjectInputChange(suggestion)\r\n                            },\r\n                            label = { Text(text = suggestion) },\r\n                            trailingIcon = {\r\n                                if (isSelected) {\r\n                                    Icon(imageVector = Icons.Filled.Check, contentDescription = null)\r\n                                }\r\n                            },\r\n                            colors = FilterChipDefaults.filterChipColors(\r\n                                selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                                selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        val selectedSubject = state.subjects.firstOrNull { it.id == state.selectedSubjectId }\r\n        val trimmedInput = state.subjectInput.trim()\r\n        val additionalSelection = if (selectedSubject != null || trimmedInput.isEmpty() || expanded) {\r\n            null\r\n        } else {\r\n            studentSubjectNames.firstOrNull { it.equals(trimmedInput, ignoreCase = true) }\r\n                ?: SubjectSuggestionDefaults.firstOrNull {\r\n                    it.equals(trimmedInput, ignoreCase = true)\r\n                }\r\n        }\r\n        val chipLabel = selectedSubject?.name ?: additionalSelection\r\n\r\n        if (chipLabel != null) {\r\n            FlowRow(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(8.dp),\r\n                verticalArrangement = Arrangement.spacedBy(8.dp)\r\n            ) {\r\n                FilterChip(\r\n                    selected = true,\r\n                    onClick = {\r\n                        expanded = false\r\n                        if (selectedSubject != null) {\r\n                            onSubjectSelect(null)\r\n                        }\r\n                        onSubjectInputChange(\"\")\r\n                    },\r\n                    label = { Text(text = chipLabel) },\r\n                    leadingIcon = {\r\n                        if (selectedSubject != null) {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .size(12.dp)\r\n                                    .background(Color(selectedSubject.colorArgb), CircleShape)\r\n                            )\r\n                        }\r\n                    },\r\n                    trailingIcon = {\r\n                        Icon(imageVector = Icons.Filled.Close, contentDescription = null)\r\n                    },\r\n                    colors = FilterChipDefaults.filterChipColors(\r\n                        selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                        selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(hasSuggestions) {\r\n        if (!hasSuggestions) {\r\n            expanded = false\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TimeSection(\r\n    state: LessonCreationUiState,\r\n    onDateSelect: (LocalDate) -> Unit,\r\n    onTimeSelect: (LocalTime) -> Unit\r\n) {\r\n    val context = LocalContext.current\r\n    val locale = state.locale\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n\r\n    Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        OutlinedButton(\r\n            onClick = {\r\n                DatePickerDialog(\r\n                    context,\r\n                    { _, year, month, day ->\r\n                        onDateSelect(LocalDate.of(year, month + 1, day))\r\n                    },\r\n                    state.date.year,\r\n                    state.date.monthValue - 1,\r\n                    state.date.dayOfMonth\r\n                ).show()\r\n            },\r\n            modifier = Modifier.weight(1f)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.spacedBy(6.dp)\r\n            ) {\r\n                Icon(imageVector = Icons.Outlined.CalendarMonth, contentDescription = null)\r\n                Text(text = state.date.format(dateFormatter), textAlign = TextAlign.Center)\r\n            }\r\n        }\r\n        OutlinedButton(\r\n            onClick = {\r\n                TimePickerDialog(\r\n                    context,\r\n                    { _, hour, minute -> onTimeSelect(LocalTime.of(hour, minute)) },\r\n                    state.time.hour,\r\n                    state.time.minute,\r\n                    true\r\n                ).show()\r\n            },\r\n            modifier = Modifier.weight(1f)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.spacedBy(6.dp)\r\n            ) {\r\n                Icon(imageVector = Icons.Outlined.Schedule, contentDescription = null)\r\n                Text(text = state.time.format(timeFormatter), textAlign = TextAlign.Center)\r\n            }\r\n        }\r\n    }\r\n    state.errors[LessonCreationField.TIME]?.let { ErrorText(it) }\r\n}\r\n\r\n@Composable\r\nprivate fun DurationSection(\r\n    state: LessonCreationUiState,\r\n    onDurationChange: (Int) -> Unit\r\n) {\r\n    val presets = listOf(45, 60, 90, 120)\r\n    var customDurationInput by remember(state.durationMinutes) {\r\n        mutableStateOf(state.durationMinutes.takeIf { it > 0 }?.toString().orEmpty())\r\n    }\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        OutlinedTextField(\r\n            value = customDurationInput,\r\n            onValueChange = { value ->\r\n                val digits = value.filter { it.isDigit() }\r\n                customDurationInput = digits\r\n                onDurationChange(digits.toIntOrNull() ?: 0)\r\n            },\r\n            label = { Text(text = stringResource(id = R.string.lesson_create_duration_label)) },\r\n            suffix = { Text(text = stringResource(id = R.string.lesson_create_minutes_suffix)) },\r\n            leadingIcon = {\r\n                Icon(imageVector = Icons.Filled.Schedule, contentDescription = null)\r\n            },\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n            modifier = Modifier.fillMaxWidth(),\r\n            isError = state.errors.containsKey(LessonCreationField.DURATION),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                errorBorderColor = MaterialTheme.colorScheme.error\r\n            )\r\n        )\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            presets.forEach { minutes ->\r\n                val selected = state.durationMinutes == minutes\r\n                Box(modifier = Modifier.weight(1f)) {\r\n                    FilterChip(\r\n                        selected = selected,\r\n                        onClick = {\r\n                            customDurationInput = minutes.toString()\r\n                            onDurationChange(minutes)\r\n                        },\r\n                        label = {\r\n                            Box(\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                contentAlignment = Alignment.Center\r\n                            ) {\r\n                                Text(\r\n                                    text = stringResource(id = R.string.lesson_create_duration_chip, minutes),\r\n                                    textAlign = TextAlign.Center\r\n                                )\r\n                            }\r\n                        },\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        colors = FilterChipDefaults.filterChipColors(\r\n                            selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                            selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        state.errors[LessonCreationField.DURATION]?.let { ErrorText(it) }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PriceSection(\r\n    state: LessonCreationUiState,\r\n    onPriceChange: (Int) -> Unit\r\n) {\r\n    var priceInput by remember(state.priceCents) {\r\n        mutableStateOf(state.priceCents.takeIf { it >= 0 }?.let { (it / 100).toString() } ?: \"\")\r\n    }\r\n    val priceFormatter = remember(state.locale) {\r\n        NumberFormat.getIntegerInstance(state.locale).apply { maximumFractionDigits = 0 }\r\n    }\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(SectionSpacing)) {\r\n        OutlinedTextField(\r\n            value = priceInput,\r\n            onValueChange = { value ->\r\n                val digits = value.filter { it.isDigit() }\r\n                priceInput = digits\r\n                onPriceChange((digits.toIntOrNull() ?: 0) * 100)\r\n            },\r\n            label = { Text(text = stringResource(id = R.string.lesson_create_price_label)) },\r\n            leadingIcon = {\r\n                Icon(imageVector = Icons.Outlined.CurrencyRuble, contentDescription = null)\r\n            },\r\n            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\r\n            modifier = Modifier.fillMaxWidth(),\r\n            isError = state.errors.containsKey(LessonCreationField.PRICE),\r\n            colors = OutlinedTextFieldDefaults.colors(\r\n                focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n                disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n                errorContainerColor = MaterialTheme.colorScheme.surface,\r\n                focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                errorBorderColor = MaterialTheme.colorScheme.error\r\n            )\r\n        )\r\n        if (state.pricePresets.isNotEmpty()) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n            ) {\r\n                state.pricePresets.take(4).forEach { preset ->\r\n                    val formatted = priceFormatter.format(preset / 100)\r\n                    Box(modifier = Modifier.weight(1f)) {\r\n                        FilterChip(\r\n                            selected = state.priceCents == preset,\r\n                            onClick = {\r\n                                priceInput = (preset / 100).toString()\r\n                                onPriceChange(preset)\r\n                            },\r\n                            label = {\r\n                                Box(\r\n                                    modifier = Modifier.fillMaxWidth(),\r\n                                    contentAlignment = Alignment.Center\r\n                                ) {\r\n                                    Text(\r\n                                        text = \"$formatted ${state.currencySymbol}\",\r\n                                        textAlign = TextAlign.Center\r\n                                    )\r\n                                }\r\n                            },\r\n                            modifier = Modifier.fillMaxWidth(),\r\n                            colors = FilterChipDefaults.filterChipColors(\r\n                                selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                                selectedLabelColor = MaterialTheme.colorScheme.onSurface\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        state.errors[LessonCreationField.PRICE]?.let { ErrorText(it) }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun NoteSection(state: LessonCreationUiState, onNoteChange: (String) -> Unit) {\r\n    OutlinedTextField(\r\n        value = state.note,\r\n        onValueChange = onNoteChange,\r\n        label = { Text(text = stringResource(id = R.string.lesson_create_note_label)) },\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .heightIn(min = 80.dp),\r\n        leadingIcon = {\r\n            Icon(imageVector = Icons.Filled.Description, contentDescription = null)\r\n        },\r\n        colors = OutlinedTextFieldDefaults.colors(\r\n            focusedContainerColor = MaterialTheme.colorScheme.surface,\r\n            unfocusedContainerColor = MaterialTheme.colorScheme.surface,\r\n            disabledContainerColor = MaterialTheme.colorScheme.surface,\r\n            errorContainerColor = MaterialTheme.colorScheme.surface,\r\n            focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n            unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n            disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n            errorBorderColor = MaterialTheme.colorScheme.error\r\n        )\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun ActionButtons(\r\n    state: LessonCreationUiState,\r\n    onSubmit: () -> Unit\r\n) {\r\n    androidx.compose.material3.Button(\r\n        onClick = onSubmit,\r\n        enabled = !state.isSubmitting && state.selectedStudent != null,\r\n        modifier = Modifier.fillMaxWidth()\r\n    ) {\r\n        if (state.isSubmitting) {\r\n            androidx.compose.material3.CircularProgressIndicator(\r\n                modifier = Modifier.height(20.dp),\r\n                strokeWidth = 2.dp\r\n            )\r\n        } else {\r\n            Text(text = stringResource(id = R.string.lesson_create_submit))\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ErrorText(text: String) {\r\n    Text(\r\n        text = text,\r\n        color = MaterialTheme.colorScheme.error,\r\n        style = MaterialTheme.typography.bodySmall\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun ConflictDialog(conflict: ConflictInfo, onConfirm: () -> Unit, onDismiss: () -> Unit) {\r\n    val timeFormatter = remember(conflict.start.zone) {\r\n        DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault())\r\n    }\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(id = R.string.lesson_create_conflict_title)) },\r\n        text = {\r\n            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n                Text(text = stringResource(id = R.string.lesson_create_conflict_body))\r\n                conflict.conflicts.forEach { lesson ->\r\n                    Text(\r\n                        text = \"${lesson.studentName} • ${lesson.start.format(timeFormatter)}–${lesson.end.format(timeFormatter)}\",\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        confirmButton = {\r\n            TextButton(onClick = onConfirm) {\r\n                Text(text = stringResource(id = R.string.lesson_create_conflict_proceed))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(id = R.string.lesson_create_conflict_back))\r\n            }\r\n        }\r\n    )\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt b/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt
--- a/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt	(revision b29c52fcb86971bdac50f640ee91503c203ba3ec)
+++ b/app/src/main/java/com/tutorly/ui/lessoncreation/LessonCreationSheet.kt	(date 1760959940987)
@@ -33,6 +33,7 @@
 import androidx.compose.material.icons.outlined.Schedule
 import androidx.compose.material3.AlertDialog
 import androidx.compose.material3.DropdownMenu
+import androidx.compose.material3.DropdownMenuItem
 import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.FilterChip
 import androidx.compose.material3.FilterChipDefaults
Index: app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.gestures.detectHorizontalDragGestures\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.foundation.selection.selectableGroup\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.input.pointer.pointerInput\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.geometry.CornerRadius\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.geometry.Size\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.toArgb\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport java.text.NumberFormat\r\nimport java.time.format.DateTimeFormatter\r\nimport java.time.format.TextStyle\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.math.abs\r\n\r\n@Composable\r\nfun FinanceTopBar(\r\n    selectedPeriod: FinancePeriod,\r\n    onSelectPeriod: (FinancePeriod) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    GradientTopBarContainer {\r\n        Row(\r\n            modifier = modifier\r\n                .fillMaxWidth()\r\n                .height(80.dp)\r\n                .padding(horizontal = 16.dp),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.finance_title),\r\n                style = MaterialTheme.typography.titleLarge,\r\n                color = MaterialTheme.colorScheme.onPrimary,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n\r\n            FinancePeriodToggle(\r\n                selected = selectedPeriod,\r\n                onSelect = onSelectPeriod\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinancePeriodToggle(\r\n    selected: FinancePeriod,\r\n    onSelect: (FinancePeriod) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier\r\n            .selectableGroup()\r\n            .padding(4.dp),\r\n        horizontalArrangement = Arrangement.spacedBy(4.dp)\r\n    ) {\r\n        FinancePeriod.entries.forEach { period ->\r\n            val isSelected = period == selected\r\n            val segmentShape = RoundedCornerShape(20.dp)\r\n            val background = if (isSelected) Color.White else Color.White.copy(alpha = 0.12f)\r\n            val contentColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onPrimary\r\n\r\n            Surface(\r\n                onClick = { onSelect(period) },\r\n                shape = segmentShape,\r\n                color = background,\r\n                contentColor = contentColor,\r\n                tonalElevation = 0.dp,\r\n                shadowElevation = if (isSelected) 2.dp else 0.dp\r\n            ) {\r\n                Text(\r\n                    modifier = Modifier.padding(horizontal = 18.dp, vertical = 8.dp),\r\n                    text = stringResource(period.tabLabelRes),\r\n                    style = MaterialTheme.typography.labelLarge,\r\n                    color = contentColor\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun FinanceScreen(\r\n    selectedPeriod: FinancePeriod,\r\n    periodOffset: Int,\r\n    onPeriodOffsetChange: (Int) -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    viewModel: FinanceViewModel = hiltViewModel(),\r\n    onOpenStudent: (Long) -> Unit = {}\r\n) {\r\n    val state by viewModel.uiState.collectAsState()\r\n\r\n    when (val uiState = state) {\r\n        FinanceUiState.Loading -> FinanceLoading(modifier)\r\n        is FinanceUiState.Content -> FinanceContent(\r\n            modifier = modifier,\r\n            selectedPeriod = selectedPeriod,\r\n            periodOffset = periodOffset,\r\n            state = uiState,\r\n            onPeriodOffsetChange = onPeriodOffsetChange,\r\n            onOpenStudent = onOpenStudent\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceLoading(modifier: Modifier) {\r\n    Box(\r\n        modifier = modifier\r\n            .fillMaxSize()\r\n            .background(MaterialTheme.colorScheme.background),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        CircularProgressIndicator()\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceContent(\r\n    modifier: Modifier,\r\n    selectedPeriod: FinancePeriod,\r\n    periodOffset: Int,\r\n    state: FinanceUiState.Content,\r\n    onPeriodOffsetChange: (Int) -> Unit,\r\n    onOpenStudent: (Long) -> Unit\r\n) {\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    val dateFormatter = rememberDateFormatter()\r\n    val scrollState = rememberScrollState()\r\n\r\n    val temporalContext = state.temporalContext\r\n    val bounds = remember(temporalContext, selectedPeriod, periodOffset) {\r\n        selectedPeriod.bounds(temporalContext, periodOffset)\r\n    }\r\n    val summary = remember(state, bounds) {\r\n        calculateFinanceSummary(\r\n            lessons = state.lessons,\r\n            payments = state.payments,\r\n            bounds = bounds,\r\n            accountsReceivableRubles = state.accountsReceivable,\r\n            prepaymentsRubles = state.prepayments\r\n        )\r\n    }\r\n    val chartPoints = remember(state, bounds) {\r\n        calculateFinanceChart(\r\n            lessons = state.lessons,\r\n            bounds = bounds,\r\n            now = temporalContext.now.toInstant(),\r\n            zoneId = temporalContext.zoneId\r\n        )\r\n    }\r\n    val debtors = state.debtors\r\n\r\n    val periodLabel = stringResource(selectedPeriod.periodLabelRes)\r\n    val periodText = stringResource(R.string.finance_metric_period, periodLabel)\r\n    val cashInValue = currencyFormatter.format(summary.cashIn)\r\n    val accruedValue = currencyFormatter.format(summary.accrued)\r\n    val debtValue = currencyFormatter.format(summary.accountsReceivable)\r\n    val prepaymentValue = currencyFormatter.format(summary.prepayments)\r\n    val lessonsValue = summary.lessons.total.toString()\r\n\r\n    val swipeModifier = Modifier.pointerInput(selectedPeriod, periodOffset) {\r\n        val threshold = 48.dp.toPx()\r\n        var totalDrag = 0f\r\n        var handled = false\r\n        detectHorizontalDragGestures(\r\n            onDragStart = {\r\n                totalDrag = 0f\r\n                handled = false\r\n            },\r\n            onDragEnd = {\r\n                totalDrag = 0f\r\n                handled = false\r\n            },\r\n            onDragCancel = {\r\n                totalDrag = 0f\r\n                handled = false\r\n            },\r\n            onHorizontalDrag = { change, dragAmount ->\r\n                if (handled) return@detectHorizontalDragGestures\r\n\r\n                totalDrag += dragAmount\r\n                if (abs(totalDrag) > threshold) {\r\n                    val newOffset = if (totalDrag < 0) periodOffset + 1 else periodOffset - 1\r\n                    onPeriodOffsetChange(newOffset)\r\n                    handled = true\r\n                    change.consume()\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    val zoneId = temporalContext.zoneId\r\n    val periodStartDate = remember(bounds, zoneId) {\r\n        bounds.start.atZone(zoneId).toLocalDate()\r\n    }\r\n    val periodEndDate = remember(bounds, zoneId, periodStartDate) {\r\n        val exclusive = bounds.end.atZone(zoneId).toLocalDate()\r\n        if (exclusive.isAfter(periodStartDate)) exclusive.minusDays(1) else periodStartDate\r\n    }\r\n    val periodRange = stringResource(\r\n        R.string.finance_period_range,\r\n        dateFormatter.format(periodStartDate),\r\n        dateFormatter.format(periodEndDate)\r\n    )\r\n\r\n    Column(\r\n        modifier = modifier\r\n            .fillMaxSize()\r\n            .background(MaterialTheme.colorScheme.background)\r\n            .then(swipeModifier)\r\n            .verticalScroll(scrollState)\r\n            .padding(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Text(\r\n            text = periodRange,\r\n            style = MaterialTheme.typography.bodySmall,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_cash_in_label),\r\n                value = cashInValue,\r\n                subtitle = periodText\r\n            )\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_accrued_label),\r\n                value = accruedValue,\r\n                subtitle = periodText\r\n            )\r\n        }\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_ar_label),\r\n                value = debtValue\r\n            )\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_prepayments_label),\r\n                value = prepaymentValue\r\n            )\r\n        }\r\n\r\n        FinanceMetricCard(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            title = stringResource(R.string.finance_lessons_label),\r\n            value = lessonsValue,\r\n            subtitle = periodText\r\n        )\r\n\r\n        FinanceChartCard(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            points = chartPoints,\r\n            period = selectedPeriod,\r\n            currencyFormatter = currencyFormatter,\r\n            dateFormatter = dateFormatter\r\n        )\r\n\r\n        FinanceDebtorsSection(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            debtors = debtors,\r\n            currencyFormatter = currencyFormatter,\r\n            dateFormatter = dateFormatter,\r\n            onOpenStudent = onOpenStudent\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(8.dp))\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceMetricCard(\r\n    title: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    subtitle: String? = null,\r\n    footer: (@Composable () -> Unit)? = null\r\n) {\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = value,\r\n                style = MaterialTheme.typography.headlineMedium,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            subtitle?.let {\r\n                Text(\r\n                    text = it,\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n            footer?.let {\r\n                it()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceChartCard(\r\n    modifier: Modifier,\r\n    points: List<FinanceChartPoint>,\r\n    period: FinancePeriod,\r\n    currencyFormatter: NumberFormat,\r\n    dateFormatter: DateTimeFormatter\r\n) {\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 20.dp),\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.finance_chart_title),\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 1\r\n            )\r\n            if (points.isEmpty()) {\r\n                Text(\r\n                    text = stringResource(R.string.finance_chart_empty),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            } else {\r\n                FinanceBarChart(\r\n                    points = points,\r\n                    period = period,\r\n                    dateFormatter = dateFormatter,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .height(160.dp)\r\n                )\r\n                val total = points.sumOf { it.amount }\r\n                Text(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    text = stringResource(\r\n                        R.string.finance_chart_total,\r\n                        currencyFormatter.format(total)\r\n                    ),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    fontWeight = FontWeight.SemiBold,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceBarChart(\r\n    points: List<FinanceChartPoint>,\r\n    period: FinancePeriod,\r\n    dateFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val maxValue = remember(points) { points.maxOfOrNull { it.amount } ?: 0L }\r\n    val barColor = MaterialTheme.colorScheme.primary\r\n    val labels = remember(points, period, dateFormatter) {\r\n        buildChartLabels(points, period, dateFormatter)\r\n    }\r\n    Column(\r\n        modifier = modifier,\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        val density = LocalDensity.current\r\n        val labelColor = MaterialTheme.colorScheme.onSurfaceVariant\r\n        val textSizePx = with(density) { 12.sp.toPx() }\r\n        val labelPaint = remember(labelColor, textSizePx) {\r\n            android.graphics.Paint().apply {\r\n                isAntiAlias = true\r\n                color = labelColor.toArgb()\r\n                textAlign = android.graphics.Paint.Align.CENTER\r\n                textSize = textSizePx\r\n            }\r\n        }\r\n        Canvas(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(120.dp)\r\n        ) {\r\n            if (points.isEmpty()) return@Canvas\r\n            val max = maxValue.toFloat().coerceAtLeast(1f)\r\n            val height = size.height\r\n            val width = size.width\r\n            val bars = points.size\r\n            val barWidth = width / (bars * 1.6f)\r\n            val stepX = width / bars\r\n\r\n            points.forEachIndexed { index, point ->\r\n                val ratio = point.amount.toFloat() / max\r\n                val barHeight = ratio * height\r\n                val left = stepX * index + (stepX - barWidth) / 2f\r\n                drawRoundRect(\r\n                    color = barColor,\r\n                    topLeft = Offset(x = left, y = height - barHeight),\r\n                    size = Size(width = barWidth, height = barHeight),\r\n                    cornerRadius = CornerRadius(x = 12.dp.toPx(), y = 12.dp.toPx())\r\n                )\r\n            }\r\n        }\r\n        Canvas(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(24.dp)\r\n        ) {\r\n            if (points.isEmpty()) return@Canvas\r\n            val bars = points.size\r\n            val width = size.width\r\n            val stepX = width / bars\r\n            val baseline = size.height - labelPaint.fontMetrics.descent\r\n\r\n            labels.forEachIndexed { index, label ->\r\n                if (label.isNotBlank()) {\r\n                    val x = stepX * index + stepX / 2f\r\n                    drawContext.canvas.nativeCanvas.drawText(label, x, baseline, labelPaint)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceDebtorsSection(\r\n    modifier: Modifier,\r\n    debtors: List<FinanceDebtor>,\r\n    currencyFormatter: NumberFormat,\r\n    dateFormatter: DateTimeFormatter,\r\n    onOpenStudent: (Long) -> Unit\r\n) {\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 20.dp),\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.finance_debtors_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n\r\n            if (debtors.isEmpty()) {\r\n                Text(\r\n                    text = stringResource(R.string.finance_debtors_empty),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            } else {\r\n                Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                    debtors.forEach { debtor ->\r\n                        FinanceDebtorRow(\r\n                            debtor = debtor,\r\n                            currencyFormatter = currencyFormatter,\r\n                            dateFormatter = dateFormatter,\r\n                            onOpenStudent = onOpenStudent\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceDebtorRow(\r\n    debtor: FinanceDebtor,\r\n    currencyFormatter: NumberFormat,\r\n    dateFormatter: DateTimeFormatter,\r\n    onOpenStudent: (Long) -> Unit\r\n) {\r\n    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Column(modifier = Modifier.weight(1f), verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n                Text(\r\n                    modifier = Modifier.clickable { onOpenStudent(debtor.studentId) },\r\n                    text = debtor.name,\r\n                    style = MaterialTheme.typography.titleSmall,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                Text(\r\n                    text = stringResource(R.string.finance_debtors_last_debt, dateFormatter.format(debtor.lastDueDate)),\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n            Text(\r\n                text = currencyFormatter.format(debtor.amount),\r\n                style = MaterialTheme.typography.titleSmall,\r\n                fontWeight = FontWeight.SemiBold\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun buildChartLabels(\r\n    points: List<FinanceChartPoint>,\r\n    period: FinancePeriod,\r\n    dateFormatter: DateTimeFormatter\r\n): List<String> {\r\n    if (points.isEmpty()) return emptyList()\r\n    val locale = Locale.getDefault()\r\n    return when (period) {\r\n        FinancePeriod.WEEK -> points.map { point ->\r\n            point.date.dayOfWeek.getDisplayName(TextStyle.SHORT, locale)\r\n        }\r\n\r\n        FinancePeriod.MONTH -> {\r\n            val lastDay = points.maxOfOrNull { it.date.dayOfMonth } ?: 1\r\n            val labeledDays = setOf(1, 7, 14, 21, lastDay)\r\n            points.map { point ->\r\n                val day = point.date.dayOfMonth\r\n                if (day in labeledDays) day.toString() else \"\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberCurrencyFormatter(): NumberFormat {\r\n    return remember {\r\n        NumberFormat.getCurrencyInstance(Locale.getDefault()).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberDateFormatter(): DateTimeFormatter {\r\n    return remember {\r\n        DateTimeFormatter.ofPattern(\"d MMM\", Locale.getDefault())\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt b/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt	(revision b29c52fcb86971bdac50f640ee91503c203ba3ec)
+++ b/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt	(date 1760959941007)
@@ -33,6 +33,7 @@
 import androidx.compose.ui.geometry.Offset
 import androidx.compose.ui.geometry.Size
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.nativeCanvas
 import androidx.compose.ui.graphics.toArgb
 import androidx.compose.ui.platform.LocalDensity
 import androidx.compose.ui.res.stringResource
@@ -496,7 +497,6 @@
         }
     }
 }
-}
 
 @Composable
 private fun FinanceDebtorsSection(
Index: app/src/main/java/com/tutorly/ui/screens/FinanceCalculations.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport com.tutorly.domain.model.LessonDetails\r\nimport com.tutorly.models.LessonStatus\r\nimport com.tutorly.models.Payment\r\nimport com.tutorly.models.PaymentStatus\r\nimport java.time.Instant\r\nimport java.time.LocalDate\r\nimport java.time.ZoneId\r\nimport java.time.ZonedDateTime\r\nimport java.time.temporal.WeekFields\r\nimport kotlin.math.roundToLong\r\n\r\ninternal data class FinanceTemporalContext(\r\n    val now: ZonedDateTime,\r\n    val zoneId: ZoneId,\r\n    val weekFields: WeekFields\r\n)\r\n\r\ninternal data class FinancePeriodBounds(\r\n    val start: Instant,\r\n    val end: Instant\r\n)\r\n\r\ninternal fun FinancePeriod.bounds(\r\n    context: FinanceTemporalContext,\r\n    offset: Int = 0\r\n): FinancePeriodBounds {\r\n    val zone = context.zoneId\r\n    return when (this) {\r\n        FinancePeriod.WEEK -> {\r\n            val baseDate = context.now.toLocalDate().with(context.weekFields.dayOfWeek(), 1)\r\n            val startDate = baseDate.plusWeeks(offset.toLong())\r\n            val start = startDate.atStartOfDay(zone)\r\n            FinancePeriodBounds(start = start.toInstant(), end = start.plusWeeks(1).toInstant())\r\n        }\r\n\r\n        FinancePeriod.MONTH -> {\r\n            val baseDate = context.now.toLocalDate().withDayOfMonth(1)\r\n            val startDate = baseDate.plusMonths(offset.toLong())\r\n            val start = startDate.atStartOfDay(zone)\r\n            FinancePeriodBounds(start = start.toInstant(), end = start.plusMonths(1).toInstant())\r\n        }\r\n    }\r\n}\r\n\r\ninternal fun calculateFinanceSummary(\r\n    lessons: List<LessonDetails>,\r\n    payments: List<Payment>,\r\n    bounds: FinancePeriodBounds,\r\n    accountsReceivableRubles: Long,\r\n    prepaymentsRubles: Long\r\n): FinanceSummary {\r\n    val periodLessons = lessons.filter { lesson ->\r\n        !lesson.startAt.isBefore(bounds.start) && lesson.startAt.isBefore(bounds.end)\r\n    }\r\n\r\n    val accruedCents = periodLessons\r\n        .filter { it.paymentStatus != PaymentStatus.CANCELLED }\r\n        .sumOf { it.priceCents.toLong() }\r\n\r\n    val cashInCents = payments\r\n        .filter { payment ->\r\n            !payment.at.isBefore(bounds.start) && payment.at.isBefore(bounds.end) &&\r\n                payment.status == PaymentStatus.PAID\r\n        }\r\n        .sumOf { it.amountCents.toLong() }\r\n\r\n    val totalLessons = periodLessons.size\r\n    val conducted = periodLessons.count { it.lessonStatus == LessonStatus.DONE }\r\n    val cancelled = periodLessons.count { it.lessonStatus == LessonStatus.CANCELED }\r\n\r\n    return FinanceSummary(\r\n        cashIn = centsToRubles(cashInCents),\r\n        accrued = centsToRubles(accruedCents),\r\n        accountsReceivable = accountsReceivableRubles,\r\n        prepayments = prepaymentsRubles,\r\n        lessons = FinanceLessonsSummary(\r\n            total = totalLessons,\r\n            conducted = conducted,\r\n            cancelled = cancelled\r\n        )\r\n    )\r\n}\r\n\r\ninternal fun calculateFinanceChart(\r\n    lessons: List<LessonDetails>,\r\n    bounds: FinancePeriodBounds,\r\n    now: Instant,\r\n    zoneId: ZoneId\r\n): List<FinanceChartPoint> {\r\n    val accruedByDate = lessons\r\n        .asSequence()\r\n        .filter { lesson ->\r\n            !lesson.startAt.isBefore(bounds.start) &&\r\n                lesson.startAt.isBefore(bounds.end) &&\r\n                !lesson.startAt.isAfter(now) &&\r\n                lesson.paymentStatus != PaymentStatus.CANCELLED &&\r\n                lesson.lessonStatus != LessonStatus.CANCELED\r\n        }\r\n        .groupBy { lesson -> lesson.startAt.atZone(zoneId).toLocalDate() }\r\n        .mapValues { (_, items) -> centsToRubles(items.sumOf { it.priceCents.toLong() }) }\r\n\r\n    val startDate = bounds.start.atZone(zoneId).toLocalDate()\r\n    val endExclusive = bounds.end.atZone(zoneId).toLocalDate()\r\n\r\n    val dates = mutableListOf<LocalDate>()\r\n    var cursor = startDate\r\n    while (cursor.isBefore(endExclusive)) {\r\n        dates.add(cursor)\r\n        cursor = cursor.plusDays(1)\r\n    }\r\n\r\n    if (dates.isEmpty()) {\r\n        dates.add(startDate)\r\n    }\r\n\r\n    return dates.map { date ->\r\n        FinanceChartPoint(\r\n            date = date,\r\n            amount = accruedByDate[date] ?: 0\r\n        )\r\n    }\r\n}\r\n\r\ninternal fun centsToRubles(value: Long): Long = (value / 100.0).roundToLong()\r\n\r\ninternal fun LessonDetails.outstandingAmountCents(): Long {\r\n    if (paymentStatus !in PaymentStatus.outstandingStatuses) return 0\r\n    return (priceCents - paidCents).coerceAtLeast(0).toLong()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/FinanceCalculations.kt b/app/src/main/java/com/tutorly/ui/screens/FinanceCalculations.kt
--- a/app/src/main/java/com/tutorly/ui/screens/FinanceCalculations.kt	(revision b29c52fcb86971bdac50f640ee91503c203ba3ec)
+++ b/app/src/main/java/com/tutorly/ui/screens/FinanceCalculations.kt	(date 1760959941016)
@@ -11,7 +11,7 @@
 import java.time.temporal.WeekFields
 import kotlin.math.roundToLong
 
-internal data class FinanceTemporalContext(
+data class FinanceTemporalContext(
     val now: ZonedDateTime,
     val zoneId: ZoneId,
     val weekFields: WeekFields
