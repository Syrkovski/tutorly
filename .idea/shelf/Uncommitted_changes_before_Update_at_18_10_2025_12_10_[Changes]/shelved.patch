Index: app/src/main/java/com/tutorly/data/repo/preferences/PreferencesUserProfileRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.data.repo.preferences\r\n\r\nimport androidx.datastore.core.DataStore\r\nimport androidx.datastore.preferences.core.Preferences\r\nimport androidx.datastore.preferences.core.edit\r\nimport androidx.datastore.preferences.core.emptyPreferences\r\nimport androidx.datastore.preferences.core.intPreferencesKey\r\nimport androidx.datastore.preferences.core.stringPreferencesKey\r\nimport androidx.datastore.preferences.core.stringSetPreferencesKey\r\nimport com.tutorly.domain.repo.UserProfileRepository\r\nimport com.tutorly.models.AppThemePreset\r\nimport com.tutorly.models.UserProfile\r\nimport java.io.IOException\r\nimport java.time.DayOfWeek\r\nimport javax.inject.Inject\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.catch\r\nimport kotlinx.coroutines.flow.map\r\n\r\nclass PreferencesUserProfileRepository @Inject constructor(\r\n    private val dataStore: DataStore<Preferences>\r\n) : UserProfileRepository {\r\n\r\n    override val profile: Flow<UserProfile> = dataStore.data\r\n        .catch { error ->\r\n            if (error is IOException) {\r\n                emit(emptyPreferences())\r\n            } else {\r\n                throw error\r\n            }\r\n        }\r\n        .map { preferences -> preferences.toUserProfile() }\r\n\r\n    override suspend fun updateWorkDay(startMinutes: Int, endMinutes: Int) {\r\n        dataStore.edit { prefs ->\r\n            prefs[Keys.WORK_DAY_START] = startMinutes\r\n            prefs[Keys.WORK_DAY_END] = endMinutes\r\n        }\r\n    }\r\n\r\n    override suspend fun setWeekendDays(days: Set<DayOfWeek>) {\r\n        dataStore.edit { prefs ->\r\n            if (days.isEmpty()) {\r\n                prefs.remove(Keys.WEEKEND_DAYS)\r\n            } else {\r\n                prefs[Keys.WEEKEND_DAYS] = days.map { it.name }.toSet()\r\n            }\r\n        }\r\n    }\r\n\r\n    override suspend fun setTheme(theme: AppThemePreset) {\r\n        dataStore.edit { prefs ->\r\n            prefs[Keys.THEME] = theme.name\r\n        }\r\n    }\r\n\r\n    private fun Preferences.toUserProfile(): UserProfile {\r\n        val start = this[Keys.WORK_DAY_START] ?: UserProfile.DEFAULT_WORK_DAY_START\r\n        val end = this[Keys.WORK_DAY_END] ?: UserProfile.DEFAULT_WORK_DAY_END\r\n        val sanitizedStart = start.coerceIn(MIN_START_MINUTE, MAX_START_MINUTE)\r\n        val sanitizedEnd = end.coerceIn(sanitizedStart + SLOT_INCREMENT_MINUTES, MAX_END_MINUTE)\r\n        val weekend = this[Keys.WEEKEND_DAYS]\r\n            ?.mapNotNull { value -> runCatching { DayOfWeek.valueOf(value) }.getOrNull() }\r\n            ?.toSet()\r\n            ?: emptySet()\r\n        val theme = this[Keys.THEME]\r\n            ?.let { value ->\r\n                runCatching { AppThemePreset.valueOf(value) }.getOrNull()\r\n                    ?: legacyTheme(value)\r\n            }\r\n            ?: AppThemePreset.ORIGINAL\r\n        return UserProfile(\r\n            workDayStartMinutes = sanitizedStart,\r\n            workDayEndMinutes = sanitizedEnd,\r\n            weekendDays = weekend,\r\n            theme = theme\r\n        )\r\n    }\r\n\r\n    private fun legacyTheme(value: String): AppThemePreset? = when (value) {\r\n        \"OCEAN\" -> AppThemePreset.ROYAL,\r\n        \"FOREST\" -> AppThemePreset.PLUM,\r\n        \"SUNSET\" -> AppThemePreset.ORIGINAL,\r\n        else -> null\r\n    }\r\n\r\n    private object Keys {\r\n        val WORK_DAY_START = intPreferencesKey(\"profile_work_day_start\")\r\n        val WORK_DAY_END = intPreferencesKey(\"profile_work_day_end\")\r\n        val WEEKEND_DAYS = stringSetPreferencesKey(\"profile_weekend_days\")\r\n        val THEME = stringPreferencesKey(\"profile_theme\")\r\n    }\r\n\r\n    companion object {\r\n        private const val SLOT_INCREMENT_MINUTES: Int = 30\r\n        private const val LAST_TIMELINE_MINUTE: Int = 23 * 60 + 30\r\n        private const val MAX_START_MINUTE: Int = LAST_TIMELINE_MINUTE - SLOT_INCREMENT_MINUTES\r\n        private const val MAX_END_MINUTE: Int = LAST_TIMELINE_MINUTE\r\n        private const val MIN_START_MINUTE: Int = 0\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/data/repo/preferences/PreferencesUserProfileRepository.kt b/app/src/main/java/com/tutorly/data/repo/preferences/PreferencesUserProfileRepository.kt
--- a/app/src/main/java/com/tutorly/data/repo/preferences/PreferencesUserProfileRepository.kt	(revision 7cefb97219e2676c46e4603946d9c6c25f20519e)
+++ b/app/src/main/java/com/tutorly/data/repo/preferences/PreferencesUserProfileRepository.kt	(date 1760778504672)
@@ -77,12 +77,12 @@
         )
     }
 
-    private fun legacyTheme(value: String): AppThemePreset? = when (value) {
-        "OCEAN" -> AppThemePreset.ROYAL,
-        "FOREST" -> AppThemePreset.PLUM,
-        "SUNSET" -> AppThemePreset.ORIGINAL,
-        else -> null
-    }
+//    private fun legacyTheme(value: String): AppThemePreset? = when (value) {
+//        "OCEAN" -> AppThemePreset.ROYAL,
+//        "FOREST" -> AppThemePreset.PLUM,
+//        "SUNSET" -> AppThemePreset.ORIGINAL,
+//        else -> null
+//    }
 
     private object Keys {
         val WORK_DAY_START = intPreferencesKey("profile_work_day_start")
