Index: app/src/main/java/com/tutorly/navigation/AppNav.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.navigation\r\n\r\nimport androidx.compose.animation.ExperimentalAnimationApi\r\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\r\nimport androidx.compose.animation.SharedTransitionLayout\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.RowScope\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.systemBars\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.outlined.Archive\r\nimport androidx.compose.material.icons.outlined.Unarchive\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.IconButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Brush\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.window.DialogProperties\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.navArgument\r\nimport com.google.accompanist.navigation.animation.AnimatedNavHost\r\nimport com.google.accompanist.navigation.animation.composable\r\nimport androidx.navigation.compose.dialog\r\nimport com.google.accompanist.navigation.animation.rememberAnimatedNavController\r\nimport com.tutorly.ui.CalendarMode\r\nimport com.tutorly.ui.CalendarScreen\r\nimport com.tutorly.ui.CalendarViewModel\r\nimport com.tutorly.ui.lessoncreation.LessonCreationConfig\r\nimport com.tutorly.ui.lessoncreation.LessonCreationOrigin\r\nimport com.tutorly.ui.lessoncreation.LessonCreationViewModel\r\nimport com.tutorly.ui.components.AppBottomBar\r\nimport com.tutorly.ui.components.AppTopBar\r\nimport com.tutorly.ui.screens.*\r\nimport java.time.LocalDate\r\nimport java.time.ZonedDateTime\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport com.tutorly.R\r\n\r\nconst val ROUTE_CALENDAR = \"calendar\"\r\nprivate const val ROUTE_CALENDAR_PATTERN = \"${ROUTE_CALENDAR}?${CalendarViewModel.ARG_ANCHOR_DATE}={${CalendarViewModel.ARG_ANCHOR_DATE}}&${CalendarViewModel.ARG_CALENDAR_MODE}={${CalendarViewModel.ARG_CALENDAR_MODE}}\"\r\nconst val ROUTE_TODAY = \"today\"\r\nconst val ROUTE_STUDENTS = \"students\"\r\nconst val ROUTE_SETTINGS = \"settings\"\r\nprivate const val ARG_STUDENT_EDITOR_ORIGIN = \"studentEditorOrigin\"\r\nprivate const val ROUTE_STUDENTS_PATTERN = \"$ROUTE_STUDENTS?$ARG_STUDENT_EDITOR_ORIGIN={$ARG_STUDENT_EDITOR_ORIGIN}\"\r\nconst val ROUTE_FINANCE = \"finance\"\r\nconst val ROUTE_STUDENT_DETAILS = \"student/{studentId}\"\r\nprivate const val ROUTE_STUDENT_EDIT_BASE = \"student/{studentId}/edit\"\r\nprivate const val ARG_STUDENT_EDIT_TARGET = \"editTarget\"\r\nconst val ROUTE_STUDENT_EDIT = \"$ROUTE_STUDENT_EDIT_BASE?$ARG_STUDENT_EDIT_TARGET={$ARG_STUDENT_EDIT_TARGET}\"\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentsRoute(origin: StudentEditorOrigin = StudentEditorOrigin.NONE) =\r\n    \"$ROUTE_STUDENTS?$ARG_STUDENT_EDITOR_ORIGIN=${origin.name}\"\r\nprivate fun studentEditRoute(studentId: Long, target: StudentEditTarget? = null): String {\r\n    val base = ROUTE_STUDENT_EDIT_BASE.replace(\"{studentId}\", studentId.toString())\r\n    return if (target != null) {\r\n        \"$base?$ARG_STUDENT_EDIT_TARGET=${target.name}\"\r\n    } else {\r\n        base\r\n    }\r\n}\r\n\r\n@OptIn(\r\n    ExperimentalSharedTransitionApi::class,\r\n    ExperimentalAnimationApi::class\r\n)\r\n@Composable\r\nfun AppNavRoot() {\r\n    val nav = rememberAnimatedNavController()\r\n    val backStack by nav.currentBackStackEntryAsState()\r\n    val destinationRoute = backStack?.destination?.route ?: ROUTE_CALENDAR\r\n    val route = destinationRoute.substringBefore(\"?\")\r\n\r\n    val extendedColors = MaterialTheme.extendedColors\r\n\r\n    var financePeriod by rememberSaveable { mutableStateOf(FinancePeriod.WEEK) }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(\r\n                Brush.verticalGradient(\r\n                    colors = listOf(extendedColors.backgroundTop, extendedColors.backgroundBottom)\r\n                )\r\n            )\r\n    ) {\r\n        Scaffold(\r\n            topBar = {\r\n                when (route) {\r\n                    ROUTE_STUDENTS -> StudentsTopBar(nav)\r\n                    ROUTE_FINANCE -> FinanceTopBar(\r\n                        selectedPeriod = financePeriod,\r\n                        onSelectPeriod = { financePeriod = it }\r\n                    )\r\n                }\r\n            },\r\n            bottomBar = {\r\n                AppBottomBar(\r\n                    currentRoute = route,\r\n                    onSelect = { dest ->\r\n                        if (dest == ROUTE_STUDENTS) {\r\n                            val returnedToList = nav.popBackStack(ROUTE_STUDENTS_PATTERN, inclusive = false)\r\n                            if (returnedToList) {\r\n                                return@AppBottomBar\r\n                            }\r\n                        }\r\n\r\n                        val target = when (dest) {\r\n                            ROUTE_CALENDAR -> calendarRoute(nav)\r\n                            ROUTE_STUDENTS -> studentsRoute()\r\n                            else -> dest\r\n                        }\r\n                        nav.navigate(target) {\r\n                            launchSingleTop = true\r\n                            restoreState = true\r\n                            popUpTo(nav.graph.startDestinationId) { saveState = true }\r\n                        }\r\n                    }\r\n                )\r\n            },\r\n            containerColor = Color.Transparent,\r\n            // чтобы контент корректно учитывал статус/навигационные панели\r\n            contentWindowInsets = WindowInsets.systemBars\r\n        ) { innerPadding ->\r\n            SharedTransitionLayout {\r\n                val sharedScope = this\r\n                AnimatedNavHost(\r\n                    navController = nav,\r\n                    startDestination = ROUTE_CALENDAR_PATTERN,\r\n                    modifier = Modifier.padding(innerPadding)\r\n                ) {\r\n                composable(\r\n                    route = ROUTE_CALENDAR_PATTERN,\r\n                    arguments = listOf(\r\n                        navArgument(CalendarViewModel.ARG_ANCHOR_DATE) {\r\n                            type = NavType.StringType\r\n                            defaultValue = \"\"\r\n                        },\r\n                        navArgument(CalendarViewModel.ARG_CALENDAR_MODE) {\r\n                            type = NavType.StringType\r\n                            defaultValue = CalendarMode.DAY.name\r\n                        }\r\n                    )\r\n                ) { entry ->\r\n                    val creationViewModel: LessonCreationViewModel = hiltViewModel(entry)\r\n                    CalendarScreen(\r\n                        onAddStudent = {\r\n                            nav.navigate(studentsRoute(StudentEditorOrigin.LESSON_CREATION)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onOpenSettings = {\r\n                            nav.navigate(ROUTE_SETTINGS) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        creationViewModel = creationViewModel\r\n                    )\r\n                }\r\n                composable(ROUTE_TODAY) {\r\n                    TodayScreen(\r\n                        onAddStudent = {\r\n                            nav.navigate(studentsRoute(StudentEditorOrigin.LESSON_CREATION)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onOpenStudentProfile = { studentId ->\r\n                            nav.navigate(studentDetailsRoute(studentId)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onOpenDebtors = {\r\n                            nav.navigate(ROUTE_FINANCE) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        }\r\n                    )\r\n                }      // сам рисует свой верх (заголовок + счетчики)\r\n                composable(\r\n                    route = ROUTE_STUDENTS_PATTERN,\r\n                    arguments = listOf(\r\n                        navArgument(ARG_STUDENT_EDITOR_ORIGIN) {\r\n                            type = NavType.StringType\r\n                            defaultValue = StudentEditorOrigin.NONE.name\r\n                        }\r\n                    )\r\n                ) { entry ->\r\n                    val calendarEntry =\r\n                        remember(nav) { nav.getBackStackEntry(ROUTE_CALENDAR_PATTERN) }\r\n                    val creationViewModel: LessonCreationViewModel = hiltViewModel(calendarEntry)\r\n                    val originName = entry.arguments?.getString(ARG_STUDENT_EDITOR_ORIGIN).orEmpty()\r\n                    val origin =\r\n                        runCatching { StudentEditorOrigin.valueOf(originName) }.getOrDefault(\r\n                            StudentEditorOrigin.NONE\r\n                        )\r\n                    StudentsScreen(\r\n                        onStudentEdit = { id ->\r\n                            nav.navigate(studentEditRoute(id)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onAddLesson = { studentId ->\r\n                            creationViewModel.start(\r\n                                LessonCreationConfig(\r\n                                    studentId = studentId,\r\n                                    zoneId = ZonedDateTime.now().zone,\r\n                                    origin = LessonCreationOrigin.STUDENT\r\n                                )\r\n                            )\r\n                            nav.navigate(calendarRoute(nav)) {\r\n                                launchSingleTop = true\r\n                                restoreState = true\r\n                            }\r\n                        },\r\n                        onStudentOpen = { id ->\r\n                            nav.navigate(studentDetailsRoute(id)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        onStudentCreatedFromLesson = { newId ->\r\n                            val reopened = creationViewModel.onStudentCreated(newId)\r\n                            nav.popBackStack()\r\n                            nav.navigate(calendarRoute(nav)) {\r\n                                launchSingleTop = true\r\n                                restoreState = true\r\n                            }\r\n                            if (!reopened) {\r\n                                creationViewModel.dismiss()\r\n                            }\r\n                        },\r\n                        initialEditorOrigin = origin,\r\n                        sharedTransitionScope = sharedScope,\r\n                        animatedVisibilityScope = this\r\n                    )\r\n                }\r\n                composable(\r\n                    route = ROUTE_STUDENT_DETAILS,\r\n                    arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n                ) { entry ->\r\n                    val studentId = entry.arguments?.getLong(\"studentId\") ?: return@composable\r\n                    val calendarEntry =\r\n                        remember(nav) { nav.getBackStackEntry(ROUTE_CALENDAR_PATTERN) }\r\n                    val creationViewModel: LessonCreationViewModel = hiltViewModel(calendarEntry)\r\n                    StudentDetailsScreen(\r\n                        onBack = { nav.popBackStack() },\r\n                        onAddStudentFromCreation = {\r\n                            nav.navigate(studentsRoute(StudentEditorOrigin.LESSON_CREATION)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        },\r\n                        creationViewModel = creationViewModel\r\n                    )\r\n                }\r\n                dialog(\r\n                    route = ROUTE_STUDENT_EDIT,\r\n                    arguments = listOf(\r\n                        navArgument(\"studentId\") { type = NavType.LongType },\r\n                        navArgument(ARG_STUDENT_EDIT_TARGET) {\r\n                            type = NavType.StringType\r\n                            defaultValue = StudentEditTarget.PROFILE.name\r\n                        }\r\n                    ),\r\n                    dialogProperties = DialogProperties(usePlatformDefaultWidth = false)\r\n                ) {\r\n                    StudentEditorDialog(\r\n                        onDismiss = { nav.popBackStack() },\r\n                        onSaved = {\r\n                            nav.popBackStack()\r\n                        }\r\n                    )\r\n                }\r\n                composable(ROUTE_FINANCE) {\r\n                    FinanceScreen(\r\n                        selectedPeriod = financePeriod,\r\n                        onOpenStudent = { studentId ->\r\n                            nav.navigate(studentDetailsRoute(studentId)) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n                composable(ROUTE_SETTINGS) {\r\n                    SettingsScreen(\r\n                        onBack = { nav.popBackStack() }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}}\r\n\r\nfun calendarRoute(nav: NavHostController): String {\r\n    val entry = runCatching { nav.getBackStackEntry(ROUTE_CALENDAR_PATTERN) }.getOrNull()\r\n    val savedDate = entry?.savedStateHandle?.get<String>(CalendarViewModel.ARG_ANCHOR_DATE)\r\n    val savedMode = entry?.savedStateHandle?.get<String>(CalendarViewModel.ARG_CALENDAR_MODE)\r\n    return buildCalendarRoute(savedDate, savedMode)\r\n}\r\n\r\n@Composable\r\nprivate fun StudentsTopBar(navController: NavHostController) {\r\n    val backStackEntry = remember(navController) { navController.getBackStackEntry(ROUTE_STUDENTS_PATTERN) }\r\n    val viewModel: StudentsViewModel = hiltViewModel(backStackEntry)\r\n    val isArchiveMode by viewModel.isArchiveMode.collectAsState()\r\n\r\n    val titleRes = if (isArchiveMode) {\r\n        R.string.students_archive_title\r\n    } else {\r\n        R.string.students_title\r\n    }\r\n\r\n    AppTopBar(\r\n        title = stringResource(id = titleRes),\r\n        actions = {\r\n            StudentsArchiveAction(\r\n                isArchiveMode = isArchiveMode,\r\n                onToggle = viewModel::toggleArchiveMode\r\n            )\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun RowScope.StudentsArchiveAction(\r\n    isArchiveMode: Boolean,\r\n    onToggle: () -> Unit\r\n) {\r\n    val icon = if (isArchiveMode) {\r\n        Icons.Outlined.Unarchive\r\n    } else {\r\n        Icons.Outlined.Archive\r\n    }\r\n    val contentDescription = stringResource(\r\n        id = if (isArchiveMode) {\r\n            R.string.students_archive_show_active\r\n        } else {\r\n            R.string.students_archive_show\r\n        }\r\n    )\r\n    val buttonColors = IconButtonDefaults.iconButtonColors(\r\n        contentColor = Color.White,\r\n        disabledContentColor = Color.White.copy(alpha = 0.4f)\r\n    )\r\n\r\n    IconButton(\r\n        onClick = onToggle,\r\n        colors = buttonColors\r\n    ) {\r\n        Icon(imageVector = icon, contentDescription = contentDescription)\r\n    }\r\n}\r\n\r\nfun buildCalendarRoute(date: String?, mode: String?): String {\r\n    val anchor = date?.takeIf { it.isNotBlank() } ?: LocalDate.now().toString()\r\n    val tab = mode?.takeIf { it.isNotBlank() } ?: CalendarMode.DAY.name\r\n    return \"${ROUTE_CALENDAR}?${CalendarViewModel.ARG_ANCHOR_DATE}=$anchor&${CalendarViewModel.ARG_CALENDAR_MODE}=$tab\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/navigation/AppNav.kt b/app/src/main/java/com/tutorly/navigation/AppNav.kt
--- a/app/src/main/java/com/tutorly/navigation/AppNav.kt	(revision 41aa8b9508890e005699c87b81a4cf96b539310b)
+++ b/app/src/main/java/com/tutorly/navigation/AppNav.kt	(date 1760794837093)
@@ -24,6 +24,7 @@
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.runtime.saveable.rememberSaveable
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Brush
 import androidx.compose.ui.graphics.Color
Index: app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.foundation.selection.selectableGroup\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.geometry.CornerRadius\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.geometry.Size\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.toArgb\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport java.text.NumberFormat\r\nimport java.time.format.DateTimeFormatter\r\nimport java.time.format.TextStyle\r\nimport java.util.Currency\r\nimport java.util.Locale\r\n\r\n@Composable\r\nfun FinanceTopBar(\r\n    selectedPeriod: FinancePeriod,\r\n    onSelectPeriod: (FinancePeriod) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    GradientTopBarContainer {\r\n        Row(\r\n            modifier = modifier\r\n                .fillMaxWidth()\r\n                .height(80.dp)\r\n                .padding(horizontal = 16.dp),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.finance_title),\r\n                style = MaterialTheme.typography.titleLarge,\r\n                color = MaterialTheme.colorScheme.onPrimary,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n\r\n            FinancePeriodToggle(\r\n                selected = selectedPeriod,\r\n                onSelect = onSelectPeriod\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinancePeriodToggle(\r\n    selected: FinancePeriod,\r\n    onSelect: (FinancePeriod) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier\r\n            .selectableGroup()\r\n            .padding(4.dp),\r\n        horizontalArrangement = Arrangement.spacedBy(4.dp)\r\n    ) {\r\n        FinancePeriod.entries.forEach { period ->\r\n            val isSelected = period == selected\r\n            val segmentShape = RoundedCornerShape(20.dp)\r\n            val background = if (isSelected) Color.White else Color.White.copy(alpha = 0.12f)\r\n            val contentColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onPrimary\r\n\r\n            Surface(\r\n                onClick = { onSelect(period) },\r\n                shape = segmentShape,\r\n                color = background,\r\n                contentColor = contentColor,\r\n                tonalElevation = 0.dp,\r\n                shadowElevation = if (isSelected) 2.dp else 0.dp\r\n            ) {\r\n                Text(\r\n                    modifier = Modifier.padding(horizontal = 18.dp, vertical = 8.dp),\r\n                    text = stringResource(period.tabLabelRes),\r\n                    style = MaterialTheme.typography.labelLarge,\r\n                    color = contentColor\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun FinanceScreen(\r\n    selectedPeriod: FinancePeriod,\r\n    modifier: Modifier = Modifier,\r\n    viewModel: FinanceViewModel = hiltViewModel(),\r\n    onOpenStudent: (Long) -> Unit = {}\r\n) {\r\n    val state by viewModel.uiState.collectAsState()\r\n\r\n    when (val uiState = state) {\r\n        FinanceUiState.Loading -> FinanceLoading(modifier)\r\n        is FinanceUiState.Content -> FinanceContent(\r\n            modifier = modifier,\r\n            selectedPeriod = selectedPeriod,\r\n            state = uiState,\r\n            onOpenStudent = onOpenStudent\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceLoading(modifier: Modifier) {\r\n    Box(\r\n        modifier = modifier\r\n            .fillMaxSize()\r\n            .background(MaterialTheme.colorScheme.background),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        CircularProgressIndicator()\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceContent(\r\n    modifier: Modifier,\r\n    selectedPeriod: FinancePeriod,\r\n    state: FinanceUiState.Content,\r\n    onOpenStudent: (Long) -> Unit\r\n) {\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    val dateFormatter = rememberDateFormatter()\r\n    val scrollState = rememberScrollState()\r\n\r\n    val summary = state.summaries[selectedPeriod] ?: FinanceSummary.EMPTY\r\n    val chartPoints = state.chart[selectedPeriod].orEmpty()\r\n    val debtors = state.debtors\r\n\r\n    val periodLabel = stringResource(selectedPeriod.periodLabelRes)\r\n    val periodText = stringResource(R.string.finance_metric_period, periodLabel)\r\n    val cashInValue = currencyFormatter.format(summary.cashIn)\r\n    val accruedValue = currencyFormatter.format(summary.accrued)\r\n    val debtValue = currencyFormatter.format(summary.accountsReceivable)\r\n    val prepaymentValue = currencyFormatter.format(summary.prepayments)\r\n    val lessonsValue = summary.lessons.total.toString()\r\n    val conductedText = stringResource(R.string.finance_lessons_badge_conducted, summary.lessons.conducted)\r\n    val cancelledText = stringResource(R.string.finance_lessons_badge_cancelled, summary.lessons.cancelled)\r\n\r\n    Column(\r\n        modifier = modifier\r\n            .fillMaxSize()\r\n            .background(MaterialTheme.colorScheme.background)\r\n            .verticalScroll(scrollState)\r\n            .padding(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_cash_in_label),\r\n                value = cashInValue,\r\n                subtitle = periodText\r\n            )\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_accrued_label),\r\n                value = accruedValue,\r\n                subtitle = periodText\r\n            )\r\n        }\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_ar_label),\r\n                value = debtValue\r\n            )\r\n            FinanceMetricCard(\r\n                modifier = Modifier.weight(1f),\r\n                title = stringResource(R.string.finance_prepayments_label),\r\n                value = prepaymentValue\r\n            )\r\n        }\r\n\r\n        FinanceMetricCard(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            title = stringResource(R.string.finance_lessons_label),\r\n            value = lessonsValue,\r\n            subtitle = periodText,\r\n            footer = {\r\n                Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {\r\n                    FinanceBadge(\r\n                        text = conductedText,\r\n                        color = MaterialTheme.colorScheme.primaryContainer,\r\n                        contentColor = MaterialTheme.colorScheme.onPrimaryContainer\r\n                    )\r\n                    FinanceBadge(\r\n                        text = cancelledText,\r\n                        color = Color(0xFFD05E6E),\r\n                        contentColor = Color.White\r\n                    )\r\n                }\r\n            }\r\n        )\r\n\r\n        FinanceChartCard(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            points = chartPoints,\r\n            period = selectedPeriod,\r\n            currencyFormatter = currencyFormatter,\r\n            dateFormatter = dateFormatter\r\n        )\r\n\r\n        FinanceDebtorsSection(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            debtors = debtors,\r\n            currencyFormatter = currencyFormatter,\r\n            dateFormatter = dateFormatter,\r\n            onOpenStudent = onOpenStudent\r\n        )\r\n\r\n        Spacer(modifier = Modifier.height(8.dp))\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceMetricCard(\r\n    title: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    subtitle: String? = null,\r\n    footer: (@Composable () -> Unit)? = null\r\n) {\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = value,\r\n                style = MaterialTheme.typography.headlineMedium,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            subtitle?.let {\r\n                Text(\r\n                    text = it,\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n            footer?.let {\r\n                it()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceBadge(\r\n    text: String,\r\n    color: Color,\r\n    contentColor: Color,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = RoundedCornerShape(50),\r\n        color = color,\r\n        contentColor = contentColor\r\n    ) {\r\n        Text(\r\n            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),\r\n            text = text,\r\n            style = MaterialTheme.typography.labelLarge,\r\n            maxLines = 1,\r\n            overflow = TextOverflow.Ellipsis\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceChartCard(\r\n    modifier: Modifier,\r\n    points: List<FinanceChartPoint>,\r\n    period: FinancePeriod,\r\n    currencyFormatter: NumberFormat,\r\n    dateFormatter: DateTimeFormatter\r\n) {\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 20.dp),\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.finance_chart_title),\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 1\r\n            )\r\n            if (points.isEmpty()) {\r\n                Text(\r\n                    text = stringResource(R.string.finance_chart_empty),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            } else {\r\n                FinanceBarChart(\r\n                    points = points,\r\n                    period = period,\r\n                    dateFormatter = dateFormatter,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .height(160.dp)\r\n                )\r\n                val total = points.sumOf { it.amount }\r\n                Text(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    text = stringResource(\r\n                        R.string.finance_chart_total,\r\n                        currencyFormatter.format(total)\r\n                    ),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    fontWeight = FontWeight.SemiBold,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceBarChart(\r\n    points: List<FinanceChartPoint>,\r\n    period: FinancePeriod,\r\n    dateFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val maxValue = remember(points) { points.maxOfOrNull { it.amount } ?: 0L }\r\n    val barColor = MaterialTheme.colorScheme.primary\r\n    val labels = remember(points, period, dateFormatter) {\r\n        buildChartLabels(points, period, dateFormatter)\r\n    }\r\n    Column(\r\n        modifier = modifier,\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        val density = LocalDensity.current\r\n        val labelColor = MaterialTheme.colorScheme.onSurfaceVariant\r\n        val textSizePx = with(density) { 12.sp.toPx() }\r\n        val labelPaint = remember(labelColor, textSizePx) {\r\n            android.graphics.Paint().apply {\r\n                isAntiAlias = true\r\n                color = labelColor.toArgb()\r\n                textAlign = android.graphics.Paint.Align.CENTER\r\n                textSize = textSizePx\r\n            }\r\n        }\r\n        Canvas(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(120.dp)\r\n        ) {\r\n            if (points.isEmpty()) return@Canvas\r\n            val max = maxValue.toFloat().coerceAtLeast(1f)\r\n            val height = size.height\r\n            val width = size.width\r\n            val bars = points.size\r\n            val barWidth = width / (bars * 1.6f)\r\n            val stepX = width / bars\r\n\r\n            points.forEachIndexed { index, point ->\r\n                val ratio = point.amount.toFloat() / max\r\n                val barHeight = ratio * height\r\n                val left = stepX * index + (stepX - barWidth) / 2f\r\n                drawRoundRect(\r\n                    color = barColor,\r\n                    topLeft = Offset(x = left, y = height - barHeight),\r\n                    size = Size(width = barWidth, height = barHeight),\r\n                    cornerRadius = CornerRadius(x = 12.dp.toPx(), y = 12.dp.toPx())\r\n                )\r\n            }\r\n        }\r\n        Canvas(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(24.dp)\r\n        ) {\r\n            if (points.isEmpty()) return@Canvas\r\n            val bars = points.size\r\n            val width = size.width\r\n            val stepX = width / bars\r\n            val baseline = size.height - labelPaint.fontMetrics.descent\r\n\r\n            labels.forEachIndexed { index, label ->\r\n                if (label.isNotBlank()) {\r\n                    val x = stepX * index + stepX / 2f\r\n                    drawContext.canvas.nativeCanvas.drawText(label, x, baseline, labelPaint)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceDebtorsSection(\r\n    modifier: Modifier,\r\n    debtors: List<FinanceDebtor>,\r\n    currencyFormatter: NumberFormat,\r\n    dateFormatter: DateTimeFormatter,\r\n    onOpenStudent: (Long) -> Unit\r\n) {\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 20.dp),\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.finance_debtors_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n\r\n            if (debtors.isEmpty()) {\r\n                Text(\r\n                    text = stringResource(R.string.finance_debtors_empty),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            } else {\r\n                Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                    debtors.forEach { debtor ->\r\n                        FinanceDebtorRow(\r\n                            debtor = debtor,\r\n                            currencyFormatter = currencyFormatter,\r\n                            dateFormatter = dateFormatter,\r\n                            onOpenStudent = onOpenStudent\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun FinanceDebtorRow(\r\n    debtor: FinanceDebtor,\r\n    currencyFormatter: NumberFormat,\r\n    dateFormatter: DateTimeFormatter,\r\n    onOpenStudent: (Long) -> Unit\r\n) {\r\n    Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Column(modifier = Modifier.weight(1f), verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n                Text(\r\n                    modifier = Modifier.clickable { onOpenStudent(debtor.studentId) },\r\n                    text = debtor.name,\r\n                    style = MaterialTheme.typography.titleSmall,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                Text(\r\n                    text = stringResource(R.string.finance_debtors_last_debt, dateFormatter.format(debtor.lastDueDate)),\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n            Text(\r\n                text = currencyFormatter.format(debtor.amount),\r\n                style = MaterialTheme.typography.titleSmall,\r\n                fontWeight = FontWeight.SemiBold\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun buildChartLabels(\r\n    points: List<FinanceChartPoint>,\r\n    period: FinancePeriod,\r\n    dateFormatter: DateTimeFormatter\r\n): List<String> {\r\n    if (points.isEmpty()) return emptyList()\r\n    val locale = Locale.getDefault()\r\n    return when (period) {\r\n        FinancePeriod.WEEK -> points.map { point ->\r\n            point.date.dayOfWeek.getDisplayName(TextStyle.SHORT, locale)\r\n        }\r\n\r\n        FinancePeriod.MONTH -> {\r\n            val lastDay = points.maxOfOrNull { it.date.dayOfMonth } ?: 1\r\n            val labeledDays = setOf(1, 7, 14, 21, lastDay)\r\n            points.map { point ->\r\n                val day = point.date.dayOfMonth\r\n                if (day in labeledDays) day.toString() else \"\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberCurrencyFormatter(): NumberFormat {\r\n    return remember {\r\n        NumberFormat.getCurrencyInstance(Locale.getDefault()).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberDateFormatter(): DateTimeFormatter {\r\n    return remember {\r\n        DateTimeFormatter.ofPattern(\"d MMM\", Locale.getDefault())\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt b/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt	(revision 41aa8b9508890e005699c87b81a4cf96b539310b)
+++ b/app/src/main/java/com/tutorly/ui/screens/FinanceScreen.kt	(date 1760794837185)
@@ -31,6 +31,7 @@
 import androidx.compose.ui.geometry.Offset
 import androidx.compose.ui.geometry.Size
 import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.nativeCanvas
 import androidx.compose.ui.graphics.toArgb
 import androidx.compose.ui.platform.LocalDensity
 import androidx.compose.ui.res.stringResource
@@ -456,7 +457,7 @@
         }
     }
 }
-}
+
 
 @Composable
 private fun FinanceDebtorsSection(
