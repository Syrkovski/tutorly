Index: app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.outlined.Archive\r\nimport androidx.compose.material.icons.outlined.CalendarToday\r\nimport androidx.compose.material.icons.outlined.CreditCard\r\nimport androidx.compose.material.icons.outlined.Delete\r\nimport androidx.compose.material.icons.outlined.Edit\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.ExpandLess\r\nimport androidx.compose.material.icons.outlined.ExpandMore\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material.icons.outlined.Savings\r\nimport androidx.compose.material.icons.outlined.Schedule\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.Unarchive\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.HorizontalDivider\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.IconButtonDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport com.tutorly.ui.components.PaymentBadgeStatus\r\nimport com.tutorly.ui.components.TutorlyDialog\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\r\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\r\nimport com.tutorly.ui.lessoncreation.LessonCreationConfig\r\nimport com.tutorly.ui.lessoncreation.LessonCreationOrigin\r\nimport com.tutorly.ui.lessoncreation.LessonCreationSheet\r\nimport com.tutorly.ui.lessoncreation.LessonCreationViewModel\r\nimport com.tutorly.ui.theme.PrimaryTextColor\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport java.text.NumberFormat\r\nimport java.time.Instant\r\nimport java.time.ZoneId\r\nimport java.time.ZonedDateTime\r\nimport java.time.YearMonth\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.math.roundToInt\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentDetailsScreen(\r\n    onBack: () -> Unit,\r\n    onAddStudentFromCreation: () -> Unit = {},\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentDetailsViewModel = hiltViewModel(),\r\n    creationViewModel: LessonCreationViewModel,\r\n) {\r\n    val state by vm.uiState.collectAsState()\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\r\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\r\n    val editorViewModel: StudentEditorVM = hiltViewModel()\r\n    val creationState by creationViewModel.uiState.collectAsState()\r\n    val context = LocalContext.current\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val editorSnackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var showPrepaymentDialog by rememberSaveable { mutableStateOf(false) }\r\n    var isArchiving by remember { mutableStateOf(false) }\r\n    var showDeleteDialog by rememberSaveable { mutableStateOf(false) }\r\n    var isDeleting by remember { mutableStateOf(false) }\r\n    var showEditorDialog by rememberSaveable { mutableStateOf(false) }\r\n    var pendingEditTarget by remember { mutableStateOf<StudentEditTarget?>(null) }\r\n\r\n    val editorFormState = editorViewModel.formState\r\n\r\n    val closeEditor: () -> Unit = {\r\n        if (!editorFormState.isSaving) {\r\n            showEditorDialog = false\r\n            pendingEditTarget = null\r\n            editorViewModel.updateEditTarget(null)\r\n        }\r\n    }\r\n\r\n    val attemptEditorSave: () -> Unit = {\r\n        if (!editorFormState.isSaving) {\r\n            editorViewModel.save(\r\n                onSaved = {\r\n                    closeEditor()\r\n                },\r\n                onError = { message ->\r\n                    val text = if (message.isNotBlank()) {\r\n                        message\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { editorSnackbarHostState.showSnackbar(text) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    val openEditor: (StudentEditTarget) -> Unit = { target ->\r\n        pendingEditTarget = target\r\n        editorSnackbarHostState.currentSnackbarData?.dismiss()\r\n        editorViewModel.resetFormToLoadedStudent()\r\n        editorViewModel.updateEditTarget(target)\r\n        showEditorDialog = true\r\n    }\r\n    LessonCardSheet(\r\n        state = lessonCardState,\r\n        onDismissRequest = lessonCardViewModel::dismiss,\r\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            lessonCardViewModel.dismiss()\r\n            onAddStudentFromCreation()\r\n        },\r\n        onDateSelect = lessonCardViewModel::onDateSelected,\r\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\r\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\r\n        onPriceChange = lessonCardViewModel::onPriceChanged,\r\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\r\n        onNoteChange = lessonCardViewModel::onNoteChanged,\r\n        onDeleteLesson = lessonCardViewModel::deleteLesson,\r\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\r\n    )\r\n\r\n    LessonCreationSheet(\r\n        state = creationState,\r\n        onDismiss = { creationViewModel.dismiss() },\r\n        onStudentQueryChange = creationViewModel::onStudentQueryChange,\r\n        onStudentSelect = creationViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            creationViewModel.prepareForStudentCreation()\r\n            creationViewModel.dismiss()\r\n            onAddStudentFromCreation()\r\n        },\r\n        onSubjectInputChange = creationViewModel::onSubjectInputChanged,\r\n        onSubjectSelect = creationViewModel::onSubjectSelected,\r\n        onDateSelect = creationViewModel::onDateSelected,\r\n        onTimeSelect = creationViewModel::onTimeSelected,\r\n        onDurationChange = creationViewModel::onDurationChanged,\r\n        onPriceChange = creationViewModel::onPriceChanged,\r\n        onNoteChange = creationViewModel::onNoteChanged,\r\n        onSubmit = creationViewModel::submit,\r\n        onConfirmConflict = creationViewModel::confirmConflict,\r\n        onDismissConflict = creationViewModel::dismissConflict\r\n    )\r\n\r\n    LaunchedEffect(creationState.snackbarMessage) {\r\n        val message = creationState.snackbarMessage\r\n        if (message != null) {\r\n            snackbarHostState.showSnackbar(message)\r\n            creationViewModel.consumeSnackbar()\r\n        }\r\n    }\r\n\r\n    if (showPrepaymentDialog) {\r\n        StudentPrepaymentDialog(\r\n            onDismiss = { showPrepaymentDialog = false },\r\n            onSaved = { result ->\r\n                showPrepaymentDialog = false\r\n                val amountText = formatMoneyInput(result.depositedCents)\r\n                val message = if (result.debtCoveredCents > 0) {\r\n                    val debtText = formatMoneyInput(result.debtCoveredCents)\r\n                    context.getString(R.string.student_prepayment_success_with_debt, amountText, debtText)\r\n                } else {\r\n                    context.getString(R.string.student_prepayment_success, amountText)\r\n                }\r\n                coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n            }\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(showDeleteDialog) {\r\n        if (!showDeleteDialog) {\r\n            isDeleting = false\r\n        }\r\n    }\r\n\r\n    val contentState = state as? StudentProfileUiState.Content\r\n\r\n    val title = contentState?.profile?.student?.name\r\n        ?: stringResource(id = R.string.student_details_title_placeholder)\r\n    val subtitle = contentState?.profile?.let { profile ->\r\n        val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n        val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n        listOfNotNull(grade, subject).joinToString(separator = \" • \")\r\n            .takeIf { it.isNotBlank() }\r\n    }\r\n\r\n    val openLessonCreation: (Long) -> Unit = { id ->\r\n        creationViewModel.start(\r\n            LessonCreationConfig(\r\n                studentId = id,\r\n                zoneId = ZonedDateTime.now().zone,\r\n                origin = LessonCreationOrigin.STUDENT\r\n            )\r\n        )\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            StudentProfileTopBar(\r\n                title = title,\r\n                subtitle = subtitle,\r\n                onEditProfileClick = contentState?.let {\r\n                    { openEditor(StudentEditTarget.PROFILE) }\r\n                },\r\n                isArchived = contentState?.profile?.student?.isArchived,\r\n                onArchiveClick = contentState?.let {\r\n                    {\r\n                        if (!isArchiving) {\r\n                            isArchiving = true\r\n                            vm.toggleArchive(\r\n                                onComplete = { isArchiving = false },\r\n                                onError = { throwable ->\r\n                                    val message = throwable.message?.takeIf { it.isNotBlank() }\r\n                                        ?: context.getString(R.string.student_details_archive_error)\r\n                                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                                }\r\n                            )\r\n                        }\r\n                    }\r\n                },\r\n                onDeleteClick = contentState?.let { { showDeleteDialog = true } },\r\n                archiveEnabled = !isArchiving,\r\n                deleteEnabled = !isDeleting\r\n            )\r\n        },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        floatingActionButton = {\r\n            contentState?.let { current ->\r\n                val profile = current.profile\r\n                FloatingActionButton(\r\n                    onClick = { openLessonCreation(profile.student.id) },\r\n                    modifier = Modifier.navigationBarsPadding(),\r\n                    containerColor = MaterialTheme.colorScheme.primary,\r\n                    contentColor = MaterialTheme.colorScheme.onPrimary\r\n                ) {\r\n                    Icon(imageVector = Icons.Outlined.CalendarToday, contentDescription = null)\r\n                }\r\n            }\r\n        },\r\n        containerColor = Color.Transparent\r\n    ) { innerPadding ->\r\n        when (val currentState = state) {\r\n            StudentProfileUiState.Hidden, StudentProfileUiState.Loading -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n\r\n            StudentProfileUiState.Error -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_profile_error),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n\r\n            is StudentProfileUiState.Content -> {\r\n                StudentProfileContent(\r\n                    profile = currentState.profile,\r\n                    onEdit = openEditor,\r\n                    onAddLesson = openLessonCreation,\r\n                    onPrepaymentClick = { showPrepaymentDialog = true },\r\n                    onLessonClick = lessonCardViewModel::open,\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showDeleteDialog && contentState != null) {\r\n        val studentName = contentState.profile.student.name\r\n        AlertDialog(\r\n            onDismissRequest = {\r\n                if (!isDeleting) {\r\n                    showDeleteDialog = false\r\n                }\r\n            },\r\n            title = { Text(text = stringResource(id = R.string.student_details_delete_title)) },\r\n            text = {\r\n                Text(text = stringResource(id = R.string.student_details_delete_message, studentName))\r\n            },\r\n            confirmButton = {\r\n                TextButton(\r\n                    onClick = {\r\n                        if (!isDeleting) {\r\n                            isDeleting = true\r\n                            vm.deleteStudent(\r\n                                onSuccess = {\r\n                                    isDeleting = false\r\n                                    showDeleteDialog = false\r\n                                    onBack()\r\n                                },\r\n                                onError = { throwable ->\r\n                                    isDeleting = false\r\n                                    val message = throwable.message?.takeIf { it.isNotBlank() }\r\n                                        ?: context.getString(R.string.student_details_delete_error)\r\n                                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                                }\r\n                            )\r\n                        }\r\n                    },\r\n                    enabled = !isDeleting\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_details_delete_confirm))\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(\r\n                    onClick = { showDeleteDialog = false },\r\n                    enabled = !isDeleting\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_details_delete_cancel))\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (showEditorDialog) {\r\n        val focusTarget = pendingEditTarget ?: StudentEditTarget.PROFILE\r\n        StudentEditorDialogContent(\r\n            state = editorFormState,\r\n            onNameChange = editorViewModel::onNameChange,\r\n            onPhoneChange = editorViewModel::onPhoneChange,\r\n            onMessengerChange = editorViewModel::onMessengerChange,\r\n            onRateChange = editorViewModel::onRateChange,\r\n            onSubjectChange = editorViewModel::onSubjectChange,\r\n            onGradeChange = editorViewModel::onGradeChange,\r\n            onNoteChange = editorViewModel::onNoteChange,\r\n            onSave = attemptEditorSave,\r\n            onDismiss = closeEditor,\r\n            editTarget = pendingEditTarget,\r\n            initialFocus = focusTarget,\r\n            snackbarHostState = editorSnackbarHostState\r\n        )\r\n    }\r\n}\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun StudentProfileTopBar(\r\n    title: String,\r\n    subtitle: String?,\r\n    onEditProfileClick: (() -> Unit)? = null,\r\n    isArchived: Boolean?,\r\n    onArchiveClick: (() -> Unit)? = null,\r\n    onDeleteClick: (() -> Unit)? = null,\r\n    archiveEnabled: Boolean = true,\r\n    deleteEnabled: Boolean = true,\r\n) {\r\n    GradientTopBarContainer {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(start = 30.dp, end = 16.dp, top = 12.dp, bottom = 12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalAlignment = Alignment.Top\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.weight(1f),\r\n                    verticalArrangement = Arrangement.Top,\r\n                    horizontalAlignment = Alignment.Start\r\n                ) {\r\n                    Text(\r\n                        text = title,\r\n                        maxLines = 2,\r\n                        overflow = TextOverflow.Ellipsis,\r\n                        color = Color.White,\r\n                        style = MaterialTheme.typography.titleLarge\r\n                    )\r\n                    if (!subtitle.isNullOrBlank()) {\r\n                        Spacer(modifier = Modifier.height(4.dp))\r\n                        Text(\r\n                            text = subtitle,\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            color = Color.White.copy(alpha = 0.75f),\r\n                            style = MaterialTheme.typography.bodyMedium\r\n                        )\r\n                    }\r\n                }\r\n\r\n                val hasActions = onEditProfileClick != null ||\r\n                    (onArchiveClick != null && isArchived != null) ||\r\n                    onDeleteClick != null\r\n\r\n                if (hasActions) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .padding(start = 12.dp),\r\n                        horizontalArrangement = Arrangement.spacedBy(4.dp),\r\n                        verticalAlignment = Alignment.Top\r\n                    ) {\r\n                        val buttonColors = IconButtonDefaults.iconButtonColors(contentColor = Color.White)\r\n\r\n                        if (onEditProfileClick != null) {\r\n                            IconButton(onClick = onEditProfileClick, colors = buttonColors) {\r\n                                Icon(\r\n                                    imageVector = Icons.Outlined.Edit,\r\n                                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                                )\r\n                            }\r\n                        }\r\n                        if (onArchiveClick != null && isArchived != null) {\r\n                            IconButton(\r\n                                onClick = onArchiveClick,\r\n                                enabled = archiveEnabled,\r\n                                colors = buttonColors\r\n                            ) {\r\n                                val (icon, description) = if (isArchived) {\r\n                                    Icons.Outlined.Unarchive to stringResource(id = R.string.student_details_unarchive)\r\n                                } else {\r\n                                    Icons.Outlined.Archive to stringResource(id = R.string.student_details_archive)\r\n                                }\r\n                                Icon(imageVector = icon, contentDescription = description)\r\n                            }\r\n                        }\r\n                        if (onDeleteClick != null) {\r\n                            IconButton(\r\n                                onClick = onDeleteClick,\r\n                                enabled = deleteEnabled,\r\n                                colors = buttonColors\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Outlined.Delete,\r\n                                    contentDescription = stringResource(id = R.string.student_details_delete)\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorDialogContent(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSave: () -> Unit,\r\n    onDismiss: () -> Unit,\r\n    editTarget: StudentEditTarget?,\r\n    initialFocus: StudentEditTarget?,\r\n    snackbarHostState: SnackbarHostState,\r\n) {\r\n    val titleRes = when {\r\n        state.studentId == null -> R.string.add_student\r\n        editTarget == StudentEditTarget.RATE -> R.string.student_editor_title_rate\r\n        editTarget == StudentEditTarget.PHONE -> R.string.student_editor_title_phone\r\n        editTarget == StudentEditTarget.MESSENGER -> R.string.student_editor_title_messenger\r\n        editTarget == StudentEditTarget.NOTES -> R.string.student_editor_title_note\r\n        else -> R.string.student_editor_title\r\n    }\r\n    val title = stringResource(id = titleRes)\r\n\r\n    TutorlyDialog(\r\n        onDismissRequest = {\r\n            if (!state.isSaving) {\r\n                onDismiss()\r\n            }\r\n        },\r\n        modifier = Modifier.imePadding()\r\n    ) {\r\n        Text(\r\n            text = title,\r\n            style = MaterialTheme.typography.titleLarge\r\n        )\r\n\r\n        if (state.isSaving) {\r\n            LinearProgressIndicator(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                color = MaterialTheme.colorScheme.secondary\r\n            )\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            editTarget = editTarget,\r\n            initialFocus = initialFocus,\r\n            enableScrolling = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.End,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            val actionColors = ButtonDefaults.textButtonColors(\r\n                contentColor = Color(0xFF4E998C),\r\n                disabledContentColor = Color(0xFF4E998C).copy(alpha = 0.5f)\r\n            )\r\n            TextButton(\r\n                onClick = onDismiss,\r\n                enabled = !state.isSaving,\r\n                colors = actionColors\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n            Spacer(modifier = Modifier.width(8.dp))\r\n            TextButton(\r\n                onClick = onSave,\r\n                enabled = !state.isSaving && state.name.isNotBlank(),\r\n                colors = actionColors\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_save))\r\n            }\r\n        }\r\n\r\n        SnackbarHost(\r\n            hostState = snackbarHostState,\r\n            modifier = Modifier.fillMaxWidth()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (StudentEditTarget) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onPrepaymentClick: (Long) -> Unit,\r\n    onLessonClick: (Long) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val locale = remember { Locale(\"ru\", \"RU\") }\r\n    val numberFormatter = remember(locale) {\r\n        NumberFormat.getNumberInstance(locale).apply {\r\n            maximumFractionDigits = 0\r\n            minimumFractionDigits = 0\r\n        }\r\n    }\r\n    val currencyFormatter = remember(locale) {\r\n        NumberFormat.getCurrencyInstance(locale).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n            minimumFractionDigits = 0\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val referenceTime = remember(profile) { Instant.now() }\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val monthFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"LLLL yyyy\", locale) }\r\n\r\n    val groupedLessons = remember(profile.recentLessons, zoneId) {\r\n        val sorted = profile.recentLessons.sortedByDescending { it.startAt }\r\n        val groups = linkedMapOf<YearMonth, MutableList<StudentProfileLesson>>()\r\n        sorted.forEach { lesson ->\r\n            val key = YearMonth.from(lesson.startAt.atZone(zoneId))\r\n            groups.getOrPut(key) { mutableListOf() }.add(lesson)\r\n        }\r\n        groups.map { it.key to it.value.toList() }\r\n    }\r\n\r\n    val listState = rememberLazyListState()\r\n\r\n    LazyColumn(\r\n        state = listState,\r\n        modifier = modifier,\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(24.dp)\r\n    ) {\r\n        item {\r\n            StudentProfileMetricsSection(\r\n                profile = profile,\r\n                numberFormatter = numberFormatter,\r\n                onRateClick = { onEdit(StudentEditTarget.RATE) },\r\n                onPrepaymentClick = { onPrepaymentClick(profile.student.id) }\r\n            )\r\n        }\r\n\r\n        item {\r\n            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                ProfileContactsCard(\r\n                    phone = profile.student.phone,\r\n                    messenger = profile.student.messenger,\r\n                    onPhoneClick = { onEdit(StudentEditTarget.PHONE) },\r\n                    onMessengerClick = { onEdit(StudentEditTarget.MESSENGER) }\r\n                )\r\n                ProfileInfoCard(\r\n                    icon = Icons.Outlined.StickyNote2,\r\n                    label = stringResource(id = R.string.student_details_notes_title),\r\n                    value = profile.student.note,\r\n                    onClick = { onEdit(StudentEditTarget.NOTES) },\r\n                    valueMaxLines = 4\r\n                )\r\n            }\r\n        }\r\n\r\n        item {\r\n            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n\r\n                if (groupedLessons.isEmpty()) {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                } else {\r\n                    Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                        groupedLessons.forEach { (month, lessons) ->\r\n                            StudentProfileLessonMonthSection(\r\n                                month = month,\r\n                                monthLabel = monthFormatter.format(month),\r\n                                lessons = lessons,\r\n                                fallbackSubject = profile.subject,\r\n                                currencyFormatter = currencyFormatter,\r\n                                zoneId = zoneId,\r\n                                dateFormatter = dateFormatter,\r\n                                timeFormatter = timeFormatter,\r\n                                referenceTime = referenceTime,\r\n                                onLessonClick = onLessonClick\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        item { Spacer(modifier = Modifier.height(60.dp)) }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonMonthSection(\r\n    month: YearMonth,\r\n    monthLabel: String,\r\n    lessons: List<StudentProfileLesson>,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    referenceTime: Instant,\r\n    onLessonClick: (Long) -> Unit\r\n) {\r\n    var expanded by rememberSaveable(month) { mutableStateOf(false) }\r\n    val toggleDescription = stringResource(\r\n        id = if (expanded) {\r\n            R.string.student_details_history_collapse_month\r\n        } else {\r\n            R.string.student_details_history_expand_month\r\n        },\r\n        monthLabel\r\n    )\r\n\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .clickable { expanded = !expanded }\r\n                .padding(vertical = 4.dp),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = monthLabel,\r\n                style = MaterialTheme.typography.titleSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Icon(\r\n                imageVector = if (expanded) {\r\n                    Icons.Outlined.ExpandLess\r\n                } else {\r\n                    Icons.Outlined.ExpandMore\r\n                },\r\n                contentDescription = toggleDescription,\r\n                tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        }\r\n        if (expanded) {\r\n            Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                lessons.forEach { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = fallbackSubject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter,\r\n                        referenceTime = referenceTime,\r\n                        onClick = { onLessonClick(lesson.id) }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileInfoCard(\r\n    icon: ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    valueMaxLines: Int = 2,\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 14.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Icon(\r\n                imageVector = icon,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n                Text(\r\n                    text = label,\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                Text(\r\n                    text = displayValue,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = if (hasValue) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = valueMaxLines,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    numberFormatter: NumberFormat,\r\n    onRateClick: () -> Unit,\r\n    onPrepaymentClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val lessonsCount = profile.metrics.totalLessons.toString()\r\n    val baseRateCents = profile.student.rateCents?.takeIf { it > 0 }\r\n    val recentRateCents = profile.rate?.let { rate ->\r\n        if (rate.durationMinutes > 0) {\r\n            ((rate.priceCents.toDouble() * 60) / rate.durationMinutes).roundToInt()\r\n        } else {\r\n            null\r\n        }\r\n    }\r\n    val rateCents = baseRateCents ?: recentRateCents\r\n    val rateValue = rateCents?.let { cents ->\r\n        numberFormatter.format(cents / 100.0)\r\n    } ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val earnedValue = numberFormatter.format(profile.metrics.totalPaidCents / 100.0)\r\n    val prepaymentValue = numberFormatter.format(profile.metrics.prepaymentCents / 100.0)\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.CalendarToday,\r\n                    value = lessonsCount,\r\n                    label = stringResource(id = R.string.student_profile_metrics_lessons_label)\r\n                )\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.Schedule,\r\n                    value = rateValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_rate_label),\r\n                    onClick = onRateClick\r\n                )\r\n            }\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.CreditCard,\r\n                    value = earnedValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_earned_label)\r\n                )\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.Savings,\r\n                    value = prepaymentValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_prepayment_label),\r\n                    onClick = onPrepaymentClick\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricTile(\r\n    icon: ImageVector,\r\n    value: String,\r\n    label: String,\r\n    modifier: Modifier = Modifier,\r\n    onClick: (() -> Unit)? = null\r\n) {\r\n    val cardModifier = modifier.fillMaxWidth()\r\n    val content: @Composable () -> Unit = {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(vertical = 16.dp, horizontal = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Icon(\r\n                imageVector = icon,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.primary\r\n            )\r\n            Text(\r\n                text = value,\r\n                style = MaterialTheme.typography.titleLarge,\r\n                fontWeight = FontWeight.SemiBold,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n    if (onClick != null) {\r\n        Card(\r\n            onClick = onClick,\r\n            modifier = cardModifier,\r\n            shape = MaterialTheme.shapes.large,\r\n            colors = TutorlyCardDefaults.colors(),\r\n            elevation = TutorlyCardDefaults.elevation()\r\n        ) { content() }\r\n    } else {\r\n        Card(\r\n            modifier = cardModifier,\r\n            shape = MaterialTheme.shapes.large,\r\n            colors = TutorlyCardDefaults.colors(),\r\n            elevation = TutorlyCardDefaults.elevation()\r\n        ) { content() }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactsCard(\r\n    phone: String?,\r\n    messenger: String?,\r\n    onPhoneClick: () -> Unit,\r\n    onMessengerClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(\r\n        modifier = modifier\r\n            .fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.fillMaxWidth()\r\n        ) {\r\n            ProfileContactRow(\r\n                icon = Icons.Outlined.Phone,\r\n                label = stringResource(id = R.string.student_details_phone_label),\r\n                value = phone,\r\n                placeholder = stringResource(id = R.string.student_profile_contact_placeholder),\r\n                onClick = onPhoneClick\r\n            )\r\n            HorizontalDivider(color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.4f))\r\n            ProfileContactRow(\r\n                icon = Icons.Outlined.Email,\r\n                label = stringResource(id = R.string.student_details_messenger_label),\r\n                value = messenger,\r\n                placeholder = stringResource(id = R.string.student_profile_contact_placeholder),\r\n                onClick = onMessengerClick\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    placeholder: String,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() } ?: placeholder\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clickable(onClick = onClick)\r\n            .padding(horizontal = 16.dp, vertical = 12.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = if (hasValue) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = androidx.compose.ui.text.style.TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    referenceTime: Instant,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = currencyFormatter.format(lesson.priceCents / 100.0)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n    val isUpcoming = lesson.startAt.isAfter(referenceTime)\r\n    val badgeStatus = when {\r\n        !isPaid -> PaymentBadgeStatus.DEBT\r\n        isUpcoming -> PaymentBadgeStatus.PREPAID\r\n        else -> PaymentBadgeStatus.PAID\r\n    }\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = dateText,\r\n                    style = MaterialTheme.typography.labelSmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.weight(1f)\r\n                )\r\n                PaymentBadge(status = badgeStatus)\r\n            }\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                Text(\r\n                    text = timeText,\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.weight(1f)\r\n                )\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(date 1760739461376)
@@ -10,6 +10,7 @@
 import androidx.compose.foundation.layout.Spacer
 import androidx.compose.foundation.layout.fillMaxSize
 import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.imePadding
 import androidx.compose.foundation.layout.navigationBarsPadding
 import androidx.compose.foundation.layout.padding
@@ -31,6 +32,7 @@
 import androidx.compose.material.icons.outlined.StickyNote2
 import androidx.compose.material.icons.outlined.Unarchive
 import androidx.compose.material3.AlertDialog
+import androidx.compose.material3.Button
 import androidx.compose.material3.ButtonDefaults
 import androidx.compose.material3.Card
 import androidx.compose.material3.CircularProgressIndicator
@@ -399,7 +401,7 @@
         )
     }
 }
-}
+
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.animation.AnimatedVisibilityScope\r\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\r\nimport androidx.compose.animation.SharedTransitionScope\r\nimport androidx.compose.animation.core.FastOutSlowInEasing\r\nimport androidx.compose.animation.core.tween\r\n//import androidx.compose.animation.sharedBounds\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.heightIn\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.PersonAdd\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.CurrencyRuble\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.OutlinedTextFieldDefaults\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport com.tutorly.ui.components.PaymentBadgeStatus\r\nimport com.tutorly.ui.components.TutorlyBottomSheetContainer\r\nimport com.tutorly.ui.theme.AvatarFill\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalSharedTransitionApi::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentOpen: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n    sharedTransitionScope: SharedTransitionScope? = null,\r\n    animatedVisibilityScope: AnimatedVisibilityScope? = null,\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    }\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = Color.Transparent,\r\n        contentWindowInsets = WindowInsets(0, 0, 0, 0),\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.PersonAdd,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .shadow(4.dp, MaterialTheme.shapes.large, clip = false),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large,\r\n                colors = OutlinedTextFieldDefaults.colors(\r\n                    focusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    unfocusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    disabledContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    errorContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                    unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                    disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                    errorBorderColor = MaterialTheme.colorScheme.error\r\n                )\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        val sharedKey = \"student-card-${item.student.id}\"\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { onStudentOpen(item.student.id) },\r\n                            sharedTransitionScope = sharedTransitionScope,\r\n                            animatedVisibilityScope = animatedVisibilityScope,\r\n                            sharedContentKey = sharedKey\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        StudentEditorSheet(\r\n            state = formState,\r\n            onNameChange = vm::onEditorNameChange,\r\n            onPhoneChange = vm::onEditorPhoneChange,\r\n            onMessengerChange = vm::onEditorMessengerChange,\r\n            onRateChange = vm::onEditorRateChange,\r\n            onSubjectChange = vm::onEditorSubjectChange,\r\n            onGradeChange = vm::onEditorGradeChange,\r\n            onNoteChange = vm::onEditorNoteChange,\r\n            onSave = handleSave,\r\n            onDismiss = {\r\n                if (!formState.isSaving) {\r\n                    closeEditor()\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSave: () -> Unit,\r\n    onDismiss: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    editTarget: StudentEditTarget? = null,\r\n    initialFocus: StudentEditTarget? = StudentEditTarget.PROFILE,\r\n    snackbarHostState: SnackbarHostState? = null,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    val titleRes = when {\r\n        !isEditing -> R.string.add_student\r\n        editTarget == StudentEditTarget.RATE -> R.string.student_editor_title_rate\r\n        editTarget == StudentEditTarget.PHONE -> R.string.student_editor_title_phone\r\n        editTarget == StudentEditTarget.MESSENGER -> R.string.student_editor_title_messenger\r\n        editTarget == StudentEditTarget.NOTES -> R.string.student_editor_title_note\r\n        else -> R.string.student_editor_title\r\n    }\r\n    val title = stringResource(id = titleRes)\r\n    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val configuration = LocalConfiguration.current\r\n    val minHeight = remember(configuration) { configuration.screenHeightDp.dp * 0.5f }\r\n    val scrollState = rememberScrollState()\r\n\r\n    ModalBottomSheet(\r\n        onDismissRequest = onDismiss,\r\n        sheetState = sheetState,\r\n        containerColor = Color.Transparent,\r\n        contentColor = Color.Unspecified,\r\n        scrimColor = Color.Black.copy(alpha = 0.32f)\r\n    ) {\r\n        TutorlyBottomSheetContainer(color = Color.White, dragHandle = null) {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .heightIn(min = minHeight)\r\n                    .verticalScroll(scrollState)\r\n                    .padding(horizontal = 20.dp, vertical = 16.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp)\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    Text(\r\n                        text = title,\r\n                        style = MaterialTheme.typography.titleLarge,\r\n                        modifier = Modifier.weight(1f)\r\n                    )\r\n                    IconButton(onClick = onDismiss, enabled = !state.isSaving) {\r\n                        Icon(imageVector = Icons.Filled.Close, contentDescription = stringResource(id = R.string.student_editor_close))\r\n                    }\r\n                }\r\n\r\n                if (state.isSaving) {\r\n                    LinearProgressIndicator(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        color = MaterialTheme.colorScheme.secondary\r\n                    )\r\n                }\r\n\r\n                StudentEditorForm(\r\n                    state = state,\r\n                    onNameChange = onNameChange,\r\n                    onPhoneChange = onPhoneChange,\r\n                    onMessengerChange = onMessengerChange,\r\n                    onRateChange = onRateChange,\r\n                    onSubjectChange = onSubjectChange,\r\n                    onGradeChange = onGradeChange,\r\n                    onNoteChange = onNoteChange,\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    editTarget = editTarget,\r\n                    initialFocus = initialFocus,\r\n                    enableScrolling = false,\r\n                    enabled = !state.isSaving,\r\n                    onSubmit = onSave\r\n                )\r\n\r\n                if (snackbarHostState != null) {\r\n                    SnackbarHost(\r\n                        hostState = snackbarHostState,\r\n                        modifier = Modifier.fillMaxWidth()\r\n                    )\r\n                }\r\n\r\n                Button(\r\n                    onClick = onSave,\r\n                    enabled = !state.isSaving && state.name.isNotBlank(),\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = Color(0xFF4E998C),\r\n                        contentColor = Color.White,\r\n                        disabledContainerColor = Color(0xFF4E998C).copy(alpha = 0.3f),\r\n                        disabledContentColor = Color.White.copy(alpha = 0.7f)\r\n                    )\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_editor_save))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\n@OptIn(ExperimentalSharedTransitionApi::class)\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    sharedTransitionScope: SharedTransitionScope? = null,\r\n    animatedVisibilityScope: AnimatedVisibilityScope? = null,\r\n    sharedContentKey: String? = null,\r\n) {\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val subtitle = listOfNotNull(subject, grade)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val note = item.student.note?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null\r\n\r\n    val sharedModifier = if (\r\n        sharedTransitionScope != null &&\r\n        animatedVisibilityScope != null &&\r\n        sharedContentKey != null\r\n    ) {\r\n        with(sharedTransitionScope) {\r\n            val sharedState = rememberSharedContentState(key = sharedContentKey)\r\n            Modifier.sharedBounds(\r\n                sharedContentState = sharedState,\r\n                animatedVisibilityScope = animatedVisibilityScope,\r\n                boundsTransform = { _, _ -> tween(durationMillis = 450, easing = FastOutSlowInEasing) }\r\n            )\r\n        }\r\n    } else {\r\n        Modifier\r\n    }\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .then(sharedModifier),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(\r\n            containerColor = MaterialTheme.colorScheme.surfaceContainerLowest\r\n        ),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Box(Modifier.fillMaxWidth()) {\r\n            if (item.hasDebt) {\r\n                PaymentBadge(\r\n                    status = PaymentBadgeStatus.DEBT,\r\n                    modifier = Modifier\r\n                        .align(Alignment.TopEnd)\r\n                        .padding(top = 12.dp, end = 16.dp)\r\n                )\r\n            }\r\n\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 16.dp, vertical = 12.dp),\r\n                verticalAlignment = Alignment.Top\r\n            ) {\r\n                StudentAvatar(name = item.student.name, size = 48.dp)\r\n                Spacer(Modifier.width(12.dp))\r\n                Box(modifier = Modifier.weight(1f)) {\r\n                    Column(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                    ) {\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(end = if (item.hasDebt) 80.dp else 0.dp),\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            Text(\r\n                                text = item.student.name,\r\n                                style = MaterialTheme.typography.titleMedium,\r\n                                fontWeight = FontWeight.Medium,\r\n                                modifier = Modifier.weight(1f, fill = false)\r\n                            )\r\n                        }\r\n                    subtitle?.let {\r\n                        Text(\r\n                            text = it,\r\n                            style = MaterialTheme.typography.bodySmall,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                    note?.let {\r\n                        Surface(\r\n                            color = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                            contentColor = MaterialTheme.colorScheme.onSurface,\r\n                            shape = MaterialTheme.shapes.small,\r\n                            border = BorderStroke(1.dp, MaterialTheme.colorScheme.outline.copy(alpha = 0.08f))\r\n                        ) {\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .padding(horizontal = 12.dp, vertical = 8.dp),\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                                horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Outlined.StickyNote2,\r\n                                    contentDescription = null,\r\n                                    modifier = Modifier.size(16.dp)\r\n                                )\r\n                                Text(\r\n                                    text = it,\r\n                                    style = MaterialTheme.typography.bodySmall,\r\n                                    maxLines = 2,\r\n                                    overflow = TextOverflow.Ellipsis\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                    Surface(\r\n                        color = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                        contentColor = MaterialTheme.colorScheme.primary,\r\n                        shape = MaterialTheme.shapes.small,\r\n                        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outline.copy(alpha = 0.08f))\r\n                    ) {\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(horizontal = 12.dp, vertical = 8.dp),\r\n                            verticalAlignment = Alignment.CenterVertically,\r\n                            horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                        ) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.CurrencyRuble,\r\n                                contentDescription = null,\r\n                                modifier = Modifier.size(16.dp)\r\n                            )\r\n                            Text(\r\n                                text = stringResource(\r\n                                    id = R.string.student_card_progress,\r\n                                    item.progress.paidLessons,\r\n                                    item.progress.completedLessons\r\n                                ),\r\n                                style = MaterialTheme.typography.bodySmall,\r\n                                fontWeight = FontWeight.Medium,\r\n                                maxLines = 1,\r\n                                overflow = TextOverflow.Ellipsis\r\n                            )\r\n                        }\r\n                    }\r\n                    if (showTrailingRow) {\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(top = 4.dp),\r\n                            horizontalArrangement = Arrangement.End,\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            if (phone != null) {\r\n                                Text(\r\n                                    text = phone,\r\n                                    style = MaterialTheme.typography.bodySmall,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                    maxLines = 1,\r\n                                    overflow = TextOverflow.Ellipsis\r\n                                )\r\n                            }\r\n                            if (email != null) {\r\n                                if (phone != null) {\r\n                                    Spacer(Modifier.width(12.dp))\r\n                                }\r\n                                Text(\r\n                                    text = email,\r\n                                    style = MaterialTheme.typography.bodySmall,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                    maxLines = 1,\r\n                                    overflow = TextOverflow.Ellipsis\r\n                                )\r\n                            }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(AvatarFill),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760739461414)
@@ -400,7 +400,12 @@
             Modifier.sharedBounds(
                 sharedContentState = sharedState,
                 animatedVisibilityScope = animatedVisibilityScope,
-                boundsTransform = { _, _ -> tween(durationMillis = 450, easing = FastOutSlowInEasing) }
+                boundsTransform = { _, _ ->
+                    tween(
+                        durationMillis = 450,
+                        easing = FastOutSlowInEasing
+                    )
+                }
             )
         }
     } else {
@@ -454,101 +459,109 @@
                                 modifier = Modifier.weight(1f, fill = false)
                             )
                         }
-                    subtitle?.let {
-                        Text(
-                            text = it,
-                            style = MaterialTheme.typography.bodySmall,
-                            color = MaterialTheme.colorScheme.onSurfaceVariant
-                        )
-                    }
-                    note?.let {
-                        Surface(
-                            color = MaterialTheme.colorScheme.surfaceContainerLowest,
-                            contentColor = MaterialTheme.colorScheme.onSurface,
-                            shape = MaterialTheme.shapes.small,
-                            border = BorderStroke(1.dp, MaterialTheme.colorScheme.outline.copy(alpha = 0.08f))
-                        ) {
-                            Row(
-                                modifier = Modifier
-                                    .fillMaxWidth()
-                                    .padding(horizontal = 12.dp, vertical = 8.dp),
-                                verticalAlignment = Alignment.CenterVertically,
-                                horizontalArrangement = Arrangement.spacedBy(8.dp)
-                            ) {
-                                Icon(
-                                    imageVector = Icons.Outlined.StickyNote2,
-                                    contentDescription = null,
-                                    modifier = Modifier.size(16.dp)
-                                )
-                                Text(
-                                    text = it,
-                                    style = MaterialTheme.typography.bodySmall,
-                                    maxLines = 2,
-                                    overflow = TextOverflow.Ellipsis
-                                )
-                            }
-                        }
-                    }
-                    Surface(
-                        color = MaterialTheme.colorScheme.surfaceContainerLowest,
-                        contentColor = MaterialTheme.colorScheme.primary,
-                        shape = MaterialTheme.shapes.small,
-                        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outline.copy(alpha = 0.08f))
-                    ) {
-                        Row(
-                            modifier = Modifier
-                                .fillMaxWidth()
-                                .padding(horizontal = 12.dp, vertical = 8.dp),
-                            verticalAlignment = Alignment.CenterVertically,
-                            horizontalArrangement = Arrangement.spacedBy(8.dp)
-                        ) {
-                            Icon(
-                                imageVector = Icons.Outlined.CurrencyRuble,
-                                contentDescription = null,
-                                modifier = Modifier.size(16.dp)
-                            )
-                            Text(
-                                text = stringResource(
-                                    id = R.string.student_card_progress,
-                                    item.progress.paidLessons,
-                                    item.progress.completedLessons
-                                ),
-                                style = MaterialTheme.typography.bodySmall,
-                                fontWeight = FontWeight.Medium,
-                                maxLines = 1,
-                                overflow = TextOverflow.Ellipsis
-                            )
-                        }
-                    }
-                    if (showTrailingRow) {
-                        Row(
-                            modifier = Modifier
-                                .fillMaxWidth()
-                                .padding(top = 4.dp),
-                            horizontalArrangement = Arrangement.End,
-                            verticalAlignment = Alignment.CenterVertically
-                        ) {
-                            if (phone != null) {
-                                Text(
-                                    text = phone,
-                                    style = MaterialTheme.typography.bodySmall,
-                                    color = MaterialTheme.colorScheme.onSurfaceVariant,
-                                    maxLines = 1,
-                                    overflow = TextOverflow.Ellipsis
-                                )
-                            }
-                            if (email != null) {
-                                if (phone != null) {
-                                    Spacer(Modifier.width(12.dp))
-                                }
-                                Text(
-                                    text = email,
-                                    style = MaterialTheme.typography.bodySmall,
-                                    color = MaterialTheme.colorScheme.onSurfaceVariant,
-                                    maxLines = 1,
-                                    overflow = TextOverflow.Ellipsis
-                                )
+                        subtitle?.let {
+                            Text(
+                                text = it,
+                                style = MaterialTheme.typography.bodySmall,
+                                color = MaterialTheme.colorScheme.onSurfaceVariant
+                            )
+                        }
+                        note?.let {
+                            Surface(
+                                color = MaterialTheme.colorScheme.surfaceContainerLowest,
+                                contentColor = MaterialTheme.colorScheme.onSurface,
+                                shape = MaterialTheme.shapes.small,
+                                border = BorderStroke(
+                                    1.dp,
+                                    MaterialTheme.colorScheme.outline.copy(alpha = 0.08f)
+                                )
+                            ) {
+                                Row(
+                                    modifier = Modifier
+                                        .fillMaxWidth()
+                                        .padding(horizontal = 12.dp, vertical = 8.dp),
+                                    verticalAlignment = Alignment.CenterVertically,
+                                    horizontalArrangement = Arrangement.spacedBy(8.dp)
+                                ) {
+                                    Icon(
+                                        imageVector = Icons.Outlined.StickyNote2,
+                                        contentDescription = null,
+                                        modifier = Modifier.size(16.dp)
+                                    )
+                                    Text(
+                                        text = it,
+                                        style = MaterialTheme.typography.bodySmall,
+                                        maxLines = 2,
+                                        overflow = TextOverflow.Ellipsis
+                                    )
+                                }
+                            }
+                        }
+                        Surface(
+                            color = MaterialTheme.colorScheme.surfaceContainerLowest,
+                            contentColor = MaterialTheme.colorScheme.primary,
+                            shape = MaterialTheme.shapes.small,
+                            border = BorderStroke(
+                                1.dp,
+                                MaterialTheme.colorScheme.outline.copy(alpha = 0.08f)
+                            )
+                        ) {
+                            Row(
+                                modifier = Modifier
+                                    .fillMaxWidth()
+                                    .padding(horizontal = 12.dp, vertical = 8.dp),
+                                verticalAlignment = Alignment.CenterVertically,
+                                horizontalArrangement = Arrangement.spacedBy(8.dp)
+                            ) {
+                                Icon(
+                                    imageVector = Icons.Outlined.CurrencyRuble,
+                                    contentDescription = null,
+                                    modifier = Modifier.size(16.dp)
+                                )
+                                Text(
+                                    text = stringResource(
+                                        id = R.string.student_card_progress,
+                                        item.progress.paidLessons,
+                                        item.progress.completedLessons
+                                    ),
+                                    style = MaterialTheme.typography.bodySmall,
+                                    fontWeight = FontWeight.Medium,
+                                    maxLines = 1,
+                                    overflow = TextOverflow.Ellipsis
+                                )
+                            }
+                        }
+                        if (showTrailingRow) {
+                            Row(
+                                modifier = Modifier
+                                    .fillMaxWidth()
+                                    .padding(top = 4.dp),
+                                horizontalArrangement = Arrangement.End,
+                                verticalAlignment = Alignment.CenterVertically
+                            ) {
+                                if (phone != null) {
+                                    Text(
+                                        text = phone,
+                                        style = MaterialTheme.typography.bodySmall,
+                                        color = MaterialTheme.colorScheme.onSurfaceVariant,
+                                        maxLines = 1,
+                                        overflow = TextOverflow.Ellipsis
+                                    )
+                                }
+                                if (email != null) {
+                                    if (phone != null) {
+                                        Spacer(Modifier.width(12.dp))
+                                    }
+                                    Text(
+                                        text = email,
+                                        style = MaterialTheme.typography.bodySmall,
+                                        color = MaterialTheme.colorScheme.onSurfaceVariant,
+                                        maxLines = 1,
+                                        overflow = TextOverflow.Ellipsis
+                                    )
+                                }
                             }
+                        }
                     }
                 }
             }
@@ -558,7 +571,7 @@
 
 
 @Composable
-private fun StudentAvatar(
+fun StudentAvatar(
     name: String,
     size: Dp = 48.dp,
 ) {
@@ -585,3 +598,4 @@
         )
     }
 }
+
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_10_2025_14_18_[Changes]" date="1760095141380" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.10.2025 14:18 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_18_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,30 +0,0 @@
-Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            ExtendedFloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary,\r\n                icon = { Icon(imageVector = Icons.Default.Add, contentDescription = null) },\r\n                text = { Text(text = stringResource(id = R.string.add_student)) }\r\n            )\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onRateChange = vm::onEditorRateChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(\r\n                            id = if (isEditing) R.string.student_editor_save else R.string.add_student\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val rate = item.profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n    val subtitle = listOfNotNull(subject, grade, rate)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onClose = onClose,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    onClose = onClose\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = profile.subject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        Row(horizontalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            IconButton(onClick = onClose) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_profile_close)\r\n                )\r\n            }\r\n            IconButton(onClick = { onEdit(profile.student.id) }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Edit,\r\n                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        0 -> stringResource(id = R.string.students_rate_label_generic)\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision fba4f1d45ebfbe2feee50210e9c7b62bb0e685ee)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760094363991)
-@@ -63,6 +63,7 @@
- import androidx.compose.ui.unit.Dp
- import androidx.hilt.navigation.compose.hiltViewModel
- import androidx.compose.material3.BottomSheetDefaults
-+import androidx.compose.material3.ExtendedFloatingActionButton
- import androidx.compose.material3.rememberModalBottomSheetState
- import androidx.compose.runtime.LaunchedEffect
- import androidx.compose.runtime.remember
-@@ -822,9 +823,9 @@
-                 } else {
-                     null
-                 }
--            }
-+            )}
-         }
--    }
-+
- }
- 
- @Composable
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,89 +0,0 @@
-Index: gradle.properties
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. For more details, visit\r\n# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app's APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Kotlin code style for this project: \"official\" or \"obsolete\":\r\nkotlin.code.style=official\r\n# Enables namespacing of each library's R class so that its R class includes only the\r\n# resources declared in the library itself and none from the library's dependencies,\r\n# thereby reducing the size of the R class for that library\r\nandroid.nonTransitiveRClass=true\r\norg.gradle.java.home=C\\:\\\\Users\\\\Syrok\\\\.jdks\\\\ms-17.0.16\r\n\r\ndagger.hilt.android.plugin.disableAggregatingTask=true\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>ISO-8859-1
-===================================================================
-diff --git a/gradle.properties b/gradle.properties
---- a/gradle.properties	(revision 08ae0d5455521238b00c251f91b44a4620b2a497)
-+++ b/gradle.properties	(date 1760126328327)
-@@ -21,7 +21,7 @@
- # resources declared in the library itself and none from the library's dependencies,
- # thereby reducing the size of the R class for that library
- android.nonTransitiveRClass=true
--org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
-+#org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
- 
- dagger.hilt.android.plugin.disableAggregatingTask=true
- 
-Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Add,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onRateChange = vm::onEditorRateChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .imePadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            modifier = Modifier\r\n                .weight(1f, fill = false)\r\n                .fillMaxWidth(),\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_editor_save)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val rate = item.profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n    val subtitle = listOfNotNull(subject, grade, rate)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onClose = onClose,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    onClose = onClose\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = profile.subject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        Row(horizontalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            IconButton(onClick = onClose) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_profile_close)\r\n                )\r\n            }\r\n            IconButton(onClick = { onEdit(profile.student.id) }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Edit,\r\n                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        0 -> stringResource(id = R.string.students_rate_label_generic)\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision 08ae0d5455521238b00c251f91b44a4620b2a497)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760095878002)
-@@ -829,10 +829,10 @@
-                     }
-                 } else {
-                     null
--                }
--            }
-+                    }
-+            )}
-         }
--    }
-+
- }
- 
- @Composable
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 08ae0d5455521238b00c251f91b44a4620b2a497)
-+++ b/.idea/misc.xml	(date 1760126766078)
-@@ -1,4 +1,5 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK" />
- </project>
-\ No newline at end of file
-Index: .idea/.name
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/.name b/.idea/.name
-new file mode 100644
---- /dev/null	(date 1760126763490)
-+++ b/.idea/.name	(date 1760126763490)
-@@ -0,0 +1,1 @@
-+Tutorly
-\ No newline at end of file
-Index: .idea/compiler.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/compiler.xml b/.idea/compiler.xml
-new file mode 100644
---- /dev/null	(date 1760126766127)
-+++ b/.idea/compiler.xml	(date 1760126766127)
-@@ -0,0 +1,6 @@
-+<?xml version="1.0" encoding="UTF-8"?>
-+<project version="4">
-+  <component name="CompilerConfiguration">
-+    <bytecodeTargetLevel target="21" />
-+  </component>
-+</project>
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_09_10_2025_19_22_[Changes]" date="1760026959407" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 09.10.2025 19:22 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_10_2025_23_14_[Changes]" date="1760127283578" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_14_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.10.2025 23:14 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_10_2025_23_27_[Changes]" date="1760128038083" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.10.2025 23:27 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_10_2025_14_05_[Changes]" date="1760094337206" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.10.2025 14:05 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,41 +0,0 @@
-Index: app/src/main/java/com/tutorly/navigation/AppNav.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.navigation\r\n\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.systemBars\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport androidx.navigation.navArgument\r\nimport com.tutorly.ui.CalendarScreen\r\nimport com.tutorly.ui.components.AppBottomBar\r\nimport com.tutorly.ui.components.AppTopBar\r\nimport com.tutorly.ui.screens.*\r\n\r\n\r\nconst val ROUTE_CALENDAR = \"calendar\"\r\nconst val ROUTE_TODAY = \"today\"\r\nconst val ROUTE_STUDENTS = \"students\"\r\nconst val ROUTE_FINANCE = \"finance\"\r\nconst val ROUTE_STUDENT_NEW = \"student/new\"\r\nconst val ROUTE_STUDENT_DETAILS = \"student/{studentId}\"\r\nconst val ROUTE_STUDENT_EDIT = \"student/{studentId}/edit\"\r\nconst val ROUTE_LESSON_NEW = \"lesson/new?studentId={studentId}\" // под автоподстановку\r\n\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace(\"{studentId}\", studentId.toString())\r\n\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace(\"{studentId}\", studentId.toString())\r\n\r\n@Composable\r\nfun AppNavRoot() {\r\n    val nav = rememberNavController()\r\n    val backStack by nav.currentBackStackEntryAsState()\r\n    val route = backStack?.destination?.route ?: ROUTE_CALENDAR\r\n\r\n    // какой топбар показывать\r\n    val showGlobalTopBar = when (route) {\r\n        ROUTE_STUDENTS, ROUTE_FINANCE -> true   // тут простой заголовок уместен\r\n        else -> false                   // calendar/today рисуют верх сами\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            if (showGlobalTopBar) {\r\n                AppTopBar(\r\n                    title = when (route) {\r\n                        ROUTE_STUDENTS -> \"Ученики\"\r\n                        ROUTE_FINANCE -> \"Финансы\"\r\n                        else -> \"\"\r\n                    },\r\n                    onAddClick = when (route) {\r\n                        ROUTE_STUDENTS -> ({\r\n                            nav.navigate(ROUTE_STUDENT_NEW) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        })\r\n                        else -> null\r\n                    }\r\n                )\r\n            }\r\n        },\r\n        bottomBar = {\r\n            AppBottomBar(\r\n                currentRoute = route,\r\n                onSelect = { dest ->\r\n                    nav.navigate(dest) {\r\n                        launchSingleTop = true\r\n                        restoreState = true\r\n                        popUpTo(nav.graph.startDestinationId) { saveState = true }\r\n                    }\r\n                }\r\n            )\r\n        },\r\n        // чтобы контент корректно учитывал статус/навигационные панели\r\n        contentWindowInsets = WindowInsets.systemBars\r\n    ) { innerPadding ->\r\n        NavHost(\r\n            navController = nav,\r\n            startDestination = ROUTE_CALENDAR,\r\n            modifier = Modifier.padding(innerPadding)\r\n        ) {\r\n            composable(ROUTE_CALENDAR) { CalendarScreen() }   // сам рисует свой верх (месяц/табы/лента)\r\n            composable(ROUTE_TODAY)    { TodayScreen() }      // сам рисует свой верх (заголовок + счетчики)\r\n            composable(ROUTE_STUDENTS) {\r\n                StudentsScreen(\r\n                    onStudentClick = { id ->\r\n                        nav.navigate(studentDetailsRoute(id)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(ROUTE_STUDENT_NEW) {\r\n                StudentEditorScreen(\r\n                    onClose = { nav.popBackStack() },\r\n                    onSaved = { newId ->\r\n                        nav.popBackStack()\r\n                        nav.navigate(studentDetailsRoute(newId)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(\r\n                route = ROUTE_STUDENT_DETAILS,\r\n                arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n            ) { entry ->\r\n                val studentId = entry.arguments?.getLong(\"studentId\") ?: return@composable\r\n                StudentDetailsScreen(\r\n                    onBack = { nav.popBackStack() },\r\n                    onEdit = {\r\n                        nav.navigate(studentEditRoute(studentId)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(\r\n                route = ROUTE_STUDENT_EDIT,\r\n                arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n            ) {\r\n                StudentEditorScreen(\r\n                    onClose = { nav.popBackStack() },\r\n                    onSaved = {\r\n                        nav.popBackStack()\r\n                    }\r\n                )\r\n            }\r\n            composable(ROUTE_FINANCE)  { FinanceScreen() }\r\n        }\r\n    }\r\n}\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/navigation/AppNav.kt b/app/src/main/java/com/tutorly/navigation/AppNav.kt
---- a/app/src/main/java/com/tutorly/navigation/AppNav.kt	(revision cb70b7f1fb876d355f0ef9259c88aecf5d25173a)
-+++ b/app/src/main/java/com/tutorly/navigation/AppNav.kt	(date 1760000197227)
-@@ -31,9 +31,6 @@
- private fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace("{studentId}", studentId.toString())
- private fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace("{studentId}", studentId.toString())
- 
--private fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace("{studentId}", studentId.toString())
--private fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace("{studentId}", studentId.toString())
--
- @Composable
- fun AppNavRoot() {
-     val nav = rememberNavController()
-Index: app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.models.Student\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport java.text.NumberFormat\r\nimport java.util.Locale\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentDetailsScreen(\r\n    onBack: () -> Unit,\r\n    onEdit: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentDetailsViewModel = hiltViewModel(),\r\n) {\r\n    val state by vm.uiState.collectAsState()\r\n    val scrollState = rememberScrollState()\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            StudentDetailsTopBar(\r\n                title = state.student?.name ?: stringResource(id = R.string.student_details_title_placeholder),\r\n                onBack = onBack,\r\n                onEdit = if (state.student != null) onEdit else null\r\n            )\r\n        }\r\n    ) { innerPadding ->\r\n        when {\r\n            state.isLoading -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n            state.student == null -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_details_missing),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n            else -> {\r\n                Column(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                        .verticalScroll(scrollState)\r\n                        .padding(horizontal = 16.dp, vertical = 20.dp),\r\n                    verticalArrangement = Arrangement.spacedBy(20.dp)\r\n                ) {\r\n                    StudentPaymentsCard(\r\n                        hasDebt = state.hasDebt,\r\n                        totalDebtCents = state.totalDebtCents\r\n                    )\r\n                    StudentContactCard(student = state.student)\r\n                    StudentNotesCard(note = state.student.note)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun StudentDetailsTopBar(\r\n    title: String,\r\n    onBack: () -> Unit,\r\n    onEdit: (() -> Unit)?\r\n) {\r\n    TopAppBar(\r\n        title = {\r\n            Text(\r\n                text = title,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        },\r\n        navigationIcon = {\r\n            IconButton(onClick = onBack) {\r\n                Icon(\r\n                    imageVector = Icons.Default.ArrowBack,\r\n                    contentDescription = stringResource(id = R.string.student_details_back)\r\n                )\r\n            }\r\n        },\r\n        actions = {\r\n            onEdit?.let {\r\n                IconButton(onClick = it) {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Edit,\r\n                        contentDescription = stringResource(id = R.string.student_details_edit)\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        colors = TopAppBarDefaults.topAppBarColors(\r\n            containerColor = MaterialTheme.colorScheme.surface,\r\n            titleContentColor = MaterialTheme.colorScheme.onSurface\r\n        )\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun StudentPaymentsCard(\r\n    hasDebt: Boolean,\r\n    totalDebtCents: Long,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val formatter = remember { NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")) }\r\n    val formattedDebt = remember(totalDebtCents) { formatter.format(totalDebtCents / 100.0) }\r\n    Card(\r\n        modifier = modifier.fillMaxWidth(),\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)\r\n    ) {\r\n        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_payments_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            PaymentBadge(paid = !hasDebt)\r\n            Text(\r\n                text = if (hasDebt) {\r\n                    stringResource(id = R.string.student_details_debt_amount, formattedDebt)\r\n                } else {\r\n                    stringResource(id = R.string.student_details_no_debt)\r\n                },\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentContactCard(\r\n    student: Student,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(modifier = modifier.fillMaxWidth()) {\r\n        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_contact_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            InfoRow(\r\n                label = stringResource(id = R.string.student_details_phone_label),\r\n                value = student.phone,\r\n                placeholder = stringResource(id = R.string.student_details_phone_placeholder)\r\n            )\r\n            InfoRow(\r\n                label = stringResource(id = R.string.student_details_messenger_label),\r\n                value = student.messenger,\r\n                placeholder = stringResource(id = R.string.student_details_messenger_placeholder)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentNotesCard(\r\n    note: String?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(modifier = modifier.fillMaxWidth()) {\r\n        Column(Modifier.padding(16.dp)) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_notes_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            Text(\r\n                text = note?.takeIf { it.isNotBlank() }\r\n                    ?: stringResource(id = R.string.student_details_notes_placeholder),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun InfoRow(\r\n    label: String,\r\n    value: String?,\r\n    placeholder: String,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(modifier = modifier.fillMaxWidth()) {\r\n        Text(\r\n            text = label,\r\n            style = MaterialTheme.typography.labelMedium,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Spacer(modifier = Modifier.height(4.dp))\r\n        Text(\r\n            text = value?.takeIf { it.isNotBlank() } ?: placeholder,\r\n            style = MaterialTheme.typography.bodyLarge,\r\n            color = if (value.isNullOrBlank()) {\r\n                MaterialTheme.colorScheme.onSurfaceVariant\r\n            } else {\r\n                MaterialTheme.colorScheme.onSurface\r\n            }\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(revision cb70b7f1fb876d355f0ef9259c88aecf5d25173a)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(date 1759999196478)
-@@ -98,8 +98,8 @@
-                         hasDebt = state.hasDebt,
-                         totalDebtCents = state.totalDebtCents
-                     )
--                    StudentContactCard(student = state.student)
--                    StudentNotesCard(note = state.student.note)
-+                    StudentContactCard(student = state.student!!)
-+                    StudentNotesCard(note = state.student!!.note)
-                 }
-             }
-         }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_19_22_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,20 +0,0 @@
-Index: app/src/main/java/com/tutorly/navigation/AppNav.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.navigation\r\n\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.systemBars\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport androidx.navigation.navArgument\r\nimport com.tutorly.ui.CalendarScreen\r\nimport com.tutorly.ui.components.AppBottomBar\r\nimport com.tutorly.ui.components.AppTopBar\r\nimport com.tutorly.ui.screens.*\r\n\r\n\r\nconst val ROUTE_CALENDAR = \"calendar\"\r\nconst val ROUTE_TODAY = \"today\"\r\nconst val ROUTE_STUDENTS = \"students\"\r\nconst val ROUTE_FINANCE = \"finance\"\r\nconst val ROUTE_STUDENT_NEW = \"student/new\"\r\nconst val ROUTE_STUDENT_DETAILS = \"student/{studentId}\"\r\nconst val ROUTE_STUDENT_EDIT = \"student/{studentId}/edit\"\r\nconst val ROUTE_LESSON_NEW = \"lesson/new?studentId={studentId}\" // под автоподстановку\r\n\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace(\"{studentId}\", studentId.toString())\r\n\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace(\"{studentId}\", studentId.toString())\r\n\r\n@Composable\r\nfun AppNavRoot() {\r\n    val nav = rememberNavController()\r\n    val backStack by nav.currentBackStackEntryAsState()\r\n    val route = backStack?.destination?.route ?: ROUTE_CALENDAR\r\n\r\n    // какой топбар показывать\r\n    val showGlobalTopBar = when (route) {\r\n        ROUTE_STUDENTS, ROUTE_FINANCE -> true   // тут простой заголовок уместен\r\n        else -> false                   // calendar/today рисуют верх сами\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            if (showGlobalTopBar) {\r\n                AppTopBar(\r\n                    title = when (route) {\r\n                        ROUTE_STUDENTS -> \"Ученики\"\r\n                        ROUTE_FINANCE -> \"Финансы\"\r\n                        else -> \"\"\r\n                    },\r\n                    onAddClick = when (route) {\r\n                        ROUTE_STUDENTS -> ({\r\n                            nav.navigate(ROUTE_STUDENT_NEW) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        })\r\n                        else -> null\r\n                    }\r\n                )\r\n            }\r\n        },\r\n        bottomBar = {\r\n            AppBottomBar(\r\n                currentRoute = route,\r\n                onSelect = { dest ->\r\n                    nav.navigate(dest) {\r\n                        launchSingleTop = true\r\n                        restoreState = true\r\n                        popUpTo(nav.graph.startDestinationId) { saveState = true }\r\n                    }\r\n                }\r\n            )\r\n        },\r\n        // чтобы контент корректно учитывал статус/навигационные панели\r\n        contentWindowInsets = WindowInsets.systemBars\r\n    ) { innerPadding ->\r\n        NavHost(\r\n            navController = nav,\r\n            startDestination = ROUTE_CALENDAR,\r\n            modifier = Modifier.padding(innerPadding)\r\n        ) {\r\n            composable(ROUTE_CALENDAR) { CalendarScreen() }   // сам рисует свой верх (месяц/табы/лента)\r\n            composable(ROUTE_TODAY)    { TodayScreen() }      // сам рисует свой верх (заголовок + счетчики)\r\n            composable(ROUTE_STUDENTS) {\r\n                StudentsScreen(\r\n                    onStudentClick = { id ->\r\n                        nav.navigate(studentDetailsRoute(id)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(ROUTE_STUDENT_NEW) {\r\n                StudentEditorScreen(\r\n                    onClose = { nav.popBackStack() },\r\n                    onSaved = { newId ->\r\n                        nav.popBackStack()\r\n                        nav.navigate(studentDetailsRoute(newId)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(\r\n                route = ROUTE_STUDENT_DETAILS,\r\n                arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n            ) { entry ->\r\n                val studentId = entry.arguments?.getLong(\"studentId\") ?: return@composable\r\n                StudentDetailsScreen(\r\n                    onBack = { nav.popBackStack() },\r\n                    onEdit = {\r\n                        nav.navigate(studentEditRoute(studentId)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(\r\n                route = ROUTE_STUDENT_EDIT,\r\n                arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n            ) {\r\n                StudentEditorScreen(\r\n                    onClose = { nav.popBackStack() },\r\n                    onSaved = {\r\n                        nav.popBackStack()\r\n                    }\r\n                )\r\n            }\r\n            composable(ROUTE_FINANCE)  { FinanceScreen() }\r\n        }\r\n    }\r\n}\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/navigation/AppNav.kt b/app/src/main/java/com/tutorly/navigation/AppNav.kt
---- a/app/src/main/java/com/tutorly/navigation/AppNav.kt	(revision 0122e5efc932dce06cfc92d8f7d929cad3a80594)
-+++ b/app/src/main/java/com/tutorly/navigation/AppNav.kt	(date 1760020050791)
-@@ -31,9 +31,6 @@
- private fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace("{studentId}", studentId.toString())
- private fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace("{studentId}", studentId.toString())
- 
--private fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace("{studentId}", studentId.toString())
--private fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace("{studentId}", studentId.toString())
--
- @Composable
- fun AppNavRoot() {
-     val nav = rememberNavController()
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_05_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,22 +0,0 @@
-Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(imageVector = Icons.Default.Add, contentDescription = stringResource(id = R.string.add_student))\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(\r\n                            id = if (isEditing) R.string.student_editor_save else R.string.add_student\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val subtitle = listOfNotNull(subject, grade)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onClose = onClose,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    onClose = onClose\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = profile.subject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        Row(horizontalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            IconButton(onClick = onClose) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_profile_close)\r\n                )\r\n            }\r\n            IconButton(onClick = { onEdit(profile.student.id) }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Edit,\r\n                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision b11925b4a0efbdf30ce632c0b113ecc91e713142)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760093176748)
-@@ -815,9 +815,9 @@
-                 } else {
-                     null
-                 }
--            }
-+            )}
-         }
--    }
-+
- }
- 
- @Composable
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_27_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,107 +0,0 @@
-Index: gradle/libs.versions.toml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>[versions]\r\nagp = \"8.13.0\"\r\nkotlin = \"2.0.21\"\r\ncoreKtx = \"1.17.0\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.3.0\"\r\nespressoCore = \"3.7.0\"\r\nlifecycleRuntimeKtx = \"2.9.4\"\r\nactivityCompose = \"1.11.0\"\r\ncomposeBom = \"2025.09.01\"\r\nnavigation = \"2.9.5\"\r\nlifecycle = \"2.9.4\"\r\ncoroutines = \"1.10.2\"\r\nsplashscreen = \"1.0.1\"\r\ndesugar = \"2.1.5\"\r\nroom = \"2.8.1\"\r\nhilt = \"2.57.2\"\r\nhilt-navigation-compose = \"1.3.0\"\r\nkotlinx-metadata-jvm = \"0.9.0\"\r\n\r\n\r\n[libraries]\r\nkotlinx-metadata-jvm = { module = \"org.jetbrains.kotlinx:kotlinx-metadata-jvm\", version.ref = \"kotlinx-metadata-jvm\" }\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\r\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\r\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\r\nandroidx-compose-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\r\nandroidx-compose-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\r\nandroidx-compose-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\r\nandroidx-compose-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\r\nandroidx-compose-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\r\nandroidx-compose-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\r\nandroidx-compose-foundation = { group = \"androidx.compose.foundation\", name = \"foundation\" }\r\nandroidx-compose-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\r\nandroidx-navigation-compose = { module = \"androidx.navigation:navigation-compose\", version.ref = \"navigation\" }\r\nkotlinx-coroutines-android = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-android\", version.ref = \"coroutines\" }\r\nkotlinx-coroutines-core = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"coroutines\" }\r\nandroidx-lifecycle-viewmodel-compose = { module = \"androidx.lifecycle:lifecycle-viewmodel-compose\", version.ref = \"lifecycle\" }\r\nandroidx-compose-material-icons-extended = { module = \"androidx.compose.material:material-icons-extended\" }\r\nandroidx-core-splashscreen = { module = \"androidx.core:core-splashscreen\", version.ref = \"splashscreen\" }\r\ndesugar-jdk-libs = { module = \"com.android.tools:desugar_jdk_libs\", version.ref = \"desugar\" }\r\nroom-runtime = { module = \"androidx.room:room-runtime\", version.ref = \"room\" }\r\nroom-ktx = { module = \"androidx.room:room-ktx\", version.ref = \"room\" }\r\nroom-compiler = { module = \"androidx.room:room-compiler\", version.ref = \"room\" }\r\nhilt-android = { module = \"com.google.dagger:hilt-android\", version.ref = \"hilt\" }\r\nhilt-compiler = { module = \"com.google.dagger:hilt-compiler\", version.ref = \"hilt\" }\r\nhilt-navigation-compose = {module = \"androidx.hilt:hilt-navigation-compose\", version.ref = \"hilt-navigation-compose\"}\r\n\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\nkotlin-compose = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\r\nksp = { id = \"com.google.devtools.ksp\", version = \"2.0.21-1.0.27\" }\r\nhilt = { id = \"com.google.dagger.hilt.android\", version.ref = \"hilt\" }\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
---- a/gradle/libs.versions.toml	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
-+++ b/gradle/libs.versions.toml	(date 1760127698419)
-@@ -17,6 +17,7 @@
- hilt = "2.57.2"
- hilt-navigation-compose = "1.3.0"
- kotlinx-metadata-jvm = "0.9.0"
-+foundation = "1.9.3"
- 
- 
- [libraries]
-Index: .idea/compiler.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/compiler.xml b/.idea/compiler.xml
-new file mode 100644
---- /dev/null	(date 1760127283407)
-+++ b/.idea/compiler.xml	(date 1760127283407)
-@@ -0,0 +1,6 @@
-+<?xml version="1.0" encoding="UTF-8"?>
-+<project version="4">
-+  <component name="CompilerConfiguration">
-+    <bytecodeTargetLevel target="21" />
-+  </component>
-+</project>
-\ No newline at end of file
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
-+++ b/.idea/misc.xml	(date 1760127283307)
-@@ -1,4 +1,5 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK" />
- </project>
-\ No newline at end of file
-Index: .idea/.name
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/.name b/.idea/.name
-new file mode 100644
---- /dev/null	(date 1760127283357)
-+++ b/.idea/.name	(date 1760127283357)
-@@ -0,0 +1,1 @@
-+Tutorly
-\ No newline at end of file
-Index: gradle.properties
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. For more details, visit\r\n# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app's APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Kotlin code style for this project: \"official\" or \"obsolete\":\r\nkotlin.code.style=official\r\n# Enables namespacing of each library's R class so that its R class includes only the\r\n# resources declared in the library itself and none from the library's dependencies,\r\n# thereby reducing the size of the R class for that library\r\nandroid.nonTransitiveRClass=true\r\norg.gradle.java.home=C\\:\\\\Users\\\\Syrok\\\\.jdks\\\\ms-17.0.16\r\n\r\ndagger.hilt.android.plugin.disableAggregatingTask=true\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>ISO-8859-1
-===================================================================
-diff --git a/gradle.properties b/gradle.properties
---- a/gradle.properties	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
-+++ b/gradle.properties	(date 1760127283219)
-@@ -21,7 +21,7 @@
- # resources declared in the library itself and none from the library's dependencies,
- # thereby reducing the size of the R class for that library
- android.nonTransitiveRClass=true
--org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
-+#org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
- 
- dagger.hilt.android.plugin.disableAggregatingTask=true
- 
-Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Add,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onRateChange = vm::onEditorRateChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .imePadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            modifier = Modifier\r\n                .weight(1f, fill = false)\r\n                .fillMaxWidth(),\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_editor_save)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val rate = item.profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n    val subtitle = listOfNotNull(subject, grade, rate)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onClose = onClose,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    onClose = onClose\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = profile.subject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        Row(horizontalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            IconButton(onClick = onClose) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_profile_close)\r\n                )\r\n            }\r\n            IconButton(onClick = { onEdit(profile.student.id) }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Edit,\r\n                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        0 -> stringResource(id = R.string.students_rate_label_generic)\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision c2537e1cd9fe15e1c30481ca652179a61dd6eb3e)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760127283257)
-@@ -829,10 +829,10 @@
-                     }
-                 } else {
-                     null
--                }
--            }
-+                    }
-+            )}
-         }
--    }
-+
- }
- 
- @Composable
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,22 +0,0 @@
-Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val openEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitNewStudent(\r\n                onSuccess = { newId, name ->\r\n                    closeEditor()\r\n                    val message = context.getString(R.string.student_added_message, name)\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                        onStudentCreatedFromLesson(newId)\r\n                    }\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(imageVector = Icons.Default.Add, contentDescription = stringResource(id = R.string.add_student))\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = { if (!formState.isSaving) closeEditor() },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onStudentEdit(studentId)\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.add_student),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(text = stringResource(id = R.string.add_student))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val subtitle = listOfNotNull(subject, grade)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(profile = profile, onEdit = onEdit)\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        IconButton(onClick = { onEdit(profile.student.id) }) {\r\n            Icon(\r\n                imageVector = Icons.Filled.Edit,\r\n                contentDescription = stringResource(id = R.string.student_details_edit)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision 1fd08e9723ad7118729844c35a51e2726e2b1422)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760091068696)
-@@ -762,9 +762,9 @@
-                 } else {
-                     null
-                 }
--            }
-+            )}
-         }
--    }
-+
- }
- 
- @Composable
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,125 +0,0 @@
-Index: app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.itemsIndexed\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.DoneAll\r\nimport androidx.compose.material.icons.outlined.CalendarMonth\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.WarningAmber\r\nimport androidx.compose.material3.AssistChip\r\nimport androidx.compose.material3.AssistChipDefaults\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarDuration\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.SnackbarResult\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.material3.rememberSwipeToDismissBoxState\r\nimport androidx.compose.material3.SwipeToDismissBox\r\nimport androidx.compose.material3.SwipeToDismissBoxValue\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.LessonForToday\r\nimport com.tutorly.models.PaymentStatus\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TodayScreen(\r\n    modifier: Modifier = Modifier,\r\n    viewModel: TodayViewModel = hiltViewModel()\r\n) {\r\n    val uiState by viewModel.uiState.collectAsState()\r\n    val snackbarMessage by viewModel.snackbarMessage.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val context = LocalContext.current\r\n\r\n    var noteLesson by remember { mutableStateOf<LessonForToday?>(null) }\r\n    var noteDraft by rememberSaveable(noteLesson?.id) { mutableStateOf(\"\") }\r\n    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n\r\n    LaunchedEffect(snackbarMessage) {\r\n        val message = snackbarMessage ?: return@LaunchedEffect\r\n        val text = when (message.status) {\r\n            PaymentStatus.PAID -> context.getString(R.string.today_snackbar_paid)\r\n            PaymentStatus.DUE -> context.getString(R.string.today_snackbar_due)\r\n            else -> context.getString(R.string.today_snackbar_marked)\r\n        }\r\n        val action = context.getString(R.string.today_snackbar_action_undo)\r\n        val result = snackbarHostState.showSnackbar(\r\n            message = text,\r\n            actionLabel = action,\r\n            duration = SnackbarDuration.Short,\r\n            withDismissAction = true\r\n        )\r\n        viewModel.onSnackbarShown()\r\n        if (result == SnackbarResult.ActionPerformed) {\r\n            viewModel.onUndo(message.lessonId)\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        topBar = { TodayTopBar(state = uiState) },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }\r\n    ) { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            when (val state = uiState) {\r\n                TodayUiState.Loading -> LoadingState()\r\n                TodayUiState.Empty -> EmptyState()\r\n                is TodayUiState.Content -> TodayContent(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonClick = { lesson ->\r\n                        noteLesson = lesson\r\n                        noteDraft = lesson.note.orEmpty()\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    noteLesson?.let { lesson ->\r\n        ModalBottomSheet(\r\n            onDismissRequest = { noteLesson = null },\r\n            sheetState = sheetState\r\n        ) {\r\n            LessonNoteSheet(\r\n                lesson = lesson,\r\n                text = noteDraft,\r\n                onTextChange = { noteDraft = it },\r\n                onCancel = { noteLesson = null },\r\n                onSave = { value ->\r\n                    viewModel.onNoteSave(lesson.id, value.ifBlank { null })\r\n                    noteLesson = null\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LoadingState() {\r\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\r\n        CircularProgressIndicator()\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyState() {\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(horizontal = 32.dp, vertical = 64.dp),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = Icons.Outlined.CalendarMonth,\r\n            contentDescription = null,\r\n            modifier = Modifier.size(64.dp),\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Text(\r\n            text = stringResource(R.string.today_empty_title),\r\n            style = MaterialTheme.typography.titleMedium,\r\n            textAlign = TextAlign.Center\r\n        )\r\n        Text(\r\n            text = stringResource(R.string.today_empty_subtitle),\r\n            style = MaterialTheme.typography.bodyMedium,\r\n            textAlign = TextAlign.Center,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun TodayContent(\r\n    state: TodayUiState.Content,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonClick: (LessonForToday) -> Unit\r\n) {\r\n    val listState = rememberLazyListState()\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        state = listState,\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        itemsIndexed(state.lessons, key = { _, item -> item.id }) { index, lesson ->\r\n            if (state.remainingCount > 0 && index == state.remainingCount) {\r\n                MarkedSectionHeader()\r\n            }\r\n            TodayLessonRow(\r\n                lesson = lesson,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onClick = { onLessonClick(lesson) }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun MarkedSectionHeader() {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(top = 4.dp, bottom = 4.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Spacer(\r\n            modifier = Modifier\r\n                .weight(1f)\r\n                .height(1.dp)\r\n                .background(MaterialTheme.colorScheme.outlineVariant)\r\n        )\r\n        Text(\r\n            text = stringResource(R.string.today_section_marked),\r\n            style = MaterialTheme.typography.labelSmall,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n            modifier = Modifier.padding(horizontal = 12.dp)\r\n        )\r\n        Spacer(\r\n            modifier = Modifier\r\n                .weight(1f)\r\n                .height(1.dp)\r\n                .background(MaterialTheme.colorScheme.outlineVariant)\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun TodayLessonRow(\r\n    lesson: LessonForToday,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onClick: () -> Unit\r\n) {\r\n    val dismissState = rememberSwipeToDismissBoxState(confirmValueChange = { value ->\r\n        when (value) {\r\n            SwipeToDismissBoxValue.StartToEnd -> {\r\n                onSwipeRight(lesson.id)\r\n                false\r\n            }\r\n            SwipeToDismissBoxValue.EndToStart -> {\r\n                onSwipeLeft(lesson.id)\r\n                false\r\n            }\r\n            else -> false\r\n        }\r\n    })\r\n\r\n    SwipeToDismissBox(\r\n        state = dismissState,\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n        backgroundContent = { DismissBackground(state = dismissState) }\r\n    ) {\r\n        LessonCard(\r\n            lesson = lesson,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .clickable(onClick = onClick)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DismissBackground(state: androidx.compose.material3.SwipeToDismissBoxState) {\r\n    val target = state.targetValue\r\n    if (target == SwipeToDismissBoxValue.Settled) {\r\n        return\r\n    }\r\n    val color: Color\r\n    val icon: ImageVector\r\n    val tint: Color\r\n    val alignment: Alignment\r\n    if (target == SwipeToDismissBoxValue.StartToEnd) {\r\n        color = MaterialTheme.colorScheme.tertiaryContainer\r\n        icon = Icons.Filled.Check\r\n        tint = MaterialTheme.colorScheme.onTertiaryContainer\r\n        alignment = Alignment.CenterStart\r\n    } else {\r\n        color = MaterialTheme.colorScheme.errorContainer\r\n        icon = Icons.Outlined.WarningAmber\r\n        tint = MaterialTheme.colorScheme.onErrorContainer\r\n        alignment = Alignment.CenterEnd\r\n    }\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(color),\r\n        contentAlignment = alignment\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = tint,\r\n            modifier = Modifier\r\n                .padding(horizontal = 24.dp)\r\n                .size(28.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonCard(\r\n    lesson: LessonForToday,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\") }\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    val startTime = remember(lesson.startAt) { lesson.startAt.atZone(zoneId).toLocalTime() }\r\n    val timeText = remember(startTime) { timeFormatter.format(startTime) }\r\n    val durationMinutes = remember(lesson.duration) { lesson.duration.toMinutes().toInt().coerceAtLeast(0) }\r\n    val amount = remember(lesson.priceCents) { formatCurrency(lesson.priceCents.toLong(), currencyFormatter) }\r\n    val subjectTitle = lesson.lessonTitle?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val durationLabel = stringResource(R.string.today_duration_format, durationMinutes)\r\n    val metaParts = listOf(subjectTitle, timeText, durationLabel, amount)\r\n\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceContainerLow),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp)\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = lesson.studentName,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                PaymentStatusChip(status = lesson.paymentStatus)\r\n            }\r\n            Text(\r\n                text = metaParts.joinToString(separator = \" • \"),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val note = lesson.note?.takeIf { it.isNotBlank() }\r\n            if (note != null) {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Outlined.StickyNote2,\r\n                        contentDescription = null,\r\n                        tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        modifier = Modifier.size(18.dp)\r\n                    )\r\n                    Text(\r\n                        text = note,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 2,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PaymentStatusChip(status: PaymentStatus) {\r\n    if (status == PaymentStatus.UNPAID) return\r\n    val (label, container, content) = when (status) {\r\n        PaymentStatus.PAID -> Triple(\r\n            stringResource(R.string.lesson_status_paid),\r\n            MaterialTheme.colorScheme.tertiaryContainer,\r\n            MaterialTheme.colorScheme.onTertiaryContainer\r\n        )\r\n        PaymentStatus.DUE -> Triple(\r\n            stringResource(R.string.lesson_status_due),\r\n            MaterialTheme.colorScheme.errorContainer,\r\n            MaterialTheme.colorScheme.onErrorContainer\r\n        )\r\n        PaymentStatus.CANCELLED -> Triple(\r\n            stringResource(R.string.lesson_status_cancelled),\r\n            MaterialTheme.colorScheme.surfaceVariant,\r\n            MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        else -> Triple(\r\n            stringResource(R.string.lesson_status_unpaid),\r\n            MaterialTheme.colorScheme.surfaceVariant,\r\n            MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n    Surface(\r\n        color = container,\r\n        shape = RoundedCornerShape(12.dp)\r\n    ) {\r\n        Text(\r\n            text = label,\r\n            color = content,\r\n            style = MaterialTheme.typography.labelSmall,\r\n            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonNoteSheet(\r\n    lesson: LessonForToday,\r\n    text: String,\r\n    onTextChange: (String) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: (String) -> Unit\r\n) {\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\") }\r\n    val start = remember(lesson.startAt) { lesson.startAt.atZone(zoneId).toLocalTime() }\r\n    val durationMinutes = remember(lesson.duration) { lesson.duration.toMinutes().toInt().coerceAtLeast(0) }\r\n    val subtitleParts = buildList {\r\n        add(stringResource(R.string.today_note_time, timeFormatter.format(start)))\r\n        add(stringResource(R.string.today_duration_format, durationMinutes))\r\n        lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()?.let { add(it) }\r\n    }\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 20.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(R.string.today_note_title, lesson.studentName),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Text(\r\n            text = subtitleParts.joinToString(separator = \" • \"),\r\n            style = MaterialTheme.typography.bodyMedium,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        OutlinedTextField(\r\n            value = text,\r\n            onValueChange = onTextChange,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(160.dp),\r\n            placeholder = { Text(stringResource(R.string.today_note_placeholder)) }\r\n        )\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            TextButton(onClick = onCancel, modifier = Modifier.weight(1f)) {\r\n                Text(text = stringResource(R.string.today_note_cancel))\r\n            }\r\n            Button(onClick = { onSave(text) }, modifier = Modifier.weight(1f)) {\r\n                Text(text = stringResource(R.string.today_note_save))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TodayTopBar(state: TodayUiState) {\r\n    TopAppBar(\r\n        title = { Text(text = stringResource(R.string.today_title)) },\r\n        actions = {\r\n            if (state is TodayUiState.Content) {\r\n                if (state.isAllMarked) {\r\n                    Row(\r\n                        verticalAlignment = Alignment.CenterVertically,\r\n                        horizontalArrangement = Arrangement.spacedBy(4.dp),\r\n                        modifier = Modifier.padding(end = 16.dp)\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = Icons.Filled.DoneAll,\r\n                            contentDescription = null,\r\n                            tint = MaterialTheme.colorScheme.primary\r\n                        )\r\n                        Text(\r\n                            text = stringResource(R.string.today_all_marked),\r\n                            style = MaterialTheme.typography.bodyMedium,\r\n                            color = MaterialTheme.colorScheme.primary\r\n                        )\r\n                    }\r\n                } else {\r\n                    AssistChip(\r\n                        onClick = {},\r\n                        label = {\r\n                            Text(text = stringResource(R.string.today_remaining_count, state.remainingCount))\r\n                        },\r\n                        colors = AssistChipDefaults.assistChipColors(\r\n                            containerColor = MaterialTheme.colorScheme.surfaceVariant,\r\n                            labelColor = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        colors = TopAppBarDefaults.topAppBarColors(\r\n            containerColor = MaterialTheme.colorScheme.surface,\r\n            titleContentColor = MaterialTheme.colorScheme.onSurface\r\n        )\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun rememberCurrencyFormatter(): NumberFormat {\r\n    return remember {\r\n        NumberFormat.getCurrencyInstance(Locale.getDefault()).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(revision 0538a7b02020c12711fefd7a580f8051dd5878be)
-+++ b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(date 1760128802629)
-@@ -491,6 +491,7 @@
-     }
- }
- 
-+@OptIn(ExperimentalMaterial3Api::class)
- @Composable
- private fun TodayTopBar(state: TodayUiState) {
-     TopAppBar(
-Index: gradle/libs.versions.toml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>[versions]\r\nagp = \"8.13.0\"\r\nkotlin = \"2.0.21\"\r\ncoreKtx = \"1.17.0\"\r\njunit = \"4.13.2\"\r\njunitVersion = \"1.3.0\"\r\nespressoCore = \"3.7.0\"\r\nlifecycleRuntimeKtx = \"2.9.4\"\r\nactivityCompose = \"1.11.0\"\r\ncomposeBom = \"2025.09.01\"\r\nnavigation = \"2.9.5\"\r\nlifecycle = \"2.9.4\"\r\ncoroutines = \"1.10.2\"\r\nsplashscreen = \"1.0.1\"\r\ndesugar = \"2.1.5\"\r\nroom = \"2.8.1\"\r\nhilt = \"2.57.2\"\r\nhilt-navigation-compose = \"1.3.0\"\r\nkotlinx-metadata-jvm = \"0.9.0\"\r\n\r\n\r\n[libraries]\r\nkotlinx-metadata-jvm = { module = \"org.jetbrains.kotlinx:kotlinx-metadata-jvm\", version.ref = \"kotlinx-metadata-jvm\" }\r\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\r\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\r\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\r\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\r\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\r\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\r\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\r\nandroidx-compose-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\r\nandroidx-compose-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\r\nandroidx-compose-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\r\nandroidx-compose-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\r\nandroidx-compose-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\r\nandroidx-compose-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\r\nandroidx-compose-foundation = { group = \"androidx.compose.foundation\", name = \"foundation\" }\r\nandroidx-compose-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\r\nandroidx-navigation-compose = { module = \"androidx.navigation:navigation-compose\", version.ref = \"navigation\" }\r\nkotlinx-coroutines-android = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-android\", version.ref = \"coroutines\" }\r\nkotlinx-coroutines-core = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-core\", version.ref = \"coroutines\" }\r\nandroidx-lifecycle-viewmodel-compose = { module = \"androidx.lifecycle:lifecycle-viewmodel-compose\", version.ref = \"lifecycle\" }\r\nandroidx-compose-material-icons-extended = { module = \"androidx.compose.material:material-icons-extended\" }\r\nandroidx-core-splashscreen = { module = \"androidx.core:core-splashscreen\", version.ref = \"splashscreen\" }\r\ndesugar-jdk-libs = { module = \"com.android.tools:desugar_jdk_libs\", version.ref = \"desugar\" }\r\nroom-runtime = { module = \"androidx.room:room-runtime\", version.ref = \"room\" }\r\nroom-ktx = { module = \"androidx.room:room-ktx\", version.ref = \"room\" }\r\nroom-compiler = { module = \"androidx.room:room-compiler\", version.ref = \"room\" }\r\nhilt-android = { module = \"com.google.dagger:hilt-android\", version.ref = \"hilt\" }\r\nhilt-compiler = { module = \"com.google.dagger:hilt-compiler\", version.ref = \"hilt\" }\r\nhilt-navigation-compose = {module = \"androidx.hilt:hilt-navigation-compose\", version.ref = \"hilt-navigation-compose\"}\r\n\r\n\r\n[plugins]\r\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\r\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\r\nkotlin-compose = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\r\nksp = { id = \"com.google.devtools.ksp\", version = \"2.0.21-1.0.27\" }\r\nhilt = { id = \"com.google.dagger.hilt.android\", version.ref = \"hilt\" }\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
---- a/gradle/libs.versions.toml	(revision 0538a7b02020c12711fefd7a580f8051dd5878be)
-+++ b/gradle/libs.versions.toml	(date 1760128037681)
-@@ -17,6 +17,7 @@
- hilt = "2.57.2"
- hilt-navigation-compose = "1.3.0"
- kotlinx-metadata-jvm = "0.9.0"
-+foundation = "1.9.3"
- 
- 
- [libraries]
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 0538a7b02020c12711fefd7a580f8051dd5878be)
-+++ b/.idea/misc.xml	(date 1760128037848)
-@@ -1,4 +1,5 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK" />
- </project>
-\ No newline at end of file
-Index: gradle.properties
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. For more details, visit\r\n# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app's APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Kotlin code style for this project: \"official\" or \"obsolete\":\r\nkotlin.code.style=official\r\n# Enables namespacing of each library's R class so that its R class includes only the\r\n# resources declared in the library itself and none from the library's dependencies,\r\n# thereby reducing the size of the R class for that library\r\nandroid.nonTransitiveRClass=true\r\norg.gradle.java.home=C\\:\\\\Users\\\\Syrok\\\\.jdks\\\\ms-17.0.16\r\n\r\ndagger.hilt.android.plugin.disableAggregatingTask=true\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>ISO-8859-1
-===================================================================
-diff --git a/gradle.properties b/gradle.properties
---- a/gradle.properties	(revision 0538a7b02020c12711fefd7a580f8051dd5878be)
-+++ b/gradle.properties	(date 1760128037896)
-@@ -21,7 +21,7 @@
- # resources declared in the library itself and none from the library's dependencies,
- # thereby reducing the size of the R class for that library
- android.nonTransitiveRClass=true
--org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
-+#org.gradle.java.home=C\:\\Users\\Syrok\\.jdks\\ms-17.0.16
- 
- dagger.hilt.android.plugin.disableAggregatingTask=true
- 
-Index: .idea/compiler.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/compiler.xml b/.idea/compiler.xml
-new file mode 100644
---- /dev/null	(date 1760128037810)
-+++ b/.idea/compiler.xml	(date 1760128037810)
-@@ -0,0 +1,6 @@
-+<?xml version="1.0" encoding="UTF-8"?>
-+<project version="4">
-+  <component name="CompilerConfiguration">
-+    <bytecodeTargetLevel target="21" />
-+  </component>
-+</project>
-\ No newline at end of file
-Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.imePadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Add,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onRateChange = vm::onEditorRateChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .imePadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            modifier = Modifier\r\n                .weight(1f, fill = false)\r\n                .fillMaxWidth(),\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_editor_save)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val rate = item.profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n    val subtitle = listOfNotNull(subject, grade, rate)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onClose = onClose,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    onClose = onClose\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = profile.subject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        Row(horizontalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            IconButton(onClick = onClose) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_profile_close)\r\n                )\r\n            }\r\n            IconButton(onClick = { onEdit(profile.student.id) }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Edit,\r\n                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        0 -> stringResource(id = R.string.students_rate_label_generic)\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision 0538a7b02020c12711fefd7a580f8051dd5878be)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760128037916)
-@@ -829,10 +829,10 @@
-                     }
-                 } else {
-                     null
--                }
--            }
-+                    }
-+            )}
-         }
--    }
-+
- }
- 
- @Composable
-Index: .idea/.name
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/.name b/.idea/.name
-new file mode 100644
---- /dev/null	(date 1760128037888)
-+++ b/.idea/.name	(date 1760128037888)
-@@ -0,0 +1,1 @@
-+Tutorly
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_10_2025_14_31_[Changes]" date="1760095878011" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.10.2025 14:31 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_10_2025_23_43_[Changes]" date="1760128991331" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_23_43_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.10.2025 23:43 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_09_10_2025_17_20_[Changes]" date="1760019644458" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_17_20_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 09.10.2025 17:20 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,35 +0,0 @@
-Index: app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.lessoncard\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Schedule\r\nimport androidx.compose.material.icons.filled.Warning\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.PaymentStatusIcon\r\nimport com.tutorly.models.PaymentStatus\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.ZonedDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Locale\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\ninternal fun LessonCardSheet(\r\n    state: LessonCardUiState,\r\n    zoneId: ZoneId,\r\n    onDismissRequest: () -> Unit,\r\n    onCancelDismiss: () -> Unit,\r\n    onConfirmDismiss: () -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSaveNote: () -> Unit,\r\n    onMarkPaid: () -> Unit,\r\n    onRequestMarkDue: () -> Unit,\r\n    onDismissMarkDue: () -> Unit,\r\n    onConfirmMarkDue: () -> Unit,\r\n    onRequestEdit: () -> Unit,\r\n    onSnackbarConsumed: () -> Unit,\r\n) {\r\n    if (!state.isVisible) {\r\n        return\r\n    }\r\n\r\n    val scope = rememberCoroutineScope()\r\n    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n\r\n    val snackbarText = state.snackbarMessage?.let { message ->\r\n        when (message) {\r\n            LessonCardMessage.NoteSaved -> stringResource(R.string.lesson_card_snackbar_note_saved)\r\n            is LessonCardMessage.PaymentMarked -> when (message.status) {\r\n                PaymentStatus.PAID -> stringResource(R.string.lesson_card_snackbar_paid)\r\n                PaymentStatus.DUE, PaymentStatus.UNPAID -> stringResource(R.string.lesson_card_snackbar_due)\r\n                PaymentStatus.CANCELLED -> stringResource(R.string.lesson_card_snackbar_due)\r\n            }\r\n            is LessonCardMessage.Error -> stringResource(R.string.lesson_card_snackbar_error)\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(snackbarText) {\r\n        snackbarText?.let {\r\n            snackbarHostState.showSnackbar(it)\r\n            onSnackbarConsumed()\r\n        }\r\n    }\r\n\r\n    ModalBottomSheet(\r\n        onDismissRequest = {\r\n            if (state.isNoteDirty) {\r\n                scope.launch { sheetState.show() }\r\n                onDismissRequest()\r\n            } else {\r\n                onDismissRequest()\r\n            }\r\n        },\r\n        sheetState = sheetState,\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        tonalElevation = 8.dp,\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 12.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .verticalScroll(rememberScrollState()),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp)\r\n            ) {\r\n                if (state.isLoading) {\r\n                    LinearProgressIndicator(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(bottom = 4.dp)\r\n                    )\r\n                }\r\n                LessonHeader(state = state, onClose = onDismissRequest)\r\n                LessonMetadataBlock(state = state, zoneId = zoneId)\r\n                LessonPaymentBlock(state = state, onMarkPaid = onMarkPaid, onRequestMarkDue = onRequestMarkDue)\r\n                LessonNoteBlock(\r\n                    state = state,\r\n                    onNoteChange = onNoteChange,\r\n                    onSaveNote = onSaveNote\r\n                )\r\n                OutlinedButton(\r\n                    onClick = onRequestEdit,\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    enabled = state.details != null\r\n                ) {\r\n                    Icon(imageVector = Icons.Default.Edit, contentDescription = null)\r\n                    Spacer(modifier = Modifier.width(8.dp))\r\n                    Text(text = stringResource(R.string.lesson_card_edit))\r\n                }\r\n                Spacer(modifier = Modifier.height(12.dp))\r\n            }\r\n            SnackbarHost(\r\n                hostState = snackbarHostState,\r\n                modifier = Modifier\r\n                    .align(Alignment.BottomCenter)\r\n                    .padding(bottom = 8.dp)\r\n            )\r\n        }\r\n    }\r\n\r\n    if (state.showUnsavedExitDialog) {\r\n        AlertDialog(\r\n            onDismissRequest = onCancelDismiss,\r\n            title = { Text(stringResource(R.string.lesson_card_unsaved_title)) },\r\n            text = { Text(stringResource(R.string.lesson_card_unsaved_message)) },\r\n            confirmButton = {\r\n                TextButton(onClick = onConfirmDismiss) {\r\n                    Text(stringResource(R.string.lesson_card_unsaved_discard))\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(onClick = onCancelDismiss) {\r\n                    Text(stringResource(R.string.lesson_card_unsaved_keep))\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (state.showMarkDueDialog) {\r\n        AlertDialog(\r\n            onDismissRequest = onDismissMarkDue,\r\n            title = { Text(stringResource(R.string.lesson_card_mark_due_title)) },\r\n            text = { Text(stringResource(R.string.lesson_card_mark_due_message)) },\r\n            confirmButton = {\r\n                TextButton(onClick = onConfirmMarkDue) {\r\n                    Text(stringResource(R.string.lesson_card_mark_due_confirm))\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(onClick = onDismissMarkDue) {\r\n                    Text(stringResource(R.string.lesson_card_mark_due_cancel))\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonHeader(state: LessonCardUiState, onClose: () -> Unit) {\r\n    val details = state.details\r\n    Row(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        val name = details?.studentName.orEmpty()\r\n        val initials = remember(name) {\r\n            name.split(\" \").filter { it.isNotBlank() }.take(2).map { it.first().uppercase() }.joinToString(\"\")\r\n        }\r\n        Surface(\r\n            modifier = Modifier\r\n                .sizeAvatar()\r\n                .clip(CircleShape),\r\n            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f)\r\n        ) {\r\n            Box(contentAlignment = Alignment.Center) {\r\n                Text(\r\n                    text = initials.ifBlank { \"?\" },\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.SemiBold,\r\n                    color = MaterialTheme.colorScheme.primary\r\n                )\r\n            }\r\n        }\r\n        Spacer(modifier = Modifier.width(16.dp))\r\n        Column(modifier = Modifier.weight(1f)) {\r\n            Text(\r\n                text = name.ifBlank { stringResource(R.string.lesson_card_student_placeholder) },\r\n                style = MaterialTheme.typography.titleLarge,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            details?.lessonTitle?.takeIf { it.isNotBlank() }?.let { title ->\r\n                Text(\r\n                    text = title,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n        }\r\n        IconButton(onClick = onClose) {\r\n            Icon(imageVector = Icons.Default.Close, contentDescription = stringResource(R.string.lesson_card_close))\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonMetadataBlock(state: LessonCardUiState, zoneId: ZoneId) {\r\n    val details = state.details ?: return\r\n    val locale = remember { Locale.getDefault() }\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val durationMinutes = remember(details.duration) { details.duration.toMinutes().toInt().coerceAtLeast(0) }\r\n    val start = remember(details.startAt, zoneId) { ZonedDateTime.ofInstant(details.startAt, zoneId) }\r\n    val end = remember(details.endAt, zoneId) { ZonedDateTime.ofInstant(details.endAt, zoneId) }\r\n\r\n    val subject = details.subjectName?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(R.string.lesson_card_subject_placeholder)\r\n\r\n    Card(\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)\r\n    ) {\r\n        Column(modifier = Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n            Text(text = subject, style = MaterialTheme.typography.titleMedium)\r\n            Row(horizontalArrangement = Arrangement.spacedBy(12.dp), modifier = Modifier.fillMaxWidth()) {\r\n                InfoCell(\r\n                    label = stringResource(R.string.lesson_card_time_label),\r\n                    value = stringResource(\r\n                        R.string.lesson_card_time_value,\r\n                        dateFormatter.format(start),\r\n                        timeFormatter.format(start),\r\n                        timeFormatter.format(end)\r\n                    ),\r\n                    leadingIcon = Icons.Default.Schedule\r\n                )\r\n                InfoCell(\r\n                    label = stringResource(R.string.lesson_card_duration_label),\r\n                    value = stringResource(R.string.lesson_card_duration_value, durationMinutes),\r\n                    leadingIcon = null\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonPaymentBlock(\r\n    state: LessonCardUiState,\r\n    onMarkPaid: () -> Unit,\r\n    onRequestMarkDue: () -> Unit,\r\n) {\r\n    val details = state.details ?: return\r\n    val locale = remember { Locale.getDefault() }\r\n    val currencyFormatter = remember(locale) { NumberFormat.getCurrencyInstance(locale) }\r\n    val amount = remember(details.priceCents) { currencyFormatter.format(details.priceCents / 100.0) }\r\n    val statusChip = remember(details.paymentStatus) { paymentStatusChip(details.paymentStatus) }\r\n\r\n    Card { \r\n        Column(\r\n            modifier = Modifier.padding(16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Column(modifier = Modifier.weight(1f)) {\r\n                    Text(text = stringResource(R.string.lesson_card_price_label), style = MaterialTheme.typography.labelMedium)\r\n                    Text(text = amount, style = MaterialTheme.typography.titleLarge)\r\n                }\r\n                StatusChip(statusChip)\r\n            }\r\n            val isPaid = details.paymentStatus == PaymentStatus.PAID\r\n            val actionLabel = if (isPaid) {\r\n                stringResource(R.string.lesson_card_mark_due)\r\n            } else {\r\n                stringResource(R.string.lesson_card_mark_paid)\r\n            }\r\n            val onClick = if (isPaid) onRequestMarkDue else onMarkPaid\r\n            val enabled = !state.isPaymentActionRunning && details.paymentStatus != PaymentStatus.CANCELLED\r\n            Button(\r\n                onClick = onClick,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                enabled = enabled\r\n            ) {\r\n                if (state.isPaymentActionRunning) {\r\n                    CircularProgressIndicator(modifier = Modifier.size(18.dp), strokeWidth = 2.dp)\r\n                } else {\r\n                    Text(actionLabel)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonNoteBlock(\r\n    state: LessonCardUiState,\r\n    onNoteChange: (String) -> Unit,\r\n    onSaveNote: () -> Unit,\r\n) {\r\n    if (state.details == null) return\r\n    Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n        OutlinedTextField(\r\n            value = state.noteDraft,\r\n            onValueChange = onNoteChange,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            label = { Text(stringResource(R.string.lesson_card_note_label)) },\r\n            placeholder = { Text(stringResource(R.string.lesson_card_note_placeholder)) },\r\n            supportingText = {\r\n                Text(\r\n                    stringResource(\r\n                        R.string.lesson_card_note_counter,\r\n                        state.noteDraft.length,\r\n                        LESSON_CARD_NOTE_LIMIT\r\n                    )\r\n                )\r\n            },\r\n            maxLines = 4,\r\n            shape = RoundedCornerShape(12.dp)\r\n        )\r\n        Button(\r\n            onClick = onSaveNote,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            enabled = state.isNoteDirty && !state.isSavingNote\r\n        ) {\r\n            if (state.isSavingNote) {\r\n                CircularProgressIndicator(modifier = Modifier.size(18.dp), strokeWidth = 2.dp)\r\n            } else {\r\n                Text(stringResource(R.string.lesson_card_note_save))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate data class PaymentStatusChip(\r\n    val labelRes: Int,\r\n    val icon: PaymentStatusIcon?,\r\n    val background: Color,\r\n    val foreground: Color,\r\n)\r\n\r\n@Composable\r\nprivate fun paymentStatusChip(status: PaymentStatus): PaymentStatusChip {\r\n    val (label, background, foreground) = when (status) {\r\n        PaymentStatus.PAID -> Triple(\r\n            R.string.lesson_status_paid,\r\n            MaterialTheme.colorScheme.tertiary.copy(alpha = 0.1f),\r\n            MaterialTheme.colorScheme.tertiary\r\n        )\r\n        PaymentStatus.DUE, PaymentStatus.UNPAID -> Triple(\r\n            R.string.lesson_status_due,\r\n            MaterialTheme.colorScheme.error.copy(alpha = 0.1f),\r\n            MaterialTheme.colorScheme.error\r\n        )\r\n        PaymentStatus.CANCELLED -> Triple(\r\n            R.string.lesson_status_cancelled,\r\n            MaterialTheme.colorScheme.surfaceVariant,\r\n            MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n    val icon = when (status) {\r\n        PaymentStatus.PAID -> PaymentStatusIcon.PAID\r\n        PaymentStatus.DUE, PaymentStatus.UNPAID -> PaymentStatusIcon.OUTSTANDING\r\n        PaymentStatus.CANCELLED -> PaymentStatusIcon.CANCELLED\r\n    }\r\n    return PaymentStatusChip(label, icon, background, foreground)\r\n}\r\n\r\n@Composable\r\nprivate fun StatusChip(chip: PaymentStatusChip) {\r\n    Surface(color = chip.background, contentColor = chip.foreground, shape = RoundedCornerShape(12.dp)) {\r\n        Row(\r\n            modifier = Modifier.padding(horizontal = 10.dp, vertical = 6.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            when (chip.icon) {\r\n                PaymentStatusIcon.PAID -> Icon(imageVector = Icons.Default.Check, contentDescription = null, modifier = Modifier.size(16.dp))\r\n                PaymentStatusIcon.OUTSTANDING -> Icon(imageVector = Icons.Default.Warning, contentDescription = null, modifier = Modifier.size(16.dp))\r\n                PaymentStatusIcon.CANCELLED -> Icon(imageVector = Icons.Default.Close, contentDescription = null, modifier = Modifier.size(16.dp))\r\n            }\r\n            Text(text = stringResource(chip.labelRes), style = MaterialTheme.typography.labelMedium)\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun InfoCell(label: String, value: String, leadingIcon: androidx.compose.ui.graphics.vector.ImageVector?) {\r\n    Surface(\r\n        modifier = Modifier.weight(1f),\r\n        color = MaterialTheme.colorScheme.surface,\r\n        tonalElevation = 1.dp,\r\n        shadowElevation = 0.dp,\r\n        shape = RoundedCornerShape(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.padding(16.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            leadingIcon?.let { icon ->\r\n                Surface(\r\n                    modifier = Modifier\r\n                        .size(32.dp)\r\n                        .clip(CircleShape),\r\n                    color = MaterialTheme.colorScheme.primary.copy(alpha = 0.08f)\r\n                ) {\r\n                    Box(contentAlignment = Alignment.Center) {\r\n                        Icon(imageVector = icon, contentDescription = null, tint = MaterialTheme.colorScheme.primary)\r\n                    }\r\n                }\r\n            }\r\n            Column(modifier = Modifier.weight(1f)) {\r\n                Text(text = label, style = MaterialTheme.typography.labelMedium, color = MaterialTheme.colorScheme.onSurfaceVariant)\r\n                Text(text = value, style = MaterialTheme.typography.bodyMedium)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun Modifier.sizeAvatar(): Modifier = this.then(Modifier.size(48.dp))\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt b/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt
---- a/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt	(revision eccb1ffbdf2af45f36720446da172fc4587e145f)
-+++ b/app/src/main/java/com/tutorly/ui/lessoncard/LessonCardSheet.kt	(date 1760036322765)
-@@ -9,6 +9,7 @@
- import androidx.compose.foundation.layout.height
- import androidx.compose.foundation.layout.padding
- import androidx.compose.foundation.layout.size
-+import androidx.compose.foundation.layout.width
- import androidx.compose.foundation.rememberScrollState
- import androidx.compose.foundation.shape.CircleShape
- import androidx.compose.foundation.shape.RoundedCornerShape
-@@ -46,6 +47,7 @@
- import androidx.compose.ui.Modifier
- import androidx.compose.ui.draw.clip
- import androidx.compose.ui.graphics.Color
-+import androidx.compose.ui.graphics.vector.ImageVector
- import androidx.compose.ui.res.stringResource
- import androidx.compose.ui.text.font.FontWeight
- import androidx.compose.ui.text.style.TextOverflow
-@@ -432,7 +434,7 @@
- }
- 
- @Composable
--private fun InfoCell(label: String, value: String, leadingIcon: androidx.compose.ui.graphics.vector.ImageVector?) {
-+private fun InfoCell(label: String, value: String, leadingIcon: ImageVector?) {
-     Surface(
-         modifier = Modifier.weight(1f),
-         color = MaterialTheme.colorScheme.surface,
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_10_2025_13_46_[Changes]" date="1760093176774" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_13_46_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10.10.2025 13:46 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02__Changes_.xml	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_09_10_2025_22_02_[Changes]" date="1760036552637" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_09_10_2025_22_02_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 09.10.2025 22:02 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_10_2025_14_31_[Changes]/shelved.patch	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
+++ /dev/null	(revision 8010aae945183286cd53ce13039edaef8e18ee93)
@@ -1,24 +0,0 @@
-Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Add\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExtendedFloatingActionButton\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.compose.material3.BottomSheetDefaults\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.domain.model.StudentProfileLessonRate\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport kotlinx.coroutines.launch\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.collections.buildList\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val profileUiState by vm.profileUiState.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    val editorSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val profileSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n    var pendingProfileId by remember { mutableStateOf<Long?>(null) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        pendingProfileId = null\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            pendingProfileId = null\r\n            vm.startStudentCreation()\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    } else {\r\n                        pendingProfileId?.let { vm.openStudentProfile(it) }\r\n                    }\r\n                    pendingProfileId = null\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = MaterialTheme.colorScheme.surface,\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.colorScheme.primary,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Add,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(Modifier.fillMaxSize())\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { vm.openStudentProfile(item.student.id) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = {\r\n                if (!formState.isSaving) {\r\n                    pendingProfileId = null\r\n                    closeEditor()\r\n                }\r\n            },\r\n            sheetState = editorSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentEditorSheet(\r\n                state = formState,\r\n                onNameChange = vm::onEditorNameChange,\r\n                onPhoneChange = vm::onEditorPhoneChange,\r\n                onMessengerChange = vm::onEditorMessengerChange,\r\n                onRateChange = vm::onEditorRateChange,\r\n                onSubjectChange = vm::onEditorSubjectChange,\r\n                onGradeChange = vm::onEditorGradeChange,\r\n                onNoteChange = vm::onEditorNoteChange,\r\n                onArchivedChange = vm::onEditorArchivedChange,\r\n                onActiveChange = vm::onEditorActiveChange,\r\n                onCancel = {\r\n                    if (!formState.isSaving) {\r\n                        pendingProfileId = null\r\n                        closeEditor()\r\n                    }\r\n                },\r\n                onSave = handleSave\r\n            )\r\n        }\r\n    }\r\n\r\n    if (profileUiState !is StudentProfileUiState.Hidden) {\r\n        ModalBottomSheet(\r\n            onDismissRequest = vm::clearSelectedStudent,\r\n            sheetState = profileSheetState,\r\n            dragHandle = { BottomSheetDefaults.DragHandle() }\r\n        ) {\r\n            StudentProfileSheet(\r\n                state = profileUiState,\r\n                onClose = vm::clearSelectedStudent,\r\n                onEdit = { studentId ->\r\n                    val profileStudent = (profileUiState as? StudentProfileUiState.Content)?.profile?.student\r\n                    if (profileStudent != null && profileStudent.id == studentId) {\r\n                        vm.clearSelectedStudent()\r\n                        editorOrigin = StudentEditorOrigin.STUDENTS\r\n                        pendingProfileId = studentId\r\n                        vm.startStudentEdit(profileStudent)\r\n                        showEditor = true\r\n                    } else {\r\n                        vm.clearSelectedStudent()\r\n                        onStudentEdit(studentId)\r\n                    }\r\n                },\r\n                onAddLesson = { studentId ->\r\n                    vm.clearSelectedStudent()\r\n                    onAddLesson(studentId)\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onArchivedChange: (Boolean) -> Unit,\r\n    onActiveChange: (Boolean) -> Unit,\r\n    onCancel: () -> Unit,\r\n    onSave: () -> Unit,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .navigationBarsPadding()\r\n            .padding(horizontal = 24.dp, vertical = 16.dp),\r\n        verticalArrangement = Arrangement.spacedBy(20.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Text(\r\n                text = stringResource(\r\n                    id = if (isEditing) R.string.student_editor_edit_title else R.string.add_student\r\n                ),\r\n                style = MaterialTheme.typography.titleLarge\r\n            )\r\n            IconButton(onClick = onCancel, enabled = !state.isSaving) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_editor_close)\r\n                )\r\n            }\r\n        }\r\n\r\n        StudentEditorForm(\r\n            state = state,\r\n            onNameChange = onNameChange,\r\n            onPhoneChange = onPhoneChange,\r\n            onMessengerChange = onMessengerChange,\r\n            onRateChange = onRateChange,\r\n            onSubjectChange = onSubjectChange,\r\n            onGradeChange = onGradeChange,\r\n            onNoteChange = onNoteChange,\r\n            onArchivedChange = onArchivedChange,\r\n            onActiveChange = onActiveChange,\r\n            focusOnStart = true,\r\n            enabled = !state.isSaving,\r\n            onSubmit = onSave\r\n        )\r\n\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            OutlinedButton(\r\n                onClick = onCancel,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving\r\n            ) {\r\n                Text(text = stringResource(id = R.string.student_editor_cancel))\r\n            }\r\n\r\n            Button(\r\n                onClick = onSave,\r\n                modifier = Modifier.weight(1f),\r\n                enabled = !state.isSaving && state.name.isNotBlank()\r\n            ) {\r\n                if (state.isSaving) {\r\n                    CircularProgressIndicator(\r\n                        modifier = Modifier.size(20.dp),\r\n                        strokeWidth = 2.dp\r\n                    )\r\n                } else {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_editor_save)\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(id = R.string.students_empty_state),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val rate = item.profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n    val subtitle = listOfNotNull(subject, grade, rate)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val phone = item.student.phone?.takeIf { it.isNotBlank() }?.trim()\r\n    val email = item.student.messenger?.takeIf { it.isNotBlank() }?.trim()\r\n    val showTrailingRow = phone != null || email != null || item.hasDebt\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outlineVariant),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            StudentAvatar(name = item.student.name, size = 48.dp)\r\n            Spacer(Modifier.width(12.dp))\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(4.dp)\r\n            ) {\r\n                Text(\r\n                    text = item.student.name,\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    fontWeight = FontWeight.Medium,\r\n                    maxLines = 1,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n                subtitle?.let {\r\n                    Text(\r\n                        text = it,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n                if (showTrailingRow) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(top = 4.dp),\r\n                        horizontalArrangement = Arrangement.End,\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        if (phone != null) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Phone,\r\n                                contentDescription = phone,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (email != null) {\r\n                            if (phone != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Email,\r\n                                contentDescription = email,\r\n                                tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                                modifier = Modifier.size(18.dp)\r\n                            )\r\n                        }\r\n                        if (item.hasDebt) {\r\n                            if (phone != null || email != null) {\r\n                                Spacer(Modifier.width(12.dp))\r\n                            }\r\n                            PaymentBadge(paid = false)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentProfileSheet(\r\n    state: StudentProfileUiState,\r\n    onClose: () -> Unit,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onCall: ((String) -> Unit)? = null,\r\n    onMessage: ((String) -> Unit)? = null,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    when (state) {\r\n        StudentProfileUiState.Hidden -> Unit\r\n        StudentProfileUiState.Loading -> {\r\n            Box(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(vertical = 48.dp),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                CircularProgressIndicator()\r\n            }\r\n        }\r\n\r\n        StudentProfileUiState.Error -> {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 24.dp, vertical = 32.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_profile_error),\r\n                    style = MaterialTheme.typography.bodyLarge,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(onClick = onClose) {\r\n                    Text(text = stringResource(id = R.string.student_editor_close))\r\n                }\r\n            }\r\n        }\r\n\r\n        is StudentProfileUiState.Content -> {\r\n            StudentProfileContent(\r\n                profile = state.profile,\r\n                onEdit = onEdit,\r\n                onAddLesson = onAddLesson,\r\n                onClose = onClose,\r\n                onCall = onCall,\r\n                onMessage = onMessage,\r\n                modifier = modifier\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val currencyFormatter = remember {\r\n        NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val dateFormatter = remember { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", Locale.getDefault()) }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\", Locale.getDefault()) }\r\n\r\n    Box(modifier = modifier.fillMaxWidth()) {\r\n        LazyColumn(\r\n            state = listState,\r\n            modifier = Modifier.fillMaxWidth(),\r\n            contentPadding = PaddingValues(start = 20.dp, end = 20.dp, top = 16.dp, bottom = 140.dp),\r\n            verticalArrangement = Arrangement.spacedBy(20.dp)\r\n        ) {\r\n            item {\r\n                StudentProfileHeader(\r\n                    profile = profile,\r\n                    onEdit = onEdit,\r\n                    onClose = onClose\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileContacts(\r\n                    profile = profile,\r\n                    onCall = onCall,\r\n                    onMessage = onMessage\r\n                )\r\n            }\r\n            item {\r\n                StudentProfileMetricsSection(\r\n                    profile = profile,\r\n                    currencyFormatter = currencyFormatter\r\n                )\r\n            }\r\n            item {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n            if (profile.recentLessons.isEmpty()) {\r\n                item {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                }\r\n            } else {\r\n                items(profile.recentLessons, key = { it.id }) { lesson ->\r\n                    StudentProfileLessonCard(\r\n                        lesson = lesson,\r\n                        fallbackSubject = profile.subject,\r\n                        currencyFormatter = currencyFormatter,\r\n                        zoneId = zoneId,\r\n                        dateFormatter = dateFormatter,\r\n                        timeFormatter = timeFormatter\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        ExtendedFloatingActionButton(\r\n            onClick = { onAddLesson(profile.student.id) },\r\n            icon = { Icon(imageVector = Icons.Filled.Add, contentDescription = null) },\r\n            text = { Text(text = stringResource(id = R.string.student_details_create_lesson)) },\r\n            modifier = Modifier\r\n                .align(Alignment.BottomEnd)\r\n                .padding(horizontal = 20.dp, vertical = 16.dp)\r\n                .navigationBarsPadding()\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (Long) -> Unit,\r\n    onClose: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        StudentAvatar(name = profile.student.name, size = 64.dp)\r\n        Column(\r\n            modifier = Modifier.weight(1f),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = profile.student.name,\r\n                style = MaterialTheme.typography.headlineSmall,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_subject_placeholder)\r\n            val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                ?: stringResource(id = R.string.students_grade_placeholder)\r\n            Text(\r\n                text = stringResource(id = R.string.students_subject_label) + \": \" + subject,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.students_grade_label) + \": \" + grade,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n        Row(horizontalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            IconButton(onClick = onClose) {\r\n                Icon(\r\n                    imageVector = Icons.Default.Close,\r\n                    contentDescription = stringResource(id = R.string.student_profile_close)\r\n                )\r\n            }\r\n            IconButton(onClick = { onEdit(profile.student.id) }) {\r\n                Icon(\r\n                    imageVector = Icons.Filled.Edit,\r\n                    contentDescription = stringResource(id = R.string.student_details_edit)\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileContacts(\r\n    profile: StudentProfile,\r\n    onCall: ((String) -> Unit)?,\r\n    onMessage: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_details_contact_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Phone,\r\n            label = stringResource(id = R.string.student_profile_contact_call),\r\n            value = profile.student.phone,\r\n            onClick = onCall\r\n        )\r\n        ProfileContactRow(\r\n            icon = Icons.Outlined.Email,\r\n            label = stringResource(id = R.string.student_profile_contact_message),\r\n            value = profile.student.messenger,\r\n            onClick = onMessage\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: androidx.compose.ui.graphics.vector.ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: ((String) -> Unit)?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n    val background = if (hasValue) {\r\n        MaterialTheme.colorScheme.surfaceVariant\r\n    } else {\r\n        MaterialTheme.colorScheme.surfaceContainerHighest\r\n    }\r\n    val contentColor = if (hasValue) {\r\n        MaterialTheme.colorScheme.onSurface\r\n    } else {\r\n        MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clip(MaterialTheme.shapes.large)\r\n            .background(background)\r\n            .clickable(enabled = hasValue && onClick != null) {\r\n                value?.let { onClick?.invoke(it) }\r\n            }\r\n            .padding(horizontal = 16.dp, vertical = 14.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = if (hasValue) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = contentColor,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    currencyFormatter: NumberFormat,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val metrics = profile.metrics\r\n    val totalLessons = metrics.totalLessons.toString()\r\n    val totalPaid = formatCurrency(metrics.totalPaidCents, currencyFormatter)\r\n    val averageRate = metrics.averagePriceCents?.let { formatCurrency(it.toLong(), currencyFormatter) }\r\n        ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val debtText = if (metrics.outstandingCents > 0) {\r\n        formatCurrency(metrics.outstandingCents, currencyFormatter)\r\n    } else {\r\n        stringResource(id = R.string.student_details_no_debt)\r\n    }\r\n    val rateLabel = profile.rate?.let { rateLabelForDuration(it) }\r\n        ?: stringResource(id = R.string.student_profile_metrics_average)\r\n    val rateValue = profile.rate?.let { formatCurrency(it.priceCents.toLong(), currencyFormatter) }\r\n        ?: averageRate\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.student_profile_metrics_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .horizontalScroll(scrollState),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_lessons),\r\n                value = totalLessons\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_paid),\r\n                value = totalPaid\r\n            )\r\n            ProfileMetricCard(\r\n                label = rateLabel,\r\n                value = rateValue\r\n            )\r\n            ProfileMetricCard(\r\n                label = stringResource(id = R.string.student_details_stats_debt),\r\n                value = debtText,\r\n                badge = if (profile.hasDebt) {\r\n                    {\r\n                        PaymentBadge(paid = false)\r\n                    }\r\n                } else {\r\n                    null\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricCard(\r\n    label: String,\r\n    value: String,\r\n    modifier: Modifier = Modifier,\r\n    badge: (@Composable () -> Unit)? = null\r\n) {\r\n    Surface(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 2.dp,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            if (badge != null) {\r\n                Row(\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    badge()\r\n                    Text(\r\n                        text = value,\r\n                        style = MaterialTheme.typography.bodyMedium\r\n                    )\r\n                }\r\n            } else {\r\n                Text(\r\n                    text = value,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerHigh\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val timeText = stringResource(\r\n        id = R.string.student_details_history_time_range,\r\n        timeFormatter.format(start),\r\n        timeFormatter.format(end),\r\n        lesson.durationMinutes\r\n    )\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = formatCurrency(lesson.priceCents.toLong(), currencyFormatter)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n\r\n    Surface(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        tonalElevation = 1.dp,\r\n        color = MaterialTheme.colorScheme.surfaceContainerLow\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(paid = isPaid)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n\r\n@Composable\r\nprivate fun rateLabelForDuration(rate: StudentProfileLessonRate): String {\r\n    return when (rate.durationMinutes) {\r\n        0 -> stringResource(id = R.string.students_rate_label_generic)\r\n        60 -> stringResource(id = R.string.students_rate_label_hour)\r\n        90 -> stringResource(id = R.string.students_rate_label_hour_half)\r\n        else -> stringResource(id = R.string.students_rate_label_custom, rate.durationMinutes)\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
---- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision d9bee3e10c6cdd0b0043553fcf54e664f8ecd2d1)
-+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1760095634426)
-@@ -824,10 +824,10 @@
-                     }
-                 } else {
-                     null
--                }
--            }
-+                    }
-+            )}
-         }
--    }
-+
- }
- 
- @Composable
