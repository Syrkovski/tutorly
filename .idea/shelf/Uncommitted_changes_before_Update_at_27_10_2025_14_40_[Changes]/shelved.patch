Index: app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.animation.AnimatedVisibilityScope\r\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\r\nimport androidx.compose.animation.SharedTransitionScope\r\nimport androidx.compose.animation.core.FastOutSlowInEasing\r\nimport androidx.compose.animation.core.tween\r\n//import androidx.compose.animation.sharedBounds\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.heightIn\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Close\r\nimport androidx.compose.material.icons.filled.PersonAdd\r\nimport androidx.compose.material.icons.filled.Search\r\nimport androidx.compose.material.icons.outlined.Archive\r\nimport androidx.compose.material.icons.outlined.CurrencyRuble\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.Unarchive\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.IconButtonDefaults\r\nimport androidx.compose.material3.LinearProgressIndicator\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.ModalBottomSheet\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.OutlinedTextFieldDefaults\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.rememberModalBottomSheetState\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.models.SubjectPreset\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport com.tutorly.ui.components.PaymentBadgeStatus\r\nimport com.tutorly.ui.components.TopBarContainer\r\nimport com.tutorly.ui.components.TutorlyBottomSheetContainer\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport kotlinx.coroutines.launch\r\n\r\n@OptIn(ExperimentalSharedTransitionApi::class)\r\n@Composable\r\nfun StudentsScreen(\r\n    onStudentEdit: (Long) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onStudentOpen: (Long) -> Unit,\r\n    onStudentCreatedFromLesson: (Long) -> Unit = {},\r\n    initialEditorOrigin: StudentEditorOrigin = StudentEditorOrigin.NONE,\r\n    initialStudentName: String = \"\",\r\n    initialStudentGrade: String = \"\",\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentsViewModel = hiltViewModel(),\r\n    sharedTransitionScope: SharedTransitionScope? = null,\r\n    animatedVisibilityScope: AnimatedVisibilityScope? = null,\r\n) {\r\n    val query by vm.query.collectAsState()\r\n    val students by vm.students.collectAsState()\r\n    val formState by vm.editorFormState.collectAsState()\r\n    val isArchiveMode by vm.isArchiveMode.collectAsState()\r\n    val subjectPresets by vm.subjectPresets.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val context = LocalContext.current\r\n    var showEditor by rememberSaveable { mutableStateOf(false) }\r\n    var editorOrigin by rememberSaveable { mutableStateOf(StudentEditorOrigin.NONE) }\r\n\r\n    val openCreationEditor: (StudentEditorOrigin) -> Unit = { origin ->\r\n        editorOrigin = origin\r\n        vm.startStudentCreation()\r\n        showEditor = true\r\n    }\r\n\r\n    LaunchedEffect(initialEditorOrigin, initialStudentName, initialStudentGrade) {\r\n        if (initialEditorOrigin != StudentEditorOrigin.NONE) {\r\n            editorOrigin = initialEditorOrigin\r\n            vm.startStudentCreation(\r\n                name = initialStudentName,\r\n                grade = initialStudentGrade\r\n            )\r\n            showEditor = true\r\n        }\r\n    }\r\n\r\n    val closeEditor = {\r\n        showEditor = false\r\n        vm.resetStudentForm()\r\n        editorOrigin = StudentEditorOrigin.NONE\r\n    }\r\n\r\n    val handleSave = {\r\n        if (!formState.isSaving) {\r\n            vm.submitStudent(\r\n                onSuccess = { id, name, isNew ->\r\n                    closeEditor()\r\n                    val message = if (isNew) {\r\n                        context.getString(R.string.student_added_message, name)\r\n                    } else {\r\n                        context.getString(R.string.student_updated_message, name)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                    if (isNew) {\r\n                        if (editorOrigin == StudentEditorOrigin.LESSON_CREATION) {\r\n                            onStudentCreatedFromLesson(id)\r\n                        }\r\n                    }\r\n                },\r\n                onError = { error ->\r\n                    val message = if (error.isNotBlank()) {\r\n                        error\r\n                    } else {\r\n                        context.getString(R.string.student_editor_save_error)\r\n                    }\r\n                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = Color.Transparent,\r\n        contentWindowInsets = WindowInsets(0, 0, 0, 0),\r\n        topBar = {\r\n            StudentsTopBar(\r\n                isArchiveMode = isArchiveMode,\r\n                onToggleArchive = vm::toggleArchiveMode\r\n            )\r\n        },\r\n        floatingActionButton = {\r\n            FloatingActionButton(\r\n                onClick = { openCreationEditor(StudentEditorOrigin.STUDENTS) },\r\n                containerColor = MaterialTheme.extendedColors.accent,\r\n                contentColor = MaterialTheme.colorScheme.onPrimary\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.Default.PersonAdd,\r\n                    contentDescription = stringResource(id = R.string.add_student)\r\n                )\r\n            }\r\n        }\r\n    ) { innerPadding ->\r\n        Column(\r\n            modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n                .padding(horizontal = 16.dp, vertical = 12.dp)\r\n        ) {\r\n            OutlinedTextField(\r\n                value = query,\r\n                onValueChange = vm::onQueryChange,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .shadow(4.dp, MaterialTheme.shapes.large, clip = false),\r\n                singleLine = true,\r\n                leadingIcon = { Icon(Icons.Default.Search, contentDescription = null) },\r\n                placeholder = { Text(text = stringResource(id = R.string.search_students_hint)) },\r\n                shape = MaterialTheme.shapes.large,\r\n                colors = OutlinedTextFieldDefaults.colors(\r\n                    focusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    unfocusedContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    disabledContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    errorContainerColor = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                    focusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.24f),\r\n                    unfocusedBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.16f),\r\n                    disabledBorderColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.12f),\r\n                    errorBorderColor = MaterialTheme.colorScheme.error\r\n                )\r\n            )\r\n\r\n            Spacer(Modifier.height(16.dp))\r\n\r\n            if (students.isEmpty()) {\r\n                EmptyStudentsState(\r\n                    isArchiveMode = isArchiveMode,\r\n                    modifier = Modifier.fillMaxSize()\r\n                )\r\n            } else {\r\n                LazyColumn(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                    contentPadding = PaddingValues(bottom = 16.dp)\r\n                ) {\r\n                    items(\r\n                        items = students,\r\n                        key = { it.student.id }\r\n                    ) { item ->\r\n                        val sharedKey = \"student-card-${item.student.id}\"\r\n                        StudentCard(\r\n                            item = item,\r\n                            onClick = { onStudentOpen(item.student.id) },\r\n                            sharedTransitionScope = sharedTransitionScope,\r\n                            animatedVisibilityScope = animatedVisibilityScope,\r\n                            sharedContentKey = sharedKey\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showEditor) {\r\n        StudentEditorSheet(\r\n            state = formState,\r\n            onNameChange = vm::onEditorNameChange,\r\n            onPhoneChange = vm::onEditorPhoneChange,\r\n            onMessengerChange = vm::onEditorMessengerChange,\r\n            onRateChange = vm::onEditorRateChange,\r\n            subjectPresets = subjectPresets,\r\n            onSubjectChange = vm::onEditorSubjectChange,\r\n            onGradeChange = vm::onEditorGradeChange,\r\n            onNoteChange = vm::onEditorNoteChange,\r\n            onSave = handleSave,\r\n            onDismiss = {\r\n                if (!formState.isSaving) {\r\n                    closeEditor()\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentsTopBar(\r\n    isArchiveMode: Boolean,\r\n    onToggleArchive: () -> Unit\r\n) {\r\n    TopBarContainer {\r\n        val titleRes = if (isArchiveMode) {\r\n            R.string.students_archive_title\r\n        } else {\r\n            R.string.students_title\r\n        }\r\n        val actionIcon = if (isArchiveMode) {\r\n            Icons.Outlined.Unarchive\r\n        } else {\r\n            Icons.Outlined.Archive\r\n        }\r\n        val contentDescription = stringResource(\r\n            id = if (isArchiveMode) {\r\n                R.string.students_archive_show_active\r\n            } else {\r\n                R.string.students_archive_show\r\n            }\r\n        )\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(80.dp)\r\n                .padding(horizontal = 16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = titleRes),\r\n                style = MaterialTheme.typography.titleLarge,\r\n                color = MaterialTheme.colorScheme.surface,\r\n                textAlign = TextAlign.Center,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis,\r\n                modifier = Modifier\r\n                    .align(Alignment.Center)\r\n                    .padding(horizontal = 72.dp)\r\n            )\r\n\r\n            IconButton(\r\n                onClick = onToggleArchive,\r\n                modifier = Modifier.align(Alignment.CenterEnd),\r\n                colors = IconButtonDefaults.iconButtonColors(\r\n                    contentColor = MaterialTheme.colorScheme.surface\r\n                )\r\n            ) {\r\n                Icon(\r\n                    imageVector = actionIcon,\r\n                    contentDescription = contentDescription\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentEditorSheet(\r\n    state: StudentEditorFormState,\r\n    onNameChange: (String) -> Unit,\r\n    onPhoneChange: (String) -> Unit,\r\n    onMessengerChange: (String) -> Unit,\r\n    onRateChange: (String) -> Unit,\r\n    subjectPresets: List<SubjectPreset>,\r\n    onSubjectChange: (String) -> Unit,\r\n    onGradeChange: (String) -> Unit,\r\n    onNoteChange: (String) -> Unit,\r\n    onSave: () -> Unit,\r\n    onDismiss: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    editTarget: StudentEditTarget? = null,\r\n    initialFocus: StudentEditTarget? = StudentEditTarget.PROFILE,\r\n    snackbarHostState: SnackbarHostState? = null,\r\n) {\r\n    val isEditing = state.studentId != null\r\n    val titleRes = when {\r\n        !isEditing -> R.string.add_student\r\n        editTarget == StudentEditTarget.RATE -> R.string.student_editor_title_rate\r\n        editTarget == StudentEditTarget.PHONE -> R.string.student_editor_title_phone\r\n        editTarget == StudentEditTarget.MESSENGER -> R.string.student_editor_title_messenger\r\n        editTarget == StudentEditTarget.NOTES -> R.string.student_editor_title_note\r\n        else -> R.string.student_editor_title\r\n    }\r\n    val title = stringResource(id = titleRes)\r\n    val sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)\r\n    val configuration = LocalConfiguration.current\r\n    val minHeight = remember(configuration) { configuration.screenHeightDp.dp * 0.5f }\r\n    val scrollState = rememberScrollState()\r\n\r\n    ModalBottomSheet(\r\n        onDismissRequest = onDismiss,\r\n        sheetState = sheetState,\r\n        containerColor = Color.Transparent,\r\n        contentColor = Color.Unspecified,\r\n        scrimColor = Color.Black.copy(alpha = 0.32f)\r\n    ) {\r\n        TutorlyBottomSheetContainer(color = Color.White, dragHandle = null) {\r\n            Column(\r\n                modifier = modifier\r\n                    .fillMaxWidth()\r\n                    .heightIn(min = minHeight)\r\n                    .verticalScroll(scrollState)\r\n                    .padding(horizontal = 20.dp, vertical = 16.dp),\r\n                verticalArrangement = Arrangement.spacedBy(16.dp)\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    Text(\r\n                        text = title,\r\n                        style = MaterialTheme.typography.titleLarge,\r\n                        modifier = Modifier.weight(1f)\r\n                    )\r\n                    IconButton(onClick = onDismiss, enabled = !state.isSaving) {\r\n                        Icon(imageVector = Icons.Filled.Close, contentDescription = stringResource(id = R.string.student_editor_close))\r\n                    }\r\n                }\r\n\r\n                if (state.isSaving) {\r\n                    LinearProgressIndicator(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        color = MaterialTheme.colorScheme.secondary\r\n                    )\r\n                }\r\n\r\n                StudentEditorForm(\r\n                    state = state,\r\n                    onNameChange = onNameChange,\r\n                    onPhoneChange = onPhoneChange,\r\n                    onMessengerChange = onMessengerChange,\r\n                    onRateChange = onRateChange,\r\n                    subjectPresets = subjectPresets,\r\n                    onSubjectChange = onSubjectChange,\r\n                    onGradeChange = onGradeChange,\r\n                    onNoteChange = onNoteChange,\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    editTarget = editTarget,\r\n                    initialFocus = initialFocus,\r\n                    enableScrolling = false,\r\n                    enabled = !state.isSaving,\r\n                    onSubmit = onSave\r\n                )\r\n\r\n                if (snackbarHostState != null) {\r\n                    SnackbarHost(\r\n                        hostState = snackbarHostState,\r\n                        modifier = Modifier.fillMaxWidth()\r\n                    )\r\n                }\r\n\r\n                Button(\r\n                    onClick = onSave,\r\n                    enabled = !state.isSaving && state.name.isNotBlank(),\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = Color(0xFF4E998C),\r\n                        contentColor = Color.White,\r\n                        disabledContainerColor = Color(0xFF4E998C).copy(alpha = 0.3f),\r\n                        disabledContentColor = Color.White.copy(alpha = 0.7f)\r\n                    )\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_editor_save))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyStudentsState(isArchiveMode: Boolean, modifier: Modifier = Modifier) {\r\n    Box(modifier, contentAlignment = Alignment.Center) {\r\n        Text(\r\n            text = stringResource(\r\n                id = if (isArchiveMode) {\r\n                    R.string.students_archive_empty_state\r\n                } else {\r\n                    R.string.students_empty_state\r\n                }\r\n            ),\r\n            style = MaterialTheme.typography.bodyMedium\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\n@OptIn(ExperimentalSharedTransitionApi::class)\r\nprivate fun StudentCard(\r\n    item: StudentsViewModel.StudentListItem,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    sharedTransitionScope: SharedTransitionScope? = null,\r\n    animatedVisibilityScope: AnimatedVisibilityScope? = null,\r\n    sharedContentKey: String? = null,\r\n) {\r\n    val subject = item.profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n    val grade = item.profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n    val subtitle = listOfNotNull(subject, grade)\r\n        .joinToString(separator = \" • \")\r\n        .takeIf { it.isNotBlank() }\r\n\r\n    val note = item.student.note?.takeIf { it.isNotBlank() }?.trim()\r\n\r\n    val sharedModifier = if (\r\n        sharedTransitionScope != null &&\r\n        animatedVisibilityScope != null &&\r\n        sharedContentKey != null\r\n    ) {\r\n        with(sharedTransitionScope) {\r\n            val sharedState = rememberSharedContentState(key = sharedContentKey)\r\n            Modifier.sharedBounds(\r\n                sharedContentState = sharedState,\r\n                animatedVisibilityScope = animatedVisibilityScope,\r\n                boundsTransform = { _, _ ->\r\n                    tween(\r\n                        durationMillis = 450,\r\n                        easing = FastOutSlowInEasing\r\n                    )\r\n                }\r\n            )\r\n        }\r\n    } else {\r\n        Modifier\r\n    }\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .then(sharedModifier),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = CardDefaults.cardColors(\r\n            containerColor = MaterialTheme.colorScheme.surfaceContainerLowest\r\n        ),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Box(Modifier.fillMaxWidth()) {\r\n            if (item.hasDebt) {\r\n                PaymentBadge(\r\n                    status = PaymentBadgeStatus.DEBT,\r\n                    modifier = Modifier\r\n                        .align(Alignment.TopEnd)\r\n                        .padding(top = 12.dp, end = 16.dp)\r\n                )\r\n            }\r\n\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 16.dp, vertical = 12.dp),\r\n                verticalAlignment = Alignment.Top\r\n            ) {\r\n                StudentAvatar(name = item.student.name, size = 48.dp)\r\n                Spacer(Modifier.width(12.dp))\r\n                Box(modifier = Modifier.weight(1f)) {\r\n                    Column(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                    ) {\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .padding(end = if (item.hasDebt) 80.dp else 0.dp),\r\n                            verticalAlignment = Alignment.CenterVertically\r\n                        ) {\r\n                            Text(\r\n                                text = item.student.name,\r\n                                style = MaterialTheme.typography.titleMedium,\r\n                                fontWeight = FontWeight.Medium,\r\n                                modifier = Modifier.weight(1f, fill = false)\r\n                            )\r\n                        }\r\n                        subtitle?.let {\r\n                            Text(\r\n                                text = it,\r\n                                style = MaterialTheme.typography.bodySmall,\r\n                                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                            )\r\n                        }\r\n                        note?.let {\r\n                            Surface(\r\n                                color = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                                contentColor = MaterialTheme.colorScheme.onSurface,\r\n                                shape = MaterialTheme.shapes.small\r\n                            ) {\r\n                                Row(\r\n                                    modifier = Modifier\r\n                                        .fillMaxWidth()\r\n                                        .padding(vertical = 8.dp),\r\n                                    verticalAlignment = Alignment.CenterVertically,\r\n                                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                                ) {\r\n                                    Icon(\r\n                                        imageVector = Icons.Outlined.StickyNote2,\r\n                                        contentDescription = null,\r\n                                        modifier = Modifier.size(16.dp)\r\n                                    )\r\n                                    Text(\r\n                                        text = it,\r\n                                        style = MaterialTheme.typography.bodySmall,\r\n                                        maxLines = 2,\r\n                                        overflow = TextOverflow.Ellipsis\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                        Surface(\r\n                            color = MaterialTheme.colorScheme.surfaceContainerLowest,\r\n                            contentColor = MaterialTheme.colorScheme.primary,\r\n                            shape = MaterialTheme.shapes.small\r\n                        ) {\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .fillMaxWidth()\r\n                                    .padding(vertical = 8.dp),\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                                horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                            ) {\r\n                                Icon(\r\n                                    imageVector = Icons.Outlined.CurrencyRuble,\r\n                                    contentDescription = null,\r\n                                    modifier = Modifier.size(16.dp)\r\n                                )\r\n                                Text(\r\n                                    text = stringResource(\r\n                                        id = R.string.student_card_progress,\r\n                                        item.progress.paidLessons,\r\n                                        item.progress.completedLessons\r\n                                    ),\r\n                                    style = MaterialTheme.typography.bodySmall,\r\n                                    fontWeight = FontWeight.Medium,\r\n                                    maxLines = 1,\r\n                                    overflow = TextOverflow.Ellipsis\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun StudentAvatar(\r\n    name: String,\r\n    size: Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.extendedColors.chipSelected),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(revision c6befc418491d3203882b6604ae95ed20f6d487d)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentsScreen.kt	(date 1761565220897)
@@ -194,6 +194,9 @@
                 .fillMaxSize()
                 .padding(innerPadding)
                 .padding(horizontal = 16.dp, vertical = 12.dp)
+                .background(Color.Transparent),
+                    verticalArrangement = Arrangement.spacedBy(12.dp),
+
         ) {
             OutlinedTextField(
                 value = query,
@@ -217,7 +220,7 @@
                 )
             )
 
-            Spacer(Modifier.height(16.dp))
+//            Spacer(Modifier.height(16.dp).background(Color.Transparent))
 
             if (students.isEmpty()) {
                 EmptyStudentsState(
@@ -228,7 +231,7 @@
                 LazyColumn(
                     modifier = Modifier.fillMaxSize(),
                     verticalArrangement = Arrangement.spacedBy(12.dp),
-                    contentPadding = PaddingValues(bottom = 16.dp)
+                    contentPadding = PaddingValues(bottom = 16.dp),
                 ) {
                     items(
                         items = students,
Index: app/src/main/java/com/tutorly/ui/screens/SettingsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport android.app.TimePickerDialog\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.FlowRow\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.wrapContentHeight\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\r\nimport androidx.compose.material3.AssistChipDefaults\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.ElevatedAssistChip\r\nimport androidx.compose.material3.FilterChip\r\nimport androidx.compose.material3.FilterChipDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.IconButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.ui.components.TopBarContainer\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport java.time.DayOfWeek\r\nimport java.time.LocalTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.time.format.TextStyle\r\nimport java.util.Locale\r\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\r\n\r\n@Composable\r\nfun SettingsScreen(\r\n    modifier: Modifier = Modifier,\r\n    onBack: () -> Unit,\r\n    viewModel: SettingsViewModel = hiltViewModel()\r\n) {\r\n    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        topBar = { SettingsTopBar(onBack = onBack) }\r\n    ) { padding ->\r\n        SettingsContent(\r\n            modifier = Modifier\r\n                .padding(padding)\r\n                .fillMaxSize(),\r\n            state = uiState,\r\n            onStartTimeClick = viewModel::updateWorkDayStart,\r\n            onEndTimeClick = viewModel::updateWorkDayEnd,\r\n            onWeekendToggle = viewModel::toggleWeekend,\r\n            onThemeSelect = viewModel::selectTheme\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SettingsTopBar(onBack: () -> Unit) {\r\n    TopBarContainer {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(80.dp)\r\n                .padding(horizontal = 16.dp)\r\n        ) {\r\n            IconButton(\r\n                onClick = onBack,\r\n                modifier = Modifier.align(Alignment.CenterStart),\r\n                colors = IconButtonDefaults.iconButtonColors(\r\n                    contentColor = MaterialTheme.colorScheme.surface\r\n                )\r\n            ) {\r\n                Icon(\r\n                    imageVector = Icons.AutoMirrored.Filled.ArrowBack,\r\n                    contentDescription = stringResource(id = R.string.settings_back)\r\n                )\r\n            }\r\n\r\n            Text(\r\n                text = stringResource(id = R.string.settings_title),\r\n                style = MaterialTheme.typography.titleLarge,\r\n                color = MaterialTheme.colorScheme.surface,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis,\r\n                textAlign = TextAlign.Center,\r\n                modifier = Modifier\r\n                    .align(Alignment.Center)\r\n                    .padding(horizontal = 72.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SettingsContent(\r\n    modifier: Modifier,\r\n    state: SettingsUiState,\r\n    onStartTimeClick: (LocalTime) -> Unit,\r\n    onEndTimeClick: (LocalTime) -> Unit,\r\n    onWeekendToggle: (DayOfWeek) -> Unit,\r\n    onThemeSelect: (ThemeOption) -> Unit\r\n) {\r\n    val scrollState = rememberScrollState()\r\n    val timeFormatter = rememberTimeFormatter()\r\n\r\n    Column(\r\n        modifier = modifier\r\n            .verticalScroll(scrollState)\r\n            .padding(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(24.dp)\r\n    ) {\r\n        SettingsSectionTitle(text = stringResource(id = R.string.settings_work_hours))\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            TimePreferenceCard(\r\n                modifier = Modifier.weight(1f),\r\n                label = stringResource(id = R.string.settings_work_start),\r\n                time = state.workDayStart,\r\n                formatter = timeFormatter,\r\n                onTimeSelected = onStartTimeClick\r\n            )\r\n            TimePreferenceCard(\r\n                modifier = Modifier.weight(1f),\r\n                label = stringResource(id = R.string.settings_work_end),\r\n                time = state.workDayEnd,\r\n                formatter = timeFormatter,\r\n                onTimeSelected = onEndTimeClick\r\n            )\r\n        }\r\n\r\n        SettingsSectionTitle(text = stringResource(id = R.string.settings_weekends))\r\n        FlowRow(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            DayOfWeek.values().forEach { day ->\r\n                val isWeekend = day in state.weekendDays\r\n                FilterChip(\r\n                    selected = isWeekend,\r\n                    onClick = { onWeekendToggle(day) },\r\n                    label = {\r\n                        Text(\r\n                            text = day.getDisplayName(TextStyle.SHORT, Locale(\"ru\")),\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                    },\r\n                    colors = FilterChipDefaults.filterChipColors(\r\n                        selectedContainerColor = MaterialTheme.extendedColors.chipSelected,\r\n                        selectedLabelColor = MaterialTheme.colorScheme.onSecondaryContainer,\r\n                        labelColor = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                )\r\n            }\r\n        }\r\n\r\n        SettingsSectionTitle(text = stringResource(id = R.string.settings_theme))\r\n        FlowRow(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            state.availableThemes.forEach { option ->\r\n                val isSelected = option.preset == state.selectedTheme\r\n                ThemeOptionChip(\r\n                    option = option,\r\n                    isSelected = isSelected,\r\n                    onSelect = { onThemeSelect(option) }\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SettingsSectionTitle(text: String) {\r\n    Text(\r\n        text = text,\r\n        style = MaterialTheme.typography.titleMedium,\r\n        fontWeight = FontWeight.SemiBold\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun rememberTimeFormatter(): DateTimeFormatter =\r\n    remember { DateTimeFormatter.ofPattern(\"HH:mm\") }\r\n\r\n@Composable\r\nprivate fun TimePreferenceCard(\r\n    modifier: Modifier = Modifier,\r\n    label: String,\r\n    time: LocalTime,\r\n    formatter: DateTimeFormatter,\r\n    onTimeSelected: (LocalTime) -> Unit\r\n) {\r\n    val context = LocalContext.current\r\n    Card(\r\n        modifier = modifier.wrapContentHeight(),\r\n        shape = RoundedCornerShape(20.dp),\r\n        colors = CardDefaults.cardColors(containerColor = Color.White),\r\n        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .clickable {\r\n                    TimePickerDialog(\r\n                        context,\r\n                        { _, hourOfDay, minute ->\r\n                            onTimeSelected(LocalTime.of(hourOfDay, minute))\r\n                        },\r\n                        time.hour,\r\n                        time.minute,\r\n                        true\r\n                    ).show()\r\n                }\r\n                .padding(horizontal = 16.dp, vertical = 20.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.labelMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = formatter.format(time),\r\n                style = MaterialTheme.typography.titleMedium,\r\n                color = MaterialTheme.colorScheme.onSurface\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ThemeOptionChip(\r\n    option: ThemeOption,\r\n    isSelected: Boolean,\r\n    onSelect: () -> Unit\r\n) {\r\n    ElevatedAssistChip(\r\n        onClick = onSelect,\r\n        label = { Text(text = stringResource(id = option.labelRes)) },\r\n        leadingIcon = {\r\n            val previewColor = Color(option.previewColor)\r\n            Box(\r\n                modifier = Modifier\r\n                    .size(18.dp)\r\n                    .background(previewColor, shape = CircleShape)\r\n                    .border(\r\n                        width = 1.dp,\r\n                        color = MaterialTheme.colorScheme.outline,\r\n                        shape = CircleShape\r\n                    )\r\n            )\r\n        },\r\n        colors = AssistChipDefaults.elevatedAssistChipColors(\r\n            containerColor = if (isSelected) {\r\n                MaterialTheme.extendedColors.chipSelected\r\n            } else {\r\n                Color.White\r\n            },\r\n            labelColor = if (isSelected) {\r\n                MaterialTheme.colorScheme.onSecondaryContainer\r\n            } else {\r\n                MaterialTheme.colorScheme.onSurface\r\n            },\r\n            leadingIconContentColor = if (isSelected) {\r\n                MaterialTheme.colorScheme.onSecondaryContainer\r\n            } else {\r\n                MaterialTheme.colorScheme.onSurface\r\n            }\r\n        ),\r\n        shape = RoundedCornerShape(50)\r\n    )\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/SettingsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/SettingsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/SettingsScreen.kt	(revision c6befc418491d3203882b6604ae95ed20f6d487d)
+++ b/app/src/main/java/com/tutorly/ui/screens/SettingsScreen.kt	(date 1761564611652)
@@ -42,6 +42,7 @@
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.stringResource
 import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextAlign
 import androidx.compose.ui.text.style.TextOverflow
 import androidx.compose.ui.unit.dp
 import androidx.hilt.navigation.compose.hiltViewModel
