Index: app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.animation.animateContentSize\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Canvas\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.combinedClickable\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.ColumnScope\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.IntrinsicSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ExpandLess\r\nimport androidx.compose.material.icons.filled.ExpandMore\r\nimport androidx.compose.material.icons.outlined.LockOpen\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.CurrencyRuble\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardColors\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CardElevation\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarDuration\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.SnackbarResult\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.CenterAlignedTopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.material3.rememberSwipeToDismissBoxState\r\nimport androidx.compose.material3.SwipeToDismissBox\r\nimport androidx.compose.material3.SwipeToDismissBoxValue\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.State\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.runtime.snapshotFlow\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.pluralStringResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.LessonForToday\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.components.statusChipData\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\r\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\r\nimport com.tutorly.ui.theme.DebtChipContent\r\nimport com.tutorly.ui.theme.DebtChipFill\r\nimport com.tutorly.ui.theme.PaidChipContent\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport java.text.NumberFormat\r\nimport java.time.ZoneId\r\nimport java.time.ZonedDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlinx.coroutines.flow.distinctUntilChanged\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TodayScreen(\r\n    modifier: Modifier = Modifier,\r\n    onAddStudent: () -> Unit = {},\r\n    onOpenStudentProfile: (Long) -> Unit = {},\r\n    onOpenDebtors: () -> Unit = {},\r\n    viewModel: TodayViewModel = hiltViewModel()\r\n) {\r\n    val uiState by viewModel.uiState.collectAsState()\r\n    val snackbarMessage by viewModel.snackbarMessage.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val context = LocalContext.current\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\r\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\r\n    var showCloseDayDialog by rememberSaveable { mutableStateOf(false) }\r\n\r\n    LessonCardSheet(\r\n        state = lessonCardState,\r\n        onDismissRequest = lessonCardViewModel::dismiss,\r\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            lessonCardViewModel.dismiss()\r\n            onAddStudent()\r\n        },\r\n        onDateSelect = lessonCardViewModel::onDateSelected,\r\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\r\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\r\n        onPriceChange = lessonCardViewModel::onPriceChanged,\r\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\r\n        onNoteChange = lessonCardViewModel::onNoteChanged,\r\n        onDeleteLesson = lessonCardViewModel::deleteLesson,\r\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\r\n    )\r\n\r\n    if (showCloseDayDialog) {\r\n        ConfirmCloseDayDialog(\r\n            onConfirm = {\r\n                showCloseDayDialog = false\r\n                viewModel.onDayCloseConfirmed()\r\n            },\r\n            onDismiss = { showCloseDayDialog = false }\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(snackbarMessage) {\r\n        val message = snackbarMessage ?: return@LaunchedEffect\r\n        val text = when (message.status) {\r\n            PaymentStatus.PAID -> context.getString(R.string.today_snackbar_paid)\r\n            PaymentStatus.DUE -> context.getString(R.string.today_snackbar_due)\r\n            else -> context.getString(R.string.today_snackbar_marked)\r\n        }\r\n        val action = context.getString(R.string.today_snackbar_action_undo)\r\n        val result = snackbarHostState.showSnackbar(\r\n            message = text,\r\n            actionLabel = action,\r\n            duration = SnackbarDuration.Short,\r\n            withDismissAction = true\r\n        )\r\n        viewModel.onSnackbarShown()\r\n        if (result == SnackbarResult.ActionPerformed) {\r\n            viewModel.onUndo(message.lessonId)\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        topBar = { TodayTopBar(state = uiState, onReopenDay = viewModel::onReopenDay) },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = Color.Transparent\r\n    ) { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            when (val state = uiState) {\r\n                TodayUiState.Loading -> LoadingState()\r\n                is TodayUiState.Empty -> EmptyState(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors\r\n                )\r\n                is TodayUiState.ReviewPending -> ReviewPendingContent(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors,\r\n                    onRequestCloseDay = { showCloseDayDialog = true }\r\n                )\r\n                is TodayUiState.DayInProgress -> DayInProgressContent(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors,\r\n                    onRequestCloseDay = { showCloseDayDialog = true }\r\n                )\r\n                is TodayUiState.DayClosed -> DayClosedContent(\r\n                    state = state,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LoadingState() {\r\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\r\n        CircularProgressIndicator()\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyState(\r\n    state: TodayUiState.Empty,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit\r\n) {\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"empty_state_header\") {\r\n            Card(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                shape = MaterialTheme.shapes.large,\r\n                colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n                elevation = TutorlyCardDefaults.elevation()\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(horizontal = 20.dp, vertical = 24.dp),\r\n                    horizontalAlignment = Alignment.CenterHorizontally,\r\n//                    verticalArrangement = Arrangement.spacedBy(16.dp)\r\n                ) {\r\n                    Image(\r\n                        painter = painterResource(id = R.drawable.vacation),\r\n                        contentDescription = null,\r\n                        modifier = Modifier.size(width = 256.dp, height = 192.dp)\r\n                    )\r\n                    Text(\r\n                        text = stringResource(R.string.today_empty_title),\r\n                        style = MaterialTheme.typography.titleMedium,\r\n                        textAlign = TextAlign.Center\r\n                    )\r\n                    Text(\r\n                        text = stringResource(R.string.today_empty_subtitle),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        textAlign = TextAlign.Center,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons,\r\n                titleTextAlign = TextAlign.Start\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun DayInProgressContent(\r\n    state: TodayUiState.DayInProgress,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit,\r\n    onRequestCloseDay: () -> Unit\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val (pendingLessons, markedLessons) = remember(state.lessons) {\r\n        state.lessons.partition { it.paymentStatus == PaymentStatus.UNPAID }\r\n    }\r\n    val allLessonsCompleted = remember(state.completedLessons, state.totalLessons) {\r\n        state.totalLessons > 0 && state.completedLessons == state.totalLessons\r\n    }\r\n    val showProgressSummary = !state.showCloseDayCallout\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        state = listState,\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        if (showProgressSummary) {\r\n            item(key = \"summary\") {\r\n                DayProgressSummary(\r\n                    completed = state.completedLessons,\r\n                    total = state.totalLessons,\r\n                    remaining = state.remainingLessons,\r\n                    allLessonsCompleted = allLessonsCompleted\r\n                )\r\n            }\r\n        }\r\n        if (state.showCloseDayCallout) {\r\n            item(key = \"close_day_callout\") {\r\n                CloseDayCallout(onRequestCloseDay = onRequestCloseDay)\r\n            }\r\n        }\r\n        if (pendingLessons.isNotEmpty()) {\r\n            item(key = \"pending_lessons\") {\r\n                LessonsList(\r\n                    lessons = pendingLessons,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onLessonOpen = onLessonOpen,\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    showTimeline = true,\r\n                    onLessonLongPress = { lesson -> onLessonOpen(lesson.id) }\r\n                )\r\n            }\r\n        }\r\n        if (markedLessons.isNotEmpty()) {\r\n            item(key = \"marked_header\") {\r\n                SectionHeader(text = stringResource(id = R.string.today_marked_section_title))\r\n            }\r\n            item(key = \"marked_lessons\") {\r\n                LessonsList(\r\n                    lessons = markedLessons,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onLessonOpen = onLessonOpen,\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    showTimeline = true,\r\n                    onLessonLongPress = { lesson -> onLessonOpen(lesson.id) }\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons,\r\n                titleTextAlign = TextAlign.Start\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ReviewPendingContent(\r\n    state: TodayUiState.ReviewPending,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit,\r\n    onRequestCloseDay: () -> Unit\r\n) {\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"review_summary\") {\r\n            ReviewSummaryCard(\r\n                remaining = state.reviewLessons.size,\r\n                total = state.totalLessons,\r\n                showCloseDayButton = state.showCloseDayButton,\r\n                onRequestCloseDay = onRequestCloseDay\r\n            )\r\n        }\r\n        if (state.reviewLessons.isNotEmpty()) {\r\n            item(key = \"review_carousel\") {\r\n                LessonsReviewCarousel(\r\n                    lessons = state.reviewLessons,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onLessonOpen = onLessonOpen,\r\n                    onOpenStudentProfile = onOpenStudentProfile\r\n                )\r\n            }\r\n        }\r\n        item(key = \"review_marked_header\") {\r\n            SectionHeader(text = stringResource(id = R.string.today_review_marked_section))\r\n        }\r\n        item(key = \"review_marked_list\") {\r\n            if (state.markedLessons.isEmpty()) {\r\n                ReviewEmptyMarkedCard()\r\n            } else {\r\n                LessonsList(\r\n                    lessons = state.markedLessons,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onLessonOpen = onLessonOpen,\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    showTimeline = true\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons,\r\n                titleTextAlign = TextAlign.Start\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ReviewSummaryCard(\r\n    remaining: Int,\r\n    total: Int,\r\n    showCloseDayButton: Boolean,\r\n    onRequestCloseDay: () -> Unit\r\n) {\r\n    Column(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Card(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            shape = MaterialTheme.shapes.large,\r\n            colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n            elevation = TutorlyCardDefaults.elevation()\r\n        ) {\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .padding(horizontal = 20.dp, vertical = 18.dp),\r\n                horizontalArrangement = Arrangement.spacedBy(16.dp),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Image(\r\n                    painter = painterResource(id = R.drawable.undraw_to_do_list_o3jf),\r\n                    contentDescription = null,\r\n                    modifier = Modifier.size(width = 120.dp, height = 96.dp)\r\n                )\r\n                Column(\r\n                    modifier = Modifier.weight(1f),\r\n                    verticalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    val titleRes = if (showCloseDayButton) {\r\n                        R.string.today_review_ready_title\r\n                    } else {\r\n                        R.string.today_review_title\r\n                    }\r\n                    Text(\r\n                        text = stringResource(id = titleRes),\r\n                        style = MaterialTheme.typography.titleMedium\r\n                    )\r\n                    if (showCloseDayButton) {\r\n                        Text(\r\n                            text = stringResource(id = R.string.today_review_ready_subtitle),\r\n                            style = MaterialTheme.typography.bodyMedium,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    } else if (total > 0 && remaining > 0) {\r\n                        Text(\r\n                            text = stringResource(id = R.string.today_review_progress, remaining, total),\r\n                            style = MaterialTheme.typography.bodyMedium,\r\n                            color = MaterialTheme.colorScheme.primary\r\n                        )\r\n                    }\r\n                    if (showCloseDayButton) {\r\n                        Button(\r\n                            modifier = Modifier.fillMaxWidth(),\r\n                            onClick = onRequestCloseDay\r\n                        ) {\r\n                            Text(text = stringResource(id = R.string.today_close_day_action))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!showCloseDayButton) {\r\n            Text(\r\n                text = stringResource(id = R.string.today_review_subtitle),\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center,\r\n                modifier = Modifier.fillMaxWidth()\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun LessonsReviewCarousel(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit\r\n) {\r\n    val currentLesson = lessons.firstOrNull()\r\n    if (currentLesson == null) {\r\n        return\r\n    }\r\n    Column(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        TodayLessonRow(\r\n            lesson = currentLesson,\r\n            onSwipeRight = onSwipeRight,\r\n            onSwipeLeft = onSwipeLeft,\r\n            onClick = { onLessonOpen(currentLesson.id) },\r\n            onLongPress = { onOpenStudentProfile(currentLesson.studentId) },\r\n            cardElevation = TutorlyCardDefaults.elevation()\r\n        )\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.today_review_hint_due),\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onErrorContainer\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.today_review_hint_paid),\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onTertiaryContainer\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ReviewEmptyMarkedCard() {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 24.dp),\r\n            contentAlignment = Alignment.Center\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.today_review_empty_marked),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SectionHeader(text: String) {\r\n    Text(\r\n        text = text,\r\n        style = MaterialTheme.typography.titleSmall,\r\n        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 4.dp, vertical = 4.dp)\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun DayProgressSummary(\r\n    completed: Int,\r\n    total: Int,\r\n    remaining: Int,\r\n    allLessonsCompleted: Boolean\r\n) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            horizontalArrangement = Arrangement.spacedBy(16.dp),\r\n            verticalAlignment = Alignment.CenterVertically\r\n        ) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.lesson_end_day),\r\n                contentDescription = null,\r\n                modifier = Modifier.size(width = 112.dp, height = 96.dp)\r\n            )\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(8.dp)\r\n            ) {\r\n                val summaryText = if (allLessonsCompleted) {\r\n                    stringResource(id = R.string.today_progress_all_done)\r\n                } else {\r\n                    stringResource(R.string.today_progress_summary, completed, total)\r\n                }\r\n                Text(\r\n                    text = summaryText,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                if (!allLessonsCompleted) {\r\n                    val remainingText = pluralStringResource(\r\n                        id = R.plurals.today_progress_remaining,\r\n                        count = remaining,\r\n                        remaining\r\n                    )\r\n                    Text(\r\n                        text = remainingText,\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun CloseDayCallout(onRequestCloseDay: () -> Unit) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.today_close_day_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            Text(\r\n                text = stringResource(R.string.today_close_day_subtitle),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Button(onClick = onRequestCloseDay) {\r\n                Text(text = stringResource(R.string.today_close_day_action))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ConfirmCloseDayDialog(\r\n    onConfirm: () -> Unit,\r\n    onDismiss: () -> Unit\r\n) {\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(R.string.today_close_day_dialog_title)) },\r\n        text = { Text(text = stringResource(R.string.today_close_day_dialog_body)) },\r\n        confirmButton = {\r\n            TextButton(onClick = onConfirm) {\r\n                Text(text = stringResource(R.string.today_close_day_dialog_confirm))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(R.string.today_close_day_dialog_dismiss))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun DayClosedContent(\r\n    state: TodayUiState.DayClosed,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit\r\n) {\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"summary\") {\r\n            DayClosedSummary(\r\n                paidAmountCents = state.paidAmountCents,\r\n                dueAmountCents = state.todayDueAmountCents,\r\n                formatter = currencyFormatter\r\n            )\r\n        }\r\n        item(key = \"today_debtors\") {\r\n            TodayDebtorsSection(\r\n                lessons = state.todayDueLessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile\r\n            )\r\n        }\r\n        if (state.lessons.isNotEmpty()) {\r\n            item(key = \"closed_lessons\") {\r\n                ClosedDayLessonsSection(\r\n                    lessons = state.lessons,\r\n                    onLessonOpen = onLessonOpen\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons,\r\n                titleTextAlign = TextAlign.Start\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DayClosedSummary(\r\n    paidAmountCents: Long,\r\n    dueAmountCents: Long,\r\n    formatter: NumberFormat\r\n) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                SummaryMetric(\r\n                    modifier = Modifier.weight(1f),\r\n                    label = stringResource(R.string.today_closed_income_label),\r\n                    value = formatCurrency(paidAmountCents, formatter),\r\n                    valueColor = MaterialTheme.colorScheme.tertiary\r\n                )\r\n                SummaryMetric(\r\n                    modifier = Modifier.weight(1f),\r\n                    label = stringResource(R.string.today_closed_debt_label),\r\n                    value = formatCurrency(dueAmountCents, formatter),\r\n                    valueColor = MaterialTheme.colorScheme.error\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SummaryMetric(\r\n    modifier: Modifier,\r\n    label: String,\r\n    value: String,\r\n    valueColor: Color\r\n) {\r\n    Column(\r\n        modifier = modifier,\r\n        verticalArrangement = Arrangement.spacedBy(6.dp)\r\n    ) {\r\n        Text(\r\n            text = label,\r\n            style = MaterialTheme.typography.bodySmall,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Text(\r\n            text = value,\r\n            style = MaterialTheme.typography.headlineSmall,\r\n            color = valueColor,\r\n            maxLines = 1,\r\n            overflow = TextOverflow.Ellipsis\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TodayDebtorsSection(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit\r\n) {\r\n    Column(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(R.string.today_debtors_today_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        if (lessons.isEmpty()) {\r\n            Surface(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                shape = MaterialTheme.shapes.large,\r\n                color = MaterialTheme.colorScheme.surface,\r\n                tonalElevation = 0.dp\r\n            ) {\r\n                Text(\r\n                    text = stringResource(R.string.today_debtors_empty),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp)\r\n                )\r\n            }\r\n        } else {\r\n            LessonsList(\r\n                lessons = lessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                showTimeline = true\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ClosedDayLessonsSection(\r\n    lessons: List<LessonForToday>,\r\n    onLessonOpen: (Long) -> Unit\r\n) {\r\n    val subtitle = stringResource(\r\n        R.string.today_closed_lessons_section_subtitle,\r\n        lessons.size\r\n    )\r\n    CollapsibleSection(\r\n        title = stringResource(R.string.today_closed_lessons_section_title),\r\n        subtitle = subtitle\r\n    ) {\r\n        lessons.forEach { lesson ->\r\n            LessonCard(\r\n                lesson = lesson,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { onLessonOpen(lesson.id) },\r\n                cardElevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PastDebtorsCollapsible(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit,\r\n    hasMore: Boolean,\r\n    titleTextAlign: TextAlign = TextAlign.Center\r\n) {\r\n    val subtitle = if (hasMore) {\r\n        stringResource(R.string.today_debtors_past_subtitle_more, lessons.size)\r\n    } else {\r\n        stringResource(R.string.today_debtors_past_subtitle, lessons.size)\r\n    }\r\n    CollapsibleSection(\r\n        title = stringResource(R.string.today_debtors_past_title),\r\n        titleColor = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        titleTextAlign = titleTextAlign,\r\n        subtitle = subtitle,\r\n        inlineIndicator = true\r\n    ) {\r\n        if (lessons.isEmpty()) {\r\n            Text(\r\n                text = stringResource(R.string.today_debtors_past_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        } else {\r\n            LessonsList(\r\n                lessons = lessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                cardElevation = CardDefaults.cardElevation(defaultElevation = 0.dp),\r\n                showTimeline = false,\r\n                onLessonLongPress = { lesson -> onOpenStudentProfile(lesson.studentId) }\r\n            )\r\n        }\r\n        if (hasMore) {\r\n            Button(onClick = onOpenDebtors) {\r\n                Text(text = stringResource(R.string.today_debtors_more_cta))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun CollapsibleSection(\r\n    title: String,\r\n    modifier: Modifier = Modifier,\r\n    subtitle: String? = null,\r\n    titleColor: Color = MaterialTheme.colorScheme.onSurface,\r\n    titleTextAlign: TextAlign = TextAlign.Start,\r\n    inlineIndicator: Boolean = false,\r\n    content: @Composable ColumnScope.() -> Unit\r\n) {\r\n    var expanded by rememberSaveable { mutableStateOf(false) }\r\n    Column(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .animateContentSize()\r\n    ) {\r\n        if (inlineIndicator) {\r\n            val boxAlignment = when (titleTextAlign) {\r\n                TextAlign.Center -> Alignment.Center\r\n                TextAlign.End -> Alignment.CenterEnd\r\n                else -> Alignment.CenterStart\r\n            }\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { expanded = !expanded }\r\n                    .padding(vertical = 6.dp)\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.align(boxAlignment),\r\n                    horizontalAlignment = Alignment.Start,\r\n                    verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                ) {\r\n                    Row(\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Text(\r\n                            text = title,\r\n                            style = MaterialTheme.typography.titleMedium,\r\n                            color = titleColor,\r\n                            textAlign = titleTextAlign\r\n                        )\r\n                        Spacer(modifier = Modifier.width(8.dp))\r\n                        Icon(\r\n                            imageVector = if (expanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,\r\n                            contentDescription = null,\r\n                            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                    if (subtitle != null) {\r\n                        Text(\r\n                            text = subtitle,\r\n                            style = MaterialTheme.typography.bodySmall,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { expanded = !expanded }\r\n                    .padding(vertical = 6.dp),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.weight(1f),\r\n                    verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                ) {\r\n                    Text(\r\n                        text = title,\r\n                        style = MaterialTheme.typography.titleMedium,\r\n                        color = titleColor,\r\n                        textAlign = titleTextAlign,\r\n                        modifier = Modifier.fillMaxWidth()\r\n                    )\r\n                    if (subtitle != null) {\r\n                        Text(\r\n                            text = subtitle,\r\n                            style = MaterialTheme.typography.bodySmall,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                }\r\n                Icon(\r\n                    imageVector = if (expanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,\r\n                    contentDescription = null,\r\n                    tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n        }\r\n        if (expanded) {\r\n            Spacer(modifier = Modifier.height(12.dp))\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                content = content\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonsList(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation(),\r\n    showTimeline: Boolean = false,\r\n    onLessonLongPress: (LessonForToday) -> Unit = { lesson ->\r\n        onOpenStudentProfile(lesson.studentId)\r\n    }\r\n) {\r\n    if (lessons.isEmpty()) {\r\n        return\r\n    }\r\n    val timelineColor = MaterialTheme.colorScheme.primary\r\n    Column(modifier = Modifier.fillMaxWidth()) {\r\n        lessons.forEachIndexed { index, lesson ->\r\n            TodayLessonRow(\r\n                lesson = lesson,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onClick = { onLessonOpen(lesson.id) },\r\n                onLongPress = { onLessonLongPress(lesson) },\r\n                cardElevation = cardElevation,\r\n                showTimeline = showTimeline,\r\n                hasPrevious = showTimeline && index > 0,\r\n                hasNext = showTimeline && index < lessons.lastIndex,\r\n                timelineColor = timelineColor\r\n            )\r\n            if (index < lessons.lastIndex) {\r\n                if (showTimeline) {\r\n                    LessonTimelineConnector(color = timelineColor)\r\n                } else {\r\n                    Spacer(modifier = Modifier.height(12.dp))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonTimelineIndicator(\r\n    color: Color,\r\n    hasPrevious: Boolean,\r\n    hasNext: Boolean,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val surfaceColor = MaterialTheme.colorScheme.surface\r\n    val strokeWidth = with(LocalDensity.current) { 2.dp.toPx() }\r\n    val nodeRadius = with(LocalDensity.current) { 6.dp.toPx() }\r\n    Canvas(\r\n        modifier = modifier\r\n            .width(24.dp)\r\n            .fillMaxHeight()\r\n    ) {\r\n        val centerX = size.width / 2f\r\n        val centerY = size.height / 2f\r\n        if (hasPrevious) {\r\n            drawLine(\r\n                color = color,\r\n                start = Offset(centerX, 0f),\r\n                end = Offset(centerX, centerY - nodeRadius),\r\n                strokeWidth = strokeWidth\r\n            )\r\n        }\r\n        if (hasNext) {\r\n            drawLine(\r\n                color = color,\r\n                start = Offset(centerX, centerY + nodeRadius),\r\n                end = Offset(centerX, size.height),\r\n                strokeWidth = strokeWidth\r\n            )\r\n        }\r\n        drawCircle(\r\n            color = surfaceColor,\r\n            radius = nodeRadius + strokeWidth / 2f,\r\n            center = Offset(centerX, centerY)\r\n        )\r\n        drawCircle(\r\n            color = color,\r\n            radius = nodeRadius,\r\n            center = Offset(centerX, centerY)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonTimelineConnector(color: Color) {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(12.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Canvas(\r\n            modifier = Modifier\r\n                .width(24.dp)\r\n                .fillMaxHeight()\r\n        ) {\r\n            val centerX = size.width / 2f\r\n            drawLine(\r\n                color = color,\r\n                start = Offset(centerX, 0f),\r\n                end = Offset(centerX, size.height),\r\n                strokeWidth = 2.dp.toPx()\r\n            )\r\n        }\r\n        Spacer(modifier = Modifier.width(12.dp))\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun TodayLessonRow(\r\n    lesson: LessonForToday,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onClick: () -> Unit,\r\n    onLongPress: () -> Unit,\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation(),\r\n    showTimeline: Boolean = false,\r\n    hasPrevious: Boolean = false,\r\n    hasNext: Boolean = false,\r\n    timelineColor: Color = Color.Unspecified\r\n) {\r\n    val dismissState = rememberSwipeToDismissBoxState(confirmValueChange = { value ->\r\n        when (value) {\r\n            SwipeToDismissBoxValue.StartToEnd -> {\r\n                onSwipeRight(lesson.id)\r\n                false\r\n            }\r\n            SwipeToDismissBoxValue.EndToStart -> {\r\n                onSwipeLeft(lesson.id)\r\n                false\r\n            }\r\n            else -> false\r\n        }\r\n    })\r\n\r\n    val resolvedTimelineColor = if (timelineColor == Color.Unspecified) {\r\n        MaterialTheme.colorScheme.primary\r\n    } else {\r\n        timelineColor\r\n    }\r\n\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(IntrinsicSize.Min),\r\n        verticalAlignment = Alignment.Top\r\n    ) {\r\n        if (showTimeline) {\r\n            LessonTimelineIndicator(\r\n                color = resolvedTimelineColor,\r\n                hasPrevious = hasPrevious,\r\n                hasNext = hasNext\r\n            )\r\n            Spacer(modifier = Modifier.width(12.dp))\r\n            SwipeToDismissBox(\r\n                state = dismissState,\r\n                modifier = Modifier.weight(1f),\r\n                backgroundContent = { DismissBackground(state = dismissState) }\r\n            ) {\r\n                LessonCard(\r\n                    lesson = lesson,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .combinedClickable(\r\n                            onClick = onClick,\r\n                            onLongClick = onLongPress\r\n                        ),\r\n                    cardElevation = cardElevation\r\n                )\r\n            }\r\n        } else {\r\n            SwipeToDismissBox(\r\n                state = dismissState,\r\n                modifier = Modifier.fillMaxWidth(),\r\n                backgroundContent = { DismissBackground(state = dismissState) }\r\n            ) {\r\n                LessonCard(\r\n                    lesson = lesson,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .combinedClickable(\r\n                            onClick = onClick,\r\n                            onLongClick = onLongPress\r\n                        ),\r\n                    cardElevation = cardElevation\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DismissBackground(state: androidx.compose.material3.SwipeToDismissBoxState) {\r\n    val offset by rememberDismissOffset(state)\r\n    val dismissValue = when (state.targetValue) {\r\n        SwipeToDismissBoxValue.StartToEnd, SwipeToDismissBoxValue.EndToStart -> state.targetValue\r\n        else -> when {\r\n            (offset ?: 0f) > 0f -> SwipeToDismissBoxValue.StartToEnd\r\n            (offset ?: 0f) < 0f -> SwipeToDismissBoxValue.EndToStart\r\n            else -> null\r\n        }\r\n    } ?: return\r\n\r\n    val (color, alignment, tint) = when (dismissValue) {\r\n        SwipeToDismissBoxValue.StartToEnd -> Triple(\r\n            MaterialTheme.extendedColors.accent,\r\n            Alignment.CenterStart,\r\n            PaidChipContent\r\n        )\r\n\r\n        SwipeToDismissBoxValue.EndToStart -> Triple(\r\n            DebtChipFill,\r\n            Alignment.CenterEnd,\r\n            DebtChipContent\r\n        )\r\n\r\n        SwipeToDismissBoxValue.Settled -> return\r\n    }\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .clip(RoundedCornerShape(20.dp))\r\n            .background(color),\r\n        contentAlignment = alignment\r\n    ) {\r\n        Icon(\r\n            imageVector = Icons.Outlined.CurrencyRuble,\r\n            contentDescription = null,\r\n            tint = tint,\r\n            modifier = Modifier\r\n                .padding(horizontal = 24.dp)\r\n                .size(28.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberDismissOffset(\r\n    state: androidx.compose.material3.SwipeToDismissBoxState\r\n): State<Float?> {\r\n    val offsetState = remember(state) { mutableStateOf<Float?>(null) }\r\n    LaunchedEffect(state) {\r\n        snapshotFlow {\r\n            try {\r\n                state.requireOffset()\r\n            } catch (_: IllegalStateException) {\r\n                null\r\n            }\r\n        }\r\n            .distinctUntilChanged()\r\n            .collect { value ->\r\n                offsetState.value = value\r\n            }\r\n    }\r\n    return offsetState\r\n}\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun LessonCard(\r\n    lesson: LessonForToday,\r\n    modifier: Modifier = Modifier,\r\n    cardColors: CardColors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation()\r\n) {\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\") }\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    val start = remember(lesson.startAt) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt) { lesson.endAt.atZone(zoneId) }\r\n    val startTime = remember(start) { start.toLocalTime() }\r\n    val timeText = remember(startTime) { timeFormatter.format(startTime) }\r\n    val durationMinutes = remember(lesson.duration) { lesson.duration.toMinutes().toInt().coerceAtLeast(0) }\r\n    val amount = remember(lesson.priceCents) { formatCurrency(lesson.priceCents.toLong(), currencyFormatter) }\r\n    val studentName = remember(lesson.studentName) { lesson.studentName }\r\n    val normalizedLessonTitle = lesson.lessonTitle\r\n        ?.takeIf { it.isNotBlank() }\r\n        ?.trim()\r\n    val normalizedSubjectName = lesson.subjectName\r\n        ?.takeIf { it.isNotBlank() }\r\n        ?.trim()\r\n    val subjectTitle = normalizedLessonTitle\r\n        ?: normalizedSubjectName\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val grade = normalizeGrade(lesson.studentGrade)\r\n    val subtitle = listOfNotNull(grade, subjectTitle).joinToString(separator = \" • \")\r\n    val durationLabel = stringResource(R.string.today_duration_format, durationMinutes)\r\n    val statusData = statusChipData(\r\n        paymentStatus = lesson.paymentStatus,\r\n        start = start,\r\n        end = end,\r\n        now = ZonedDateTime.now(zoneId)\r\n    )\r\n\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = cardColors,\r\n        elevation = cardElevation\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(IntrinsicSize.Min),\r\n            horizontalArrangement = Arrangement.spacedBy(0.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .weight(1f)\r\n                    .padding(horizontal = 20.dp, vertical = 18.dp),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                Column(\r\n                    verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                ) {\r\n                    Text(\r\n                        text = studentName,\r\n                        style = MaterialTheme.typography.titleMedium,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                    if (subtitle.isNotBlank()) {\r\n                        Text(\r\n                            text = subtitle,\r\n                            style = MaterialTheme.typography.bodyMedium,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                    }\r\n                }\r\n                androidx.compose.foundation.layout.FlowRow(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    horizontalArrangement = Arrangement.spacedBy(12.dp),\r\n                    verticalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    LessonMetaPill(text = timeText)\r\n                    LessonMetaPill(text = durationLabel)\r\n                    LessonMetaPill(text = amount)\r\n                }\r\n                val note = lesson.note?.takeIf { it.isNotBlank() }\r\n                if (note != null) {\r\n                    Row(\r\n                        modifier = Modifier.fillMaxWidth(),\r\n                        verticalAlignment = Alignment.CenterVertically,\r\n                        horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = Icons.Outlined.StickyNote2,\r\n                            contentDescription = null,\r\n                            tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                            modifier = Modifier.size(18.dp)\r\n                        )\r\n                        Text(\r\n                            text = note,\r\n                            style = MaterialTheme.typography.bodySmall,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                            maxLines = 2,\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxHeight()\r\n                    .width(12.dp)\r\n                    .background(statusData.background)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonMetaPill(text: String, modifier: Modifier = Modifier) {\r\n    Surface(\r\n        color = MaterialTheme.colorScheme.surface,\r\n        contentColor = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        shape = RoundedCornerShape(50),\r\n        border = BorderStroke(1.dp, MaterialTheme.colorScheme.outline),\r\n        modifier = modifier\r\n    ) {\r\n        Text(\r\n            text = text,\r\n            style = MaterialTheme.typography.labelSmall,\r\n            modifier = Modifier.padding(horizontal = 10.dp, vertical = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun TodayTopBar(state: TodayUiState, onReopenDay: () -> Unit) {\r\n    GradientTopBarContainer {\r\n        val titleRes = when (state) {\r\n            is TodayUiState.DayClosed -> R.string.today_topbar_closed\r\n            else -> R.string.today_title\r\n        }\r\n        val canReopen = (state as? TodayUiState.DayClosed)?.canReopen == true\r\n        CenterAlignedTopAppBar(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(80.dp),\r\n            title = {\r\n                Text(\r\n                    text = stringResource(titleRes),\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                )\r\n            },\r\n            actions = {\r\n                if (canReopen) {\r\n                    IconButton(onClick = onReopenDay) {\r\n                        Icon(\r\n                            imageVector = Icons.Outlined.LockOpen,\r\n                            contentDescription = stringResource(R.string.today_reopen_day_action),\r\n                            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            colors = TopAppBarDefaults.topAppBarColors(\r\n                containerColor = MaterialTheme.colorScheme.surface,\r\n                scrolledContainerColor = Color.Transparent,\r\n                titleContentColor = MaterialTheme.colorScheme.onSurfaceVariant\r\n            ),\r\n            windowInsets = androidx.compose.foundation.layout.WindowInsets(0, 0, 0, 0)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberCurrencyFormatter(): NumberFormat {\r\n    return remember {\r\n        NumberFormat.getCurrencyInstance(Locale.getDefault()).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(revision 72a29b8835dc68bb3b7c52ddd5535b8e1f370a34)
+++ b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(date 1761516725069)
@@ -623,9 +623,9 @@
             verticalAlignment = Alignment.CenterVertically
         ) {
             Image(
-                painter = painterResource(id = R.drawable.lesson_end_day),
+                painter = painterResource(id = R.drawable.undraw_to_do_list_o3jf),
                 contentDescription = null,
-                modifier = Modifier.size(width = 112.dp, height = 96.dp)
+                modifier = Modifier.size(width = 120.dp, height = 96.dp)
             )
             Column(
                 modifier = Modifier.weight(1f),
Index: app/src/main/res/drawable/undraw_relaxation_jsge.xml
===================================================================
diff --git a/app/src/main/res/drawable/undraw_relaxation_jsge.xml b/app/src/main/res/drawable/undraw_relaxation_jsge.xml
deleted file mode 100644
--- a/app/src/main/res/drawable/undraw_relaxation_jsge.xml	(revision 72a29b8835dc68bb3b7c52ddd5535b8e1f370a34)
+++ /dev/null	(revision 72a29b8835dc68bb3b7c52ddd5535b8e1f370a34)
@@ -1,66 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="800.14dp"
-    android:height="456.24dp"
-    android:viewportWidth="800.14"
-    android:viewportHeight="456.24">
-<!--  <path-->
-<!--      android:pathData="M71.12,71.12m-71.12,0a71.12,71.12 0,1 1,142.24 0a71.12,71.12 0,1 1,-142.24 0"-->
-<!--      android:fillColor="#ff6884"/>-->
-  <path
-      android:pathData="M141.53,132.59a0.65,0.65 0,0 1,-0.37 -0.12L49.9,70.14a0.82,0.82 0,0 1,-0.23 -1.06,0.66 0.66,0 0,1 0.96,-0.25l91.26,62.33a0.82,0.82 0,0 1,0.23 1.06,0.69 0.69,0 0,1 -0.6,0.36Z"
-      android:fillColor="#3f3d56"/>
-  <path
-      android:pathData="M703.22,164.32c-0.29,0 -0.56,-0.25 -0.7,-0.68a1.67,1.67 0,0 1,0.34 -1.7L792.41,87.95c0.39,-0.32 0.87,-0.08 1.07,0.53a1.67,1.67 0,0 1,-0.34 1.7l-89.56,73.99A0.57,0.57 0,0 1,703.22 164.32Z"
-      android:fillColor="#3f3d56"/>
-  <path
-      android:pathData="M273.94,143.88s-8.04,12.63 -1.43,20.07 46.59,37.07 46.59,37.07 25.18,15.44 22.72,-5.82 -38.37,-44.03 -38.37,-44.03l-29.51,-7.29Z"
-      android:fillColor="#e6e6e6"/>
-<!--  <path-->
-<!--      android:pathData="M339.29,110.45c-4.3,-0.41 -8.31,4.73 -8.97,11.49a16.99,16.99 0,0 0,1.03 7.96l-0.64,7.67 -0.13,0.01 -8.95,35.22a27.07,27.07 0,0 0,4.89 23.56c3.14,3.93 6.83,6.32 10.19,2.78 5.58,-5.88 5.4,-34.59 4.81,-51.01l1.85,-17.07a16.99,16.99 0,0 0,2.53 -7.62c0.65,-6.76 -2.3,-12.57 -6.6,-12.99Z"-->
-<!--      android:fillColor="#ffb6b6"/>-->
-  <path
-      android:pathData="M296.99,134.08l-5.43,17.67 -23.1,-5.43 -1.36,-28.54Z"
-      android:fillColor="#ffb6b6"/>
-  <path
-      android:pathData="M264.38,142.23l29.89,2.72 11.98,11.7L322.81,170.77s9.51,13.59 6.79,31.25l16.31,13.59 -40.76,41.79 -51.64,-43.15s-17.67,-52.99 10.87,-72.02Z"
-      android:fillColor="#e6e6e6"/>
-  <path
-      android:pathData="M335.04,216.97l11.87,-1.36 19.26,1.36 63.27,-37.68a17.06,17.06 0,0 1,23.17 5.58l50.93,81.02 -16.31,10.87 -50.28,-51.64 -62.7,51.64S310.58,310.07 305.14,257.41L335.04,216.97Z"
-      android:fillColor="#2f2e41"/>
-  <path
-      android:pathData="M374.44,264.53l101.91,-9.51 88.93,17.26 12.98,-13.18L446.46,211.54l-47.56,12.23Z"
-      android:fillColor="#2f2e41"/>
-  <path
-      android:pathData="M260.15,153.29s-9.35,11.69 -3.58,19.8S298.91,214.95 298.91,214.95s23.38,18.06 23.21,-3.35 -33.41,-47.89 -33.41,-47.89Z"
-      android:fillColor="#e6e6e6"/>
-  <path
-      android:pathData="M263.26,109.13a25.8,25.8 0,1 0,51.6 0a25.8,25.8 0,1 0,-51.6 0z"
-      android:fillColor="#ffb6b6"/>
-  <path
-      android:pathData="M312.85,104.7c-6.62,-0.02 -6.99,0.03 -8.06,0 -8.21,-0.22 -10.35,-3.44 -14.51,-3.22 -7.42,0.39 2.38,37.62 6.45,54.82 4,16.88 -9.51,32 -10.48,33.06 -13.71,14.91 -37.79,17.64 -41.92,11.29 -3.35,-5.14 8.51,-12.95 5.64,-24.19 -2.8,-10.98 -15.73,-9.81 -19.35,-20.16 -3.79,-10.83 8.94,-16.3 16.93,-42.73 4.59,-15.18 3.78,-18.01 8.06,-27.41 11.45,-25.13 67.57,-14.43 61.27,8.87 -1.22,4.51 2.03,9.69 -4.03,9.68Z"
-      android:fillColor="#2f2e41"/>
-  <path
-      android:pathData="M142.78,130.95c28.64,2.3 94.68,50.27 94.68,50.27C289.18,232.99 366.41,236.06 418,238.11c76.7,3.05 134.76,-20.82 177.25,-38.29 0,0 82.86,-17.25 116.99,-43.05 0.1,-0.32 3.75,4.32 5.08,4.22 1.58,-0.12 -0.2,7.45 0,8.05 3.28,9.69 -50.89,57.78 -92.53,70.17 -5.67,1.69 -18.54,5.05 -31.73,15.32a81.18,81.18 0,0 0,-14.22 14.22c-11.17,14.06 -76.98,26.45 -144.3,28.85 -57.58,2.06 -97.15,7.25 -148.92,-33.22 -20.53,-16.05 -18.07,-17.24 -43.76,-37.2 -58.28,-45.27 -87.41,-67.91 -100.66,-75.49 -1.84,-1.05 -4.48,-19.9 -3.87,-21.82C137.87,128.1 140.73,130.78 142.78,130.95Z"
-      android:fillColor="#456ACA"/>
-  <path
-      android:pathData="M401.12,256.05c1.91,-3.87 -1.47,-9.45 -7.55,-12.46a16.99,16.99 0,0 0,-7.8 -1.86l-6.94,-3.32 0.04,-0.13L349.11,217.4a27.07,27.07 0,0 0,-23.76 -3.79c-4.78,1.54 -8.34,4.14 -6.22,8.54 3.51,7.3 30.42,17.33 45.98,22.61l15.3,7.79a16.99,16.99 0,0 0,6.22 5.07c6.09,3.01 12.57,2.31 14.48,-1.56Z"
-      android:fillColor="#ffb6b6"/>
-  <path
-      android:pathData="M49.57,41.57L63.8,41.57a6.57,6.57 0,0 1,6.57 6.57L70.36,449.68a6.57,6.57 0,0 1,-6.57 6.57L49.57,456.24A6.57,6.57 0,0 1,43.01 449.68L43.01,48.14A6.57,6.57 0,0 1,49.57 41.57Z"
-      android:fillColor="#7A8B9E"/>
-  <path
-      android:pathData="M779.35,41.57L793.57,41.57a6.57,6.57 0,0 1,6.57 6.57L800.14,449.68a6.57,6.57 0,0 1,-6.57 6.57L779.35,456.24A6.57,6.57 0,0 1,772.79 449.68L772.79,48.14A6.57,6.57 0,0 1,779.35 41.57Z"
-      android:fillColor="#7A8B9E"/>
-<!--  <path-->
-<!--      android:pathData="M340.88,85.19A9.7,9.7 114,1 1,335.3 97.72,9.7 9.7,114 0,1 340.88,85.19Z"-->
-<!--      android:fillColor="#e6e6e6"/>-->
-<!--  <path-->
-<!--      android:pathData="M320.25,101.37L345.16,91.81A1.21,1.21 114,0 1,346.72 92.51L348.19,116.62a1.21,1.21 114,0 1,-0.7 1.57L337.3,122.1a1.21,1.21 114,0 1,-1.57 -0.7L319.56,102.94A1.21,1.21 114,0 1,320.25 101.37Z"-->
-<!--      android:fillColor="#4E998C"/>-->
-<!--  <path-->
-<!--      android:pathData="M339.83,118.53L343.23,117.23L348.87,131.94L345.48,133.25Z"-->
-<!--      android:fillColor="#4E998C"/>-->
-<!--  <path-->
-<!--      android:pathData="M346.74,131.46c4.69,-1.8 8.78,-2.5 9.14,-1.56S352.73,133.06 348.05,134.86 339.26,137.36 338.9,136.42 342.05,133.26 346.74,131.46Z"-->
-<!--      android:fillColor="#4E998C"/>-->
-</vector>
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2025-10-09T16:57:23.367251200Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"PhysicalDevice\" identifier=\"serial=918616c6\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 72a29b8835dc68bb3b7c52ddd5535b8e1f370a34)
+++ b/.idea/deploymentTargetSelector.xml	(date 1761514888935)
@@ -4,7 +4,7 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
-        <DropdownSelection timestamp="2025-10-09T16:57:23.367251200Z">
+        <DropdownSelection timestamp="2025-10-26T21:40:52.213157800Z">
           <Target type="DEFAULT_BOOT">
             <handle>
               <DeviceId pluginId="PhysicalDevice" identifier="serial=918616c6" />
