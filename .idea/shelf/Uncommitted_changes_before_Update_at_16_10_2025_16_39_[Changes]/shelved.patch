Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.compose)\r\n    alias(libs.plugins.hilt)\r\n    alias(libs.plugins.ksp)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.tutorly\"\r\n    compileSdk = 36\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.tutorly\"\r\n        minSdk = 26\r\n        targetSdk = 36\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_17\r\n        targetCompatibility = JavaVersion.VERSION_17\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"17\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n}\r\n\r\nkotlin {\r\n    compilerOptions {\r\n        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17)\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.compose.animation)\r\n    implementation(libs.androidx.compose.animation.core)\r\n    implementation(libs.androidx.compose.animation.graphics)\r\n    implementation(libs.androidx.compose.ui)\r\n    implementation(libs.androidx.compose.ui.graphics)\r\n    implementation(libs.androidx.compose.ui.tooling.preview)\r\n    implementation(libs.androidx.compose.foundation)\r\n    implementation(libs.androidx.compose.material3)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.compose.ui.test.junit4)\r\n    debugImplementation(libs.androidx.compose.ui.tooling)\r\n    debugImplementation(libs.androidx.compose.ui.test.manifest)\r\n\r\n// Навигация (Compose)\r\n    implementation(libs.androidx.navigation.compose)\r\n    implementation(libs.accompanist.navigation.animation)\r\n\r\n// Коррутины\r\n    implementation(libs.kotlinx.coroutines.android)\r\n    implementation(libs.kotlinx.coroutines.core)\r\n\r\n// ViewModel для Compose\r\n    implementation(libs.androidx.lifecycle.viewmodel.compose)\r\n\r\n// (Опц.) Иконки Material\r\n    implementation(libs.androidx.compose.material.icons.extended)\r\n\r\n// (Опц.) SplashScreen API\r\n    implementation(libs.androidx.core.splashscreen)\r\n\r\n// (Опц.) десугаринг Java time\r\n    coreLibraryDesugaring(libs.desugar.jdk.libs)\r\n    implementation(libs.androidx.compose.material.icons.extended)\r\n\r\n    implementation(libs.room.runtime)\r\n    implementation(libs.room.ktx)\r\n    ksp(libs.room.compiler)\r\n    implementation(libs.hilt.android)\r\n    ksp(libs.hilt.compiler)\r\n    implementation(libs.hilt.navigation.compose)\r\n\r\n}\r\nconfigurations.configureEach {\r\n    resolutionStrategy.eachDependency {\r\n        // JavaPoet — нужна версия с ClassName.canonicalName()\r\n        if (requested.group == \"com.squareup\" && requested.name == \"javapoet\") {\r\n            useVersion(\"1.13.0\")\r\n        }\r\n        // kotlinx-metadata-jvm — должна понимать Kotlin metadata 2.2.x\r\n        if (requested.group == \"org.jetbrains.kotlinx\" && requested.name == \"kotlinx-metadata-jvm\") {\r\n            useVersion(\"0.9.0\")\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 4f78cf180cb979772532b1d24dc0156581a6b89f)
+++ b/app/build.gradle.kts	(date 1760619332343)
@@ -97,6 +97,7 @@
     ksp(libs.hilt.compiler)
     implementation(libs.hilt.navigation.compose)
 
+
 }
 configurations.configureEach {
     resolutionStrategy.eachDependency {
Index: app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.animation.AnimatedVisibilityScope\r\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\r\nimport androidx.compose.animation.SharedTransitionScope\r\nimport androidx.compose.animation.animateColorAsState\r\nimport androidx.compose.animation.core.FastOutSlowInEasing\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.core.animateDpAsState\r\nimport androidx.compose.animation.core.animateFloatAsState\r\n//import androidx.compose.animation.sharedBounds\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.navigationBarsPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.LazyListState\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.outlined.Archive\r\nimport androidx.compose.material.icons.outlined.CalendarToday\r\nimport androidx.compose.material.icons.outlined.CreditCard\r\nimport androidx.compose.material.icons.outlined.Delete\r\nimport androidx.compose.material.icons.outlined.Email\r\nimport androidx.compose.material.icons.outlined.Phone\r\nimport androidx.compose.material.icons.outlined.Savings\r\nimport androidx.compose.material.icons.outlined.Schedule\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.Unarchive\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.HorizontalDivider\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.derivedStateOf\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.graphics.graphicsLayer\r\nimport androidx.compose.ui.graphics.lerp\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.IntOffset\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.StudentProfile\r\nimport com.tutorly.domain.model.StudentProfileLesson\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport com.tutorly.ui.components.PaymentBadgeStatus\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\r\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\r\nimport com.tutorly.ui.lessoncreation.LessonCreationConfig\r\nimport com.tutorly.ui.lessoncreation.LessonCreationOrigin\r\nimport com.tutorly.ui.lessoncreation.LessonCreationSheet\r\nimport com.tutorly.ui.lessoncreation.LessonCreationViewModel\r\nimport com.tutorly.ui.theme.PrimaryTextColor\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport java.text.NumberFormat\r\nimport java.time.Instant\r\nimport java.time.ZoneId\r\nimport java.time.ZonedDateTime\r\nimport java.time.YearMonth\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\nimport kotlin.math.roundToInt\r\nimport kotlinx.coroutines.launch\r\n\r\nprivate val StudentProfileTopBarOverlap = 72.dp\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalSharedTransitionApi::class)\r\n@Composable\r\nfun StudentDetailsScreen(\r\n    onBack: () -> Unit,\r\n    onEdit: (Long, StudentEditTarget) -> Unit,\r\n    onAddStudentFromCreation: () -> Unit = {},\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentDetailsViewModel = hiltViewModel(),\r\n    creationViewModel: LessonCreationViewModel,\r\n    sharedTransitionScope: SharedTransitionScope? = null,\r\n    animatedVisibilityScope: AnimatedVisibilityScope? = null,\r\n) {\r\n    val state by vm.uiState.collectAsState()\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\r\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\r\n    val creationState by creationViewModel.uiState.collectAsState()\r\n    val context = LocalContext.current\r\n    val density = LocalDensity.current\r\n    val listState = rememberLazyListState()\r\n    val overlapPx = remember(density) { with(density) { StudentProfileTopBarOverlap.roundToPx() } }\r\n    val topBarAppearanceProgress by remember(listState, overlapPx) {\r\n        derivedStateOf {\r\n            val firstVisibleIndex = listState.firstVisibleItemIndex\r\n            if (firstVisibleIndex > 0) {\r\n                1f\r\n            } else {\r\n                (listState.firstVisibleItemScrollOffset / overlapPx.toFloat()).coerceIn(0f, 1f)\r\n            }\r\n        }\r\n    }\r\n    val animatedTopBarProgress by animateFloatAsState(\r\n        targetValue = topBarAppearanceProgress,\r\n        animationSpec = tween(durationMillis = 300, easing = FastOutSlowInEasing),\r\n        label = \"studentTopBarAppearance\"\r\n    )\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    var showPrepaymentDialog by rememberSaveable { mutableStateOf(false) }\r\n    var isArchiving by remember { mutableStateOf(false) }\r\n    var showDeleteDialog by rememberSaveable { mutableStateOf(false) }\r\n    var isDeleting by remember { mutableStateOf(false) }\r\n    LessonCardSheet(\r\n        state = lessonCardState,\r\n        onDismissRequest = lessonCardViewModel::dismiss,\r\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            lessonCardViewModel.dismiss()\r\n            onAddStudentFromCreation()\r\n        },\r\n        onDateSelect = lessonCardViewModel::onDateSelected,\r\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\r\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\r\n        onPriceChange = lessonCardViewModel::onPriceChanged,\r\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\r\n        onNoteChange = lessonCardViewModel::onNoteChanged,\r\n        onDeleteLesson = lessonCardViewModel::deleteLesson,\r\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\r\n    )\r\n\r\n    LessonCreationSheet(\r\n        state = creationState,\r\n        onDismiss = { creationViewModel.dismiss() },\r\n        onStudentQueryChange = creationViewModel::onStudentQueryChange,\r\n        onStudentSelect = creationViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            creationViewModel.prepareForStudentCreation()\r\n            creationViewModel.dismiss()\r\n            onAddStudentFromCreation()\r\n        },\r\n        onSubjectInputChange = creationViewModel::onSubjectInputChanged,\r\n        onSubjectSelect = creationViewModel::onSubjectSelected,\r\n        onDateSelect = creationViewModel::onDateSelected,\r\n        onTimeSelect = creationViewModel::onTimeSelected,\r\n        onDurationChange = creationViewModel::onDurationChanged,\r\n        onPriceChange = creationViewModel::onPriceChanged,\r\n        onNoteChange = creationViewModel::onNoteChanged,\r\n        onSubmit = creationViewModel::submit,\r\n        onConfirmConflict = creationViewModel::confirmConflict,\r\n        onDismissConflict = creationViewModel::dismissConflict\r\n    )\r\n\r\n    LaunchedEffect(creationState.snackbarMessage) {\r\n        val message = creationState.snackbarMessage\r\n        if (message != null) {\r\n            snackbarHostState.showSnackbar(message)\r\n            creationViewModel.consumeSnackbar()\r\n        }\r\n    }\r\n\r\n    if (showPrepaymentDialog) {\r\n        StudentPrepaymentDialog(\r\n            onDismiss = { showPrepaymentDialog = false },\r\n            onSaved = { result ->\r\n                showPrepaymentDialog = false\r\n                val amountText = formatMoneyInput(result.depositedCents)\r\n                val message = if (result.debtCoveredCents > 0) {\r\n                    val debtText = formatMoneyInput(result.debtCoveredCents)\r\n                    context.getString(R.string.student_prepayment_success_with_debt, amountText, debtText)\r\n                } else {\r\n                    context.getString(R.string.student_prepayment_success, amountText)\r\n                }\r\n                coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n            }\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(showDeleteDialog) {\r\n        if (!showDeleteDialog) {\r\n            isDeleting = false\r\n        }\r\n    }\r\n\r\n    val contentState = state as? StudentProfileUiState.Content\r\n\r\n    val title = contentState?.profile?.student?.name\r\n        ?: stringResource(id = R.string.student_details_title_placeholder)\r\n\r\n    val openLessonCreation: (Long) -> Unit = { id ->\r\n        creationViewModel.start(\r\n            LessonCreationConfig(\r\n                studentId = id,\r\n                zoneId = ZonedDateTime.now().zone,\r\n                origin = LessonCreationOrigin.STUDENT\r\n            )\r\n        )\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            StudentProfileTopBar(\r\n                title = title,\r\n                isArchived = contentState?.profile?.student?.isArchived,\r\n                onBack = onBack,\r\n                onArchiveClick = contentState?.let {\r\n                    {\r\n                        if (!isArchiving) {\r\n                            isArchiving = true\r\n                            vm.toggleArchive(\r\n                                onComplete = { isArchiving = false },\r\n                                onError = { throwable ->\r\n                                    val message = throwable.message?.takeIf { it.isNotBlank() }\r\n                                        ?: context.getString(R.string.student_details_archive_error)\r\n                                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                                }\r\n                            )\r\n                        }\r\n                    }\r\n                },\r\n                onDeleteClick = contentState?.let { { showDeleteDialog = true } },\r\n                archiveEnabled = !isArchiving,\r\n                deleteEnabled = !isDeleting,\r\n                appearanceProgress = animatedTopBarProgress\r\n            )\r\n        },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        floatingActionButton = {\r\n            contentState?.let { current ->\r\n                val profile = current.profile\r\n                FloatingActionButton(\r\n                    onClick = { openLessonCreation(profile.student.id) },\r\n                    modifier = Modifier.navigationBarsPadding(),\r\n                    containerColor = MaterialTheme.colorScheme.primary,\r\n                    contentColor = MaterialTheme.colorScheme.onPrimary\r\n                ) {\r\n                    Icon(imageVector = Icons.Outlined.CalendarToday, contentDescription = null)\r\n                }\r\n            }\r\n        },\r\n        containerColor = Color.Transparent\r\n    ) { innerPadding ->\r\n        when (val currentState = state) {\r\n            StudentProfileUiState.Hidden, StudentProfileUiState.Loading -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n\r\n            StudentProfileUiState.Error -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_profile_error),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n\r\n            is StudentProfileUiState.Content -> {\r\n                StudentProfileContent(\r\n                    profile = currentState.profile,\r\n                    onEdit = onEdit,\r\n                    onAddLesson = openLessonCreation,\r\n                    onPrepaymentClick = { showPrepaymentDialog = true },\r\n                    onLessonClick = lessonCardViewModel::open,\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                        .offset { IntOffset(x = 0, y = -overlapPx) },\r\n                    listState = listState,\r\n                    sharedTransitionScope = sharedTransitionScope,\r\n                    animatedVisibilityScope = animatedVisibilityScope,\r\n                    topBarAppearanceProgress = animatedTopBarProgress\r\n                )\r\n    }\r\n}\r\n\r\n    if (showDeleteDialog && contentState != null) {\r\n        val studentName = contentState.profile.student.name\r\n        AlertDialog(\r\n            onDismissRequest = {\r\n                if (!isDeleting) {\r\n                    showDeleteDialog = false\r\n                }\r\n            },\r\n            title = { Text(text = stringResource(id = R.string.student_details_delete_title)) },\r\n            text = {\r\n                Text(text = stringResource(id = R.string.student_details_delete_message, studentName))\r\n            },\r\n            confirmButton = {\r\n                TextButton(\r\n                    onClick = {\r\n                        if (!isDeleting) {\r\n                            isDeleting = true\r\n                            vm.deleteStudent(\r\n                                onSuccess = {\r\n                                    isDeleting = false\r\n                                    showDeleteDialog = false\r\n                                    onBack()\r\n                                },\r\n                                onError = { throwable ->\r\n                                    isDeleting = false\r\n                                    val message = throwable.message?.takeIf { it.isNotBlank() }\r\n                                        ?: context.getString(R.string.student_details_delete_error)\r\n                                    coroutineScope.launch { snackbarHostState.showSnackbar(message) }\r\n                                }\r\n                            )\r\n                        }\r\n                    },\r\n                    enabled = !isDeleting\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_details_delete_confirm))\r\n                }\r\n            },\r\n            dismissButton = {\r\n                TextButton(\r\n                    onClick = { showDeleteDialog = false },\r\n                    enabled = !isDeleting\r\n                ) {\r\n                    Text(text = stringResource(id = R.string.student_details_delete_cancel))\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun StudentProfileTopBar(\r\n    title: String,\r\n    isArchived: Boolean?,\r\n    onBack: () -> Unit,\r\n    onArchiveClick: (() -> Unit)? = null,\r\n    onDeleteClick: (() -> Unit)? = null,\r\n    archiveEnabled: Boolean = true,\r\n    deleteEnabled: Boolean = true,\r\n    appearanceProgress: Float,\r\n) {\r\n    val surfaceOverlayAlpha by animateFloatAsState(\r\n        targetValue = 1f - appearanceProgress,\r\n        animationSpec = tween(durationMillis = 200, easing = FastOutSlowInEasing),\r\n        label = \"studentTopBarSurfaceOverlay\"\r\n    )\r\n    val density = LocalDensity.current\r\n    val emergenceTranslationPx = remember(density) { with(density) { 20.dp.toPx() } }\r\n    val targetContentColor = lerp(\r\n        start = MaterialTheme.colorScheme.onSurface,\r\n        stop = Color.White,\r\n        fraction = appearanceProgress\r\n    )\r\n    val contentColor by animateColorAsState(\r\n        targetValue = targetContentColor,\r\n        label = \"studentTopBarContent\"\r\n    )\r\n\r\n    GradientTopBarContainer {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(135.dp)\r\n        ) {\r\n            if (surfaceOverlayAlpha > 0f) {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .graphicsLayer { alpha = surfaceOverlayAlpha }\r\n                        .background(color = MaterialTheme.colorScheme.surface)\r\n                )\r\n            }\r\n            TopAppBar(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(135.dp)\r\n                    .graphicsLayer {\r\n                        alpha = appearanceProgress\r\n                        translationY = (1f - appearanceProgress) * emergenceTranslationPx\r\n                    },\r\n                title = {\r\n                    Box(\r\n                        modifier = Modifier\r\n                            .fillMaxHeight()\r\n                            .fillMaxWidth()\r\n                            .padding(start = 30.dp),\r\n                        contentAlignment = Alignment.CenterStart\r\n                    ) {\r\n                        Text(\r\n                            text = title,\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis,\r\n                            color = contentColor\r\n                        )\r\n                    }\r\n                },\r\n                navigationIcon = {\r\n                    IconButton(onClick = onBack) {\r\n                        Icon(\r\n                            imageVector = Icons.Filled.ArrowBack,\r\n                            contentDescription = stringResource(id = R.string.student_details_back)\r\n                        )\r\n                    }\r\n                },\r\n                actions = {\r\n                    if (onArchiveClick != null && isArchived != null) {\r\n                        IconButton(onClick = onArchiveClick, enabled = archiveEnabled) {\r\n                            val (icon, description) = if (isArchived) {\r\n                                Icons.Outlined.Unarchive to stringResource(id = R.string.student_details_unarchive)\r\n                            } else {\r\n                                Icons.Outlined.Archive to stringResource(id = R.string.student_details_archive)\r\n                            }\r\n                            Icon(imageVector = icon, contentDescription = description)\r\n                        }\r\n                    }\r\n                    if (onDeleteClick != null) {\r\n                        IconButton(onClick = onDeleteClick, enabled = deleteEnabled) {\r\n                            Icon(\r\n                                imageVector = Icons.Outlined.Delete,\r\n                                contentDescription = stringResource(id = R.string.student_details_delete)\r\n                            )\r\n                        }\r\n                    }\r\n                },\r\n                colors = TopAppBarDefaults.topAppBarColors(\r\n                    containerColor = Color.Transparent,\r\n                    scrolledContainerColor = Color.Transparent,\r\n                    titleContentColor = contentColor,\r\n                    navigationIconContentColor = contentColor,\r\n                    actionIconContentColor = contentColor\r\n                ),\r\n                windowInsets = WindowInsets(0, 0, 0, 0)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalSharedTransitionApi::class)\r\n@Composable\r\nprivate fun StudentProfileContent(\r\n    profile: StudentProfile,\r\n    onEdit: (Long, StudentEditTarget) -> Unit,\r\n    onAddLesson: (Long) -> Unit,\r\n    onPrepaymentClick: (Long) -> Unit,\r\n    onLessonClick: (Long) -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    listState: LazyListState,\r\n    sharedTransitionScope: SharedTransitionScope? = null,\r\n    animatedVisibilityScope: AnimatedVisibilityScope? = null,\r\n    topBarAppearanceProgress: Float\r\n) {\r\n    val locale = remember { Locale(\"ru\", \"RU\") }\r\n    val numberFormatter = remember(locale) {\r\n        NumberFormat.getNumberInstance(locale).apply {\r\n            maximumFractionDigits = 0\r\n            minimumFractionDigits = 0\r\n        }\r\n    }\r\n    val currencyFormatter = remember(locale) {\r\n        NumberFormat.getCurrencyInstance(locale).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n            minimumFractionDigits = 0\r\n        }\r\n    }\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val referenceTime = remember(profile) { Instant.now() }\r\n    val dateFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"d MMMM yyyy\", locale) }\r\n    val timeFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"HH:mm\", locale) }\r\n    val monthFormatter = remember(locale) { DateTimeFormatter.ofPattern(\"LLLL yyyy\", locale) }\r\n\r\n    val groupedLessons = remember(profile.recentLessons, zoneId) {\r\n        val sorted = profile.recentLessons.sortedByDescending { it.startAt }\r\n        val groups = linkedMapOf<YearMonth, MutableList<StudentProfileLesson>>()\r\n        sorted.forEach { lesson ->\r\n            val key = YearMonth.from(lesson.startAt.atZone(zoneId))\r\n            groups.getOrPut(key) { mutableListOf() }.add(lesson)\r\n        }\r\n        groups.map { it.key to it.value.toList() }\r\n    }\r\n    val sharedElementKey = \"student-card-${profile.student.id}\"\r\n\r\n    LazyColumn(\r\n        state = listState,\r\n        modifier = modifier,\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(24.dp)\r\n    ) {\r\n        item {\r\n            StudentProfileHeader(\r\n                profile = profile,\r\n                onEdit = { target -> onEdit(profile.student.id, target) },\r\n                sharedTransitionScope = sharedTransitionScope,\r\n                animatedVisibilityScope = animatedVisibilityScope,\r\n                sharedContentKey = sharedElementKey,\r\n                collapseProgress = topBarAppearanceProgress\r\n            )\r\n        }\r\n\r\n        item {\r\n            StudentProfileMetricsSection(\r\n                profile = profile,\r\n                numberFormatter = numberFormatter,\r\n                onRateClick = { onEdit(profile.student.id, StudentEditTarget.RATE) },\r\n                onPrepaymentClick = { onPrepaymentClick(profile.student.id) }\r\n            )\r\n        }\r\n\r\n        item {\r\n            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                ProfileContactsCard(\r\n                    phone = profile.student.phone,\r\n                    messenger = profile.student.messenger,\r\n                    onPhoneClick = { onEdit(profile.student.id, StudentEditTarget.PHONE) },\r\n                    onMessengerClick = { onEdit(profile.student.id, StudentEditTarget.MESSENGER) }\r\n                )\r\n                ProfileInfoCard(\r\n                    icon = Icons.Outlined.StickyNote2,\r\n                    label = stringResource(id = R.string.student_details_notes_title),\r\n                    value = profile.student.note,\r\n                    onClick = { onEdit(profile.student.id, StudentEditTarget.NOTES) },\r\n                    valueMaxLines = 4\r\n                )\r\n            }\r\n        }\r\n\r\n        item {\r\n            Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                Text(\r\n                    text = stringResource(id = R.string.student_details_history_title),\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n\r\n                if (groupedLessons.isEmpty()) {\r\n                    StudentProfileEmptyHistory(\r\n                        onAddLesson = { onAddLesson(profile.student.id) }\r\n                    )\r\n                } else {\r\n                    Column(verticalArrangement = Arrangement.spacedBy(16.dp)) {\r\n                        groupedLessons.forEach { (month, lessons) ->\r\n                            Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n                                Text(\r\n                                    text = monthFormatter.format(month),\r\n                                    style = MaterialTheme.typography.titleSmall,\r\n                                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                                )\r\n                                lessons.forEach { lesson ->\r\n                                    StudentProfileLessonCard(\r\n                                        lesson = lesson,\r\n                                        fallbackSubject = profile.subject,\r\n                                        currencyFormatter = currencyFormatter,\r\n                                        zoneId = zoneId,\r\n                                        dateFormatter = dateFormatter,\r\n                                        timeFormatter = timeFormatter,\r\n                                        referenceTime = referenceTime,\r\n                                        onClick = { onLessonClick(lesson.id) }\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        item { Spacer(modifier = Modifier.height(60.dp)) }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalSharedTransitionApi::class)\r\n@Composable\r\nprivate fun StudentProfileHeader(\r\n    profile: StudentProfile,\r\n    onEdit: (StudentEditTarget) -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    sharedTransitionScope: SharedTransitionScope? = null,\r\n    animatedVisibilityScope: AnimatedVisibilityScope? = null,\r\n    sharedContentKey: String? = null,\r\n    collapseProgress: Float,\r\n) {\r\n    val collapseFraction = collapseProgress.coerceIn(0f, 1f)\r\n    val baseCorner = 28.dp\r\n    val topCornerTarget = baseCorner * (1f - collapseFraction)\r\n    val animatedTopCorners by animateDpAsState(\r\n        targetValue = topCornerTarget,\r\n        animationSpec = tween(durationMillis = 300, easing = FastOutSlowInEasing),\r\n        label = \"studentProfileHeaderTopCorners\"\r\n    )\r\n    val animatedElevation by animateDpAsState(\r\n        targetValue = if (collapseFraction >= 1f) 0.dp else 6.dp,\r\n        animationSpec = tween(durationMillis = 300, easing = FastOutSlowInEasing),\r\n        label = \"studentProfileHeaderElevation\"\r\n    )\r\n    val headerShape = RoundedCornerShape(\r\n        topStart = animatedTopCorners,\r\n        topEnd = animatedTopCorners,\r\n        bottomStart = baseCorner,\r\n        bottomEnd = baseCorner\r\n    )\r\n\r\n    val sharedModifier = if (\r\n        sharedTransitionScope != null &&\r\n        animatedVisibilityScope != null &&\r\n        sharedContentKey != null\r\n    ) {\r\n        with(sharedTransitionScope) {\r\n            val sharedState = rememberSharedContentState(key = sharedContentKey)\r\n            Modifier.sharedBounds(\r\n                sharedContentState = sharedState,\r\n                animatedVisibilityScope = animatedVisibilityScope,\r\n                boundsTransform = { _, _ -> tween(durationMillis = 450, easing = FastOutSlowInEasing) }\r\n            )\r\n        }\r\n    } else {\r\n        Modifier\r\n    }\r\n\r\n    Card(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .then(sharedModifier)\r\n            .clickable { onEdit(StudentEditTarget.PROFILE) },\r\n        shape = headerShape,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = CardDefaults.cardElevation(\r\n            defaultElevation = animatedElevation,\r\n            pressedElevation = animatedElevation,\r\n            focusedElevation = animatedElevation,\r\n            hoveredElevation = animatedElevation,\r\n            draggedElevation = animatedElevation,\r\n            disabledElevation = 0.dp\r\n        )\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 20.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            StudentAvatar(name = profile.student.name, size = 64.dp)\r\n            Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {\r\n                Text(\r\n                    text = profile.student.name,\r\n                    style = MaterialTheme.typography.headlineSmall,\r\n                    color = MaterialTheme.colorScheme.onSurface\r\n                )\r\n                val subject = profile.subject?.takeIf { it.isNotBlank() }?.trim()\r\n                val grade = profile.grade?.takeIf { it.isNotBlank() }?.trim()\r\n                val details = listOfNotNull(grade, subject).joinToString(separator = \" • \")\r\n                if (details.isNotEmpty()) {\r\n                    Text(\r\n                        text = details,\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileInfoCard(\r\n    icon: ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    valueMaxLines: Int = 2,\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() }\r\n        ?: stringResource(id = R.string.student_profile_contact_placeholder)\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Row(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 14.dp),\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Icon(\r\n                imageVector = icon,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n                Text(\r\n                    text = label,\r\n                    style = MaterialTheme.typography.bodySmall,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n                Text(\r\n                    text = displayValue,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = if (hasValue) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    maxLines = valueMaxLines,\r\n                    overflow = TextOverflow.Ellipsis\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileMetricsSection(\r\n    profile: StudentProfile,\r\n    numberFormatter: NumberFormat,\r\n    onRateClick: () -> Unit,\r\n    onPrepaymentClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val lessonsCount = profile.metrics.totalLessons.toString()\r\n    val baseRateCents = profile.student.rateCents?.takeIf { it > 0 }\r\n    val recentRateCents = profile.rate?.let { rate ->\r\n        if (rate.durationMinutes > 0) {\r\n            ((rate.priceCents.toDouble() * 60) / rate.durationMinutes).roundToInt()\r\n        } else {\r\n            null\r\n        }\r\n    }\r\n    val rateCents = baseRateCents ?: recentRateCents\r\n    val rateValue = rateCents?.let { cents ->\r\n        numberFormatter.format(cents / 100.0)\r\n    } ?: stringResource(id = R.string.students_rate_placeholder)\r\n    val earnedValue = numberFormatter.format(profile.metrics.totalPaidCents / 100.0)\r\n    val prepaymentValue = numberFormatter.format(profile.metrics.prepaymentCents / 100.0)\r\n\r\n    Column(\r\n        modifier = modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.CalendarToday,\r\n                    value = lessonsCount,\r\n                    label = stringResource(id = R.string.student_profile_metrics_lessons_label)\r\n                )\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.Schedule,\r\n                    value = rateValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_rate_label),\r\n                    onClick = onRateClick\r\n                )\r\n            }\r\n            Column(\r\n                modifier = Modifier.weight(1f),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.CreditCard,\r\n                    value = earnedValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_earned_label)\r\n                )\r\n                ProfileMetricTile(\r\n                    icon = Icons.Outlined.Savings,\r\n                    value = prepaymentValue,\r\n                    label = stringResource(id = R.string.student_profile_metrics_prepayment_label),\r\n                    onClick = onPrepaymentClick\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileMetricTile(\r\n    icon: ImageVector,\r\n    value: String,\r\n    label: String,\r\n    modifier: Modifier = Modifier,\r\n    onClick: (() -> Unit)? = null\r\n) {\r\n    val cardModifier = modifier.fillMaxWidth()\r\n    val content: @Composable () -> Unit = {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(vertical = 16.dp, horizontal = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(6.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Icon(\r\n                imageVector = icon,\r\n                contentDescription = null,\r\n                tint = MaterialTheme.colorScheme.primary\r\n            )\r\n            Text(\r\n                text = value,\r\n                style = MaterialTheme.typography.titleLarge,\r\n                fontWeight = FontWeight.SemiBold,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n    if (onClick != null) {\r\n        Card(\r\n            onClick = onClick,\r\n            modifier = cardModifier,\r\n            shape = MaterialTheme.shapes.large,\r\n            colors = TutorlyCardDefaults.colors(),\r\n            elevation = TutorlyCardDefaults.elevation()\r\n        ) { content() }\r\n    } else {\r\n        Card(\r\n            modifier = cardModifier,\r\n            shape = MaterialTheme.shapes.large,\r\n            colors = TutorlyCardDefaults.colors(),\r\n            elevation = TutorlyCardDefaults.elevation()\r\n        ) { content() }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactsCard(\r\n    phone: String?,\r\n    messenger: String?,\r\n    onPhoneClick: () -> Unit,\r\n    onMessengerClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(\r\n        modifier = modifier\r\n            .fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.fillMaxWidth()\r\n        ) {\r\n            ProfileContactRow(\r\n                icon = Icons.Outlined.Phone,\r\n                label = stringResource(id = R.string.student_details_phone_label),\r\n                value = phone,\r\n                placeholder = stringResource(id = R.string.student_profile_contact_placeholder),\r\n                onClick = onPhoneClick\r\n            )\r\n            HorizontalDivider(color = MaterialTheme.colorScheme.outlineVariant.copy(alpha = 0.4f))\r\n            ProfileContactRow(\r\n                icon = Icons.Outlined.Email,\r\n                label = stringResource(id = R.string.student_details_messenger_label),\r\n                value = messenger,\r\n                placeholder = stringResource(id = R.string.student_profile_contact_placeholder),\r\n                onClick = onMessengerClick,\r\n                modifier = Modifier.padding(bottom = 16.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ProfileContactRow(\r\n    icon: ImageVector,\r\n    label: String,\r\n    value: String?,\r\n    placeholder: String,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val hasValue = !value.isNullOrBlank()\r\n    val displayValue = value?.takeIf { it.isNotBlank() } ?: placeholder\r\n    Row(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .clickable(onClick = onClick)\r\n            .padding(horizontal = 16.dp, vertical = 12.dp),\r\n        verticalAlignment = Alignment.CenterVertically,\r\n        horizontalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Column(verticalArrangement = Arrangement.spacedBy(4.dp)) {\r\n            Text(\r\n                text = label,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = displayValue,\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = if (hasValue) MaterialTheme.colorScheme.onSurface else MaterialTheme.colorScheme.onSurfaceVariant,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileEmptyHistory(\r\n    onAddLesson: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 16.dp, vertical = 24.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_history_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = androidx.compose.ui.text.style.TextAlign.Center\r\n            )\r\n            Button(onClick = onAddLesson) {\r\n                Text(text = stringResource(id = R.string.student_details_create_lesson))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentProfileLessonCard(\r\n    lesson: StudentProfileLesson,\r\n    fallbackSubject: String?,\r\n    currencyFormatter: NumberFormat,\r\n    zoneId: ZoneId,\r\n    dateFormatter: DateTimeFormatter,\r\n    timeFormatter: DateTimeFormatter,\r\n    referenceTime: Instant,\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val start = remember(lesson.startAt, zoneId) { lesson.startAt.atZone(zoneId) }\r\n    val end = remember(lesson.endAt, zoneId) { lesson.endAt.atZone(zoneId) }\r\n    val dateText = remember(start) { dateFormatter.format(start) }\r\n    val minutesSuffix = stringResource(id = R.string.lesson_create_minutes_suffix)\r\n    val timeText = remember(start, end, lesson.durationMinutes, minutesSuffix) {\r\n        \"${timeFormatter.format(start)} — ${timeFormatter.format(end)} · ${lesson.durationMinutes} $minutesSuffix\"\r\n    }\r\n    val fallbackSubjectText = fallbackSubject?.takeIf { it.isNotBlank() }?.trim()\r\n    val title = lesson.title?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: lesson.subjectName?.takeIf { it.isNotBlank() }?.trim()\r\n        ?: fallbackSubjectText\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val amount = currencyFormatter.format(lesson.priceCents / 100.0)\r\n    val isPaid = lesson.paymentStatus == PaymentStatus.PAID\r\n    val isUpcoming = lesson.startAt.isAfter(referenceTime)\r\n    val badgeStatus = when {\r\n        !isPaid -> PaymentBadgeStatus.DEBT\r\n        isUpcoming -> PaymentBadgeStatus.PREPAID\r\n        else -> PaymentBadgeStatus.PAID\r\n    }\r\n\r\n    Card(\r\n        onClick = onClick,\r\n        modifier = modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier.padding(horizontal = 16.dp, vertical = 16.dp),\r\n            verticalArrangement = Arrangement.spacedBy(8.dp)\r\n        ) {\r\n            Text(\r\n                text = dateText,\r\n                style = MaterialTheme.typography.labelSmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Text(\r\n                text = title,\r\n                style = MaterialTheme.typography.titleMedium,\r\n                maxLines = 2,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n            Text(\r\n                text = timeText,\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.SpaceBetween,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Text(\r\n                    text = amount,\r\n                    style = MaterialTheme.typography.titleMedium\r\n                )\r\n                PaymentBadge(status = badgeStatus)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentAvatar(\r\n    name: String,\r\n    size: androidx.compose.ui.unit.Dp = 48.dp,\r\n) {\r\n    val initials = remember(name) {\r\n        name\r\n            .split(\" \")\r\n            .filter { it.isNotBlank() }\r\n            .take(2)\r\n            .joinToString(separator = \"\") { it.first().uppercaseChar().toString() }\r\n            .ifEmpty { \"?\" }\r\n    }\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .size(size)\r\n            .clip(CircleShape)\r\n            .background(MaterialTheme.colorScheme.surfaceVariant),\r\n        contentAlignment = Alignment.Center\r\n    ) {\r\n        Text(\r\n            text = initials,\r\n            style = MaterialTheme.typography.headlineSmall.copy(fontWeight = FontWeight.Bold),\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(revision 4f78cf180cb979772532b1d24dc0156581a6b89f)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(date 1760619332384)
@@ -23,6 +23,7 @@
 import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.navigationBarsPadding
+import androidx.compose.foundation.layout.offset
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
 import androidx.compose.foundation.lazy.LazyColumn
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n        <DropdownSelection timestamp=\"2025-10-09T16:57:23.367251200Z\">\r\n          <Target type=\"DEFAULT_BOOT\">\r\n            <handle>\r\n              <DeviceId pluginId=\"PhysicalDevice\" identifier=\"serial=918616c6\" />\r\n            </handle>\r\n          </Target>\r\n        </DropdownSelection>\r\n        <DialogSelection />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 4f78cf180cb979772532b1d24dc0156581a6b89f)
+++ b/.idea/deploymentTargetSelector.xml	(date 1760619332435)
@@ -4,7 +4,7 @@
     <selectionStates>
       <SelectionState runConfigName="app">
         <option name="selectionMode" value="DROPDOWN" />
-        <DropdownSelection timestamp="2025-10-09T16:57:23.367251200Z">
+        <DropdownSelection timestamp="2025-10-16T12:30:11.170168400Z">
           <Target type="DEFAULT_BOOT">
             <handle>
               <DeviceId pluginId="PhysicalDevice" identifier="serial=918616c6" />
