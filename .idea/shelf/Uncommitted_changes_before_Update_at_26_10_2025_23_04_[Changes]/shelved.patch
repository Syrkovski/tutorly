Index: app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.animation.animateContentSize\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.combinedClickable\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.ColumnScope\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.lazy.rememberLazyListState\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Check\r\nimport androidx.compose.material.icons.filled.ExpandLess\r\nimport androidx.compose.material.icons.filled.ExpandMore\r\nimport androidx.compose.material.icons.outlined.LockOpen\r\nimport androidx.compose.material.icons.outlined.StickyNote2\r\nimport androidx.compose.material.icons.outlined.WarningAmber\r\nimport androidx.compose.material3.AlertDialog\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardColors\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CardElevation\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.SnackbarDuration\r\nimport androidx.compose.material3.SnackbarHost\r\nimport androidx.compose.material3.SnackbarHostState\r\nimport androidx.compose.material3.SnackbarResult\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.material3.rememberSwipeToDismissBoxState\r\nimport androidx.compose.material3.SwipeToDismissBox\r\nimport androidx.compose.material3.SwipeToDismissBoxValue\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.pluralStringResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.domain.model.LessonForToday\r\nimport com.tutorly.models.PaymentStatus\r\nimport com.tutorly.ui.components.GradientTopBarContainer\r\nimport com.tutorly.ui.lessoncard.LessonCardSheet\r\nimport com.tutorly.ui.lessoncard.LessonCardViewModel\r\nimport com.tutorly.ui.theme.DebtChipContent\r\nimport com.tutorly.ui.theme.DebtChipFill\r\nimport com.tutorly.ui.theme.PaidChipContent\r\nimport com.tutorly.ui.theme.extendedColors\r\nimport com.tutorly.ui.theme.TutorlyCardDefaults\r\nimport java.text.NumberFormat\r\nimport java.time.Instant\r\nimport java.time.ZoneId\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.Currency\r\nimport java.util.Locale\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TodayScreen(\r\n    modifier: Modifier = Modifier,\r\n    onAddStudent: () -> Unit = {},\r\n    onOpenStudentProfile: (Long) -> Unit = {},\r\n    onOpenDebtors: () -> Unit = {},\r\n    viewModel: TodayViewModel = hiltViewModel()\r\n) {\r\n    val uiState by viewModel.uiState.collectAsState()\r\n    val snackbarMessage by viewModel.snackbarMessage.collectAsState()\r\n    val snackbarHostState = remember { SnackbarHostState() }\r\n    val context = LocalContext.current\r\n    val lessonCardViewModel: LessonCardViewModel = hiltViewModel()\r\n    val lessonCardState by lessonCardViewModel.uiState.collectAsState()\r\n    var showCloseDayDialog by rememberSaveable { mutableStateOf(false) }\r\n\r\n    LessonCardSheet(\r\n        state = lessonCardState,\r\n        onDismissRequest = lessonCardViewModel::dismiss,\r\n        onStudentSelect = lessonCardViewModel::onStudentSelected,\r\n        onAddStudent = {\r\n            lessonCardViewModel.dismiss()\r\n            onAddStudent()\r\n        },\r\n        onDateSelect = lessonCardViewModel::onDateSelected,\r\n        onTimeSelect = lessonCardViewModel::onTimeSelected,\r\n        onDurationSelect = lessonCardViewModel::onDurationSelected,\r\n        onPriceChange = lessonCardViewModel::onPriceChanged,\r\n        onStatusSelect = lessonCardViewModel::onPaymentStatusSelected,\r\n        onNoteChange = lessonCardViewModel::onNoteChanged,\r\n        onDeleteLesson = lessonCardViewModel::deleteLesson,\r\n        onSnackbarConsumed = lessonCardViewModel::consumeSnackbar\r\n    )\r\n\r\n    if (showCloseDayDialog) {\r\n        ConfirmCloseDayDialog(\r\n            onConfirm = {\r\n                showCloseDayDialog = false\r\n                viewModel.onDayCloseConfirmed()\r\n            },\r\n            onDismiss = { showCloseDayDialog = false }\r\n        )\r\n    }\r\n\r\n    LaunchedEffect(snackbarMessage) {\r\n        val message = snackbarMessage ?: return@LaunchedEffect\r\n        val text = when (message.status) {\r\n            PaymentStatus.PAID -> context.getString(R.string.today_snackbar_paid)\r\n            PaymentStatus.DUE -> context.getString(R.string.today_snackbar_due)\r\n            else -> context.getString(R.string.today_snackbar_marked)\r\n        }\r\n        val action = context.getString(R.string.today_snackbar_action_undo)\r\n        val result = snackbarHostState.showSnackbar(\r\n            message = text,\r\n            actionLabel = action,\r\n            duration = SnackbarDuration.Short,\r\n            withDismissAction = true\r\n        )\r\n        viewModel.onSnackbarShown()\r\n        if (result == SnackbarResult.ActionPerformed) {\r\n            viewModel.onUndo(message.lessonId)\r\n        }\r\n    }\r\n\r\n    Scaffold(\r\n        modifier = modifier,\r\n        topBar = { TodayTopBar(state = uiState, onReopenDay = viewModel::onReopenDay) },\r\n        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },\r\n        containerColor = Color.Transparent\r\n    ) { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            when (val state = uiState) {\r\n                TodayUiState.Loading -> LoadingState()\r\n                is TodayUiState.Empty -> EmptyState(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors\r\n                )\r\n                is TodayUiState.ReviewPending -> ReviewPendingContent(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors\r\n                )\r\n                is TodayUiState.DayInProgress -> DayInProgressContent(\r\n                    state = state,\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors,\r\n                    onRequestCloseDay = { showCloseDayDialog = true }\r\n                )\r\n                is TodayUiState.DayClosed -> DayClosedContent(\r\n                    state = state,\r\n                    onLessonOpen = { lessonId ->\r\n                        lessonCardViewModel.open(lessonId)\r\n                    },\r\n                    onSwipeRight = viewModel::onSwipeRight,\r\n                    onSwipeLeft = viewModel::onSwipeLeft,\r\n                    onOpenStudentProfile = onOpenStudentProfile,\r\n                    onOpenDebtors = onOpenDebtors\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LoadingState() {\r\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\r\n        CircularProgressIndicator()\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun EmptyState(\r\n    state: TodayUiState.Empty,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit\r\n) {\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"empty_state_header\") {\r\n            Card(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                shape = MaterialTheme.shapes.large,\r\n                colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n                elevation = TutorlyCardDefaults.elevation()\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(horizontal = 20.dp, vertical = 24.dp),\r\n                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                    verticalArrangement = Arrangement.spacedBy(16.dp)\r\n                ) {\r\n                    Image(\r\n                        painter = painterResource(id = R.drawable.undraw_relaxation_jsge),\r\n                        contentDescription = null,\r\n                        modifier = Modifier.size(width = 320.dp, height = 240.dp)\r\n                    )\r\n                    Text(\r\n                        text = stringResource(R.string.today_empty_title),\r\n                        style = MaterialTheme.typography.titleMedium,\r\n                        textAlign = TextAlign.Center\r\n                    )\r\n                    Text(\r\n                        text = stringResource(R.string.today_empty_subtitle),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        textAlign = TextAlign.Center,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun DayInProgressContent(\r\n    state: TodayUiState.DayInProgress,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit,\r\n    onRequestCloseDay: () -> Unit\r\n) {\r\n    val listState = rememberLazyListState()\r\n    val (pendingLessons, markedLessons) = remember(state.lessons) {\r\n        state.lessons.partition { it.paymentStatus == PaymentStatus.UNPAID }\r\n    }\r\n    val allLessonsCompleted = remember(state.completedLessons, state.totalLessons) {\r\n        state.totalLessons > 0 && state.completedLessons == state.totalLessons\r\n    }\r\n    val showProgressSummary = !state.showCloseDayCallout\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        state = listState,\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        if (showProgressSummary) {\r\n            item(key = \"summary\") {\r\n                DayProgressSummary(\r\n                    completed = state.completedLessons,\r\n                    total = state.totalLessons,\r\n                    remaining = state.remainingLessons,\r\n                    allLessonsCompleted = allLessonsCompleted\r\n                )\r\n            }\r\n        }\r\n        if (state.showCloseDayCallout) {\r\n            item(key = \"close_day_callout\") {\r\n                CloseDayCallout(onRequestCloseDay = onRequestCloseDay)\r\n            }\r\n        }\r\n        items(pendingLessons, key = { it.id }) { lesson ->\r\n            TodayLessonRow(\r\n                lesson = lesson,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onClick = { onLessonOpen(lesson.id) },\r\n                onLongPress = { onLessonOpen(lesson.id) }\r\n            )\r\n        }\r\n        if (markedLessons.isNotEmpty()) {\r\n            item(key = \"marked_header\") {\r\n                SectionHeader(text = stringResource(id = R.string.today_marked_section_title))\r\n            }\r\n            items(markedLessons, key = { it.id }) { lesson ->\r\n                TodayLessonRow(\r\n                    lesson = lesson,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onClick = { onLessonOpen(lesson.id) },\r\n                    onLongPress = { onLessonOpen(lesson.id) }\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ReviewPendingContent(\r\n    state: TodayUiState.ReviewPending,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit\r\n) {\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"review_summary\") {\r\n            ReviewSummaryCard(\r\n                remaining = state.reviewLessons.size,\r\n                total = state.totalLessons\r\n            )\r\n        }\r\n        if (state.reviewLessons.isNotEmpty()) {\r\n            item(key = \"review_carousel\") {\r\n                LessonsReviewCarousel(\r\n                    lessons = state.reviewLessons,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onLessonOpen = onLessonOpen,\r\n                    onOpenStudentProfile = onOpenStudentProfile\r\n                )\r\n            }\r\n        }\r\n        item(key = \"review_marked_header\") {\r\n            SectionHeader(text = stringResource(id = R.string.today_review_marked_section))\r\n        }\r\n        item(key = \"review_marked_list\") {\r\n            if (state.markedLessons.isEmpty()) {\r\n                ReviewEmptyMarkedCard()\r\n            } else {\r\n                LessonsList(\r\n                    lessons = state.markedLessons,\r\n                    onSwipeRight = onSwipeRight,\r\n                    onSwipeLeft = onSwipeLeft,\r\n                    onLessonOpen = onLessonOpen,\r\n                    onOpenStudentProfile = onOpenStudentProfile\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ReviewSummaryCard(remaining: Int, total: Int) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally,\r\n            verticalArrangement = Arrangement.spacedBy(16.dp)\r\n        ) {\r\n            Image(\r\n                painter = painterResource(id = R.drawable.undraw_to_do_list_o3jf),\r\n                contentDescription = null,\r\n                modifier = Modifier.size(width = 160.dp, height = 120.dp)\r\n            )\r\n            Column(\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                verticalArrangement = Arrangement.spacedBy(8.dp)\r\n            ) {\r\n                Text(\r\n                    text = stringResource(id = R.string.today_review_title),\r\n                    style = MaterialTheme.typography.titleMedium,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Text(\r\n                    text = stringResource(id = R.string.today_review_subtitle),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                if (total > 0) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.today_review_progress, remaining, total),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.primary\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun LessonsReviewCarousel(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit\r\n) {\r\n    val currentLesson = lessons.firstOrNull()\r\n    if (currentLesson == null) {\r\n        return\r\n    }\r\n    Column(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        TodayLessonRow(\r\n            lesson = currentLesson,\r\n            onSwipeRight = onSwipeRight,\r\n            onSwipeLeft = onSwipeLeft,\r\n            onClick = { onLessonOpen(currentLesson.id) },\r\n            onLongPress = { onOpenStudentProfile(currentLesson.studentId) },\r\n            cardElevation = TutorlyCardDefaults.elevation()\r\n        )\r\n        Row(\r\n            modifier = Modifier.fillMaxWidth(),\r\n            horizontalArrangement = Arrangement.SpaceBetween\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.today_review_hint_due),\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onErrorContainer\r\n            )\r\n            Text(\r\n                text = stringResource(id = R.string.today_review_hint_paid),\r\n                style = MaterialTheme.typography.bodySmall,\r\n                color = MaterialTheme.colorScheme.onTertiaryContainer\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ReviewEmptyMarkedCard() {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 24.dp),\r\n            contentAlignment = Alignment.Center\r\n        ) {\r\n            Text(\r\n                text = stringResource(id = R.string.today_review_empty_marked),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                textAlign = TextAlign.Center\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SectionHeader(text: String) {\r\n    Text(\r\n        text = text,\r\n        style = MaterialTheme.typography.titleSmall,\r\n        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(horizontal = 4.dp, vertical = 4.dp)\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun DayProgressSummary(\r\n    completed: Int,\r\n    total: Int,\r\n    remaining: Int,\r\n    allLessonsCompleted: Boolean\r\n) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            val summaryText = if (allLessonsCompleted) {\r\n                stringResource(id = R.string.today_progress_all_done)\r\n            } else {\r\n                stringResource(R.string.today_progress_summary, completed, total)\r\n            }\r\n            Text(\r\n                text = summaryText,\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            if (!allLessonsCompleted) {\r\n                val remainingText = pluralStringResource(\r\n                    id = R.plurals.today_progress_remaining,\r\n                    count = remaining,\r\n                    remaining\r\n                )\r\n                Text(\r\n                    text = remainingText,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun CloseDayCallout(onRequestCloseDay: () -> Unit) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Text(\r\n                text = stringResource(R.string.today_close_day_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            Text(\r\n                text = stringResource(R.string.today_close_day_subtitle),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n            Button(onClick = onRequestCloseDay) {\r\n                Text(text = stringResource(R.string.today_close_day_action))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ConfirmCloseDayDialog(\r\n    onConfirm: () -> Unit,\r\n    onDismiss: () -> Unit\r\n) {\r\n    AlertDialog(\r\n        onDismissRequest = onDismiss,\r\n        title = { Text(text = stringResource(R.string.today_close_day_dialog_title)) },\r\n        text = { Text(text = stringResource(R.string.today_close_day_dialog_body)) },\r\n        confirmButton = {\r\n            TextButton(onClick = onConfirm) {\r\n                Text(text = stringResource(R.string.today_close_day_dialog_confirm))\r\n            }\r\n        },\r\n        dismissButton = {\r\n            TextButton(onClick = onDismiss) {\r\n                Text(text = stringResource(R.string.today_close_day_dialog_dismiss))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun DayClosedContent(\r\n    state: TodayUiState.DayClosed,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit\r\n) {\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    LazyColumn(\r\n        modifier = Modifier.fillMaxSize(),\r\n        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),\r\n        verticalArrangement = Arrangement.spacedBy(16.dp)\r\n    ) {\r\n        item(key = \"summary\") {\r\n            DayClosedSummary(\r\n                paidAmountCents = state.paidAmountCents,\r\n                dueAmountCents = state.todayDueAmountCents,\r\n                formatter = currencyFormatter\r\n            )\r\n        }\r\n        item(key = \"today_debtors\") {\r\n            TodayDebtorsSection(\r\n                lessons = state.todayDueLessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile\r\n            )\r\n        }\r\n        if (state.lessons.isNotEmpty()) {\r\n            item(key = \"closed_lessons\") {\r\n                ClosedDayLessonsSection(\r\n                    lessons = state.lessons,\r\n                    onLessonOpen = onLessonOpen\r\n                )\r\n            }\r\n        }\r\n        item(key = \"past_debtors\") {\r\n            PastDebtorsCollapsible(\r\n                lessons = state.pastDueLessonsPreview,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                onOpenDebtors = onOpenDebtors,\r\n                hasMore = state.hasMorePastDueLessons\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DayClosedSummary(\r\n    paidAmountCents: Long,\r\n    dueAmountCents: Long,\r\n    formatter: NumberFormat\r\n) {\r\n    Card(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n        elevation = TutorlyCardDefaults.elevation()\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp)\r\n            ) {\r\n                SummaryMetric(\r\n                    modifier = Modifier.weight(1f),\r\n                    label = stringResource(R.string.today_closed_income_label),\r\n                    value = formatCurrency(paidAmountCents, formatter),\r\n                    valueColor = MaterialTheme.colorScheme.tertiary\r\n                )\r\n                SummaryMetric(\r\n                    modifier = Modifier.weight(1f),\r\n                    label = stringResource(R.string.today_closed_debt_label),\r\n                    value = formatCurrency(dueAmountCents, formatter),\r\n                    valueColor = MaterialTheme.colorScheme.error\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun SummaryMetric(\r\n    modifier: Modifier,\r\n    label: String,\r\n    value: String,\r\n    valueColor: Color\r\n) {\r\n    Column(\r\n        modifier = modifier,\r\n        verticalArrangement = Arrangement.spacedBy(6.dp)\r\n    ) {\r\n        Text(\r\n            text = label,\r\n            style = MaterialTheme.typography.bodySmall,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Text(\r\n            text = value,\r\n            style = MaterialTheme.typography.headlineSmall,\r\n            color = valueColor,\r\n            maxLines = 1,\r\n            overflow = TextOverflow.Ellipsis\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun TodayDebtorsSection(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit\r\n) {\r\n    Column(\r\n        modifier = Modifier.fillMaxWidth(),\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        Text(\r\n            text = stringResource(R.string.today_debtors_today_title),\r\n            style = MaterialTheme.typography.titleMedium\r\n        )\r\n        if (lessons.isEmpty()) {\r\n            Surface(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                shape = MaterialTheme.shapes.large,\r\n                color = MaterialTheme.colorScheme.surface,\r\n                tonalElevation = 0.dp\r\n            ) {\r\n                Text(\r\n                    text = stringResource(R.string.today_debtors_empty),\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    modifier = Modifier.padding(horizontal = 20.dp, vertical = 18.dp)\r\n                )\r\n            }\r\n        } else {\r\n            LessonsList(\r\n                lessons = lessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ClosedDayLessonsSection(\r\n    lessons: List<LessonForToday>,\r\n    onLessonOpen: (Long) -> Unit\r\n) {\r\n    val subtitle = stringResource(\r\n        R.string.today_closed_lessons_section_subtitle,\r\n        lessons.size\r\n    )\r\n    CollapsibleSection(\r\n        title = stringResource(R.string.today_closed_lessons_section_title),\r\n        subtitle = subtitle\r\n    ) {\r\n        lessons.forEach { lesson ->\r\n            LessonCard(\r\n                lesson = lesson,\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { onLessonOpen(lesson.id) },\r\n                cardElevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PastDebtorsCollapsible(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    onOpenDebtors: () -> Unit,\r\n    hasMore: Boolean\r\n) {\r\n    val subtitle = if (hasMore) {\r\n        stringResource(R.string.today_debtors_past_subtitle_more, lessons.size)\r\n    } else {\r\n        stringResource(R.string.today_debtors_past_subtitle, lessons.size)\r\n    }\r\n    CollapsibleSection(\r\n        title = stringResource(R.string.today_debtors_past_title),\r\n        titleColor = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        titleTextAlign = TextAlign.Center,\r\n        subtitle = subtitle,\r\n        inlineIndicator = true\r\n    ) {\r\n        if (lessons.isEmpty()) {\r\n            Text(\r\n                text = stringResource(R.string.today_debtors_past_empty),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        } else {\r\n            LessonsList(\r\n                lessons = lessons,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onLessonOpen = onLessonOpen,\r\n                onOpenStudentProfile = onOpenStudentProfile,\r\n                cardElevation = CardDefaults.cardElevation(defaultElevation = 0.dp)\r\n            )\r\n        }\r\n        if (hasMore) {\r\n            Button(onClick = onOpenDebtors) {\r\n                Text(text = stringResource(R.string.today_debtors_more_cta))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun CollapsibleSection(\r\n    title: String,\r\n    modifier: Modifier = Modifier,\r\n    subtitle: String? = null,\r\n    titleColor: Color = MaterialTheme.colorScheme.onSurface,\r\n    titleTextAlign: TextAlign = TextAlign.Start,\r\n    inlineIndicator: Boolean = false,\r\n    content: @Composable ColumnScope.() -> Unit\r\n) {\r\n    var expanded by rememberSaveable { mutableStateOf(false) }\r\n    Column(\r\n        modifier = modifier\r\n            .fillMaxWidth()\r\n            .animateContentSize()\r\n    ) {\r\n        if (inlineIndicator) {\r\n            val boxAlignment = when (titleTextAlign) {\r\n                TextAlign.Center -> Alignment.Center\r\n                TextAlign.End -> Alignment.CenterEnd\r\n                else -> Alignment.CenterStart\r\n            }\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { expanded = !expanded }\r\n                    .padding(vertical = 6.dp)\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.align(boxAlignment),\r\n                    horizontalAlignment = Alignment.Start,\r\n                    verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                ) {\r\n                    Row(\r\n                        verticalAlignment = Alignment.CenterVertically\r\n                    ) {\r\n                        Text(\r\n                            text = title,\r\n                            style = MaterialTheme.typography.titleMedium,\r\n                            color = titleColor,\r\n                            textAlign = titleTextAlign\r\n                        )\r\n                        Spacer(modifier = Modifier.width(8.dp))\r\n                        Icon(\r\n                            imageVector = if (expanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,\r\n                            contentDescription = null,\r\n                            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                    if (subtitle != null) {\r\n                        Text(\r\n                            text = subtitle,\r\n                            style = MaterialTheme.typography.bodySmall,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .clickable { expanded = !expanded }\r\n                    .padding(vertical = 6.dp),\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.weight(1f),\r\n                    verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                ) {\r\n                    Text(\r\n                        text = title,\r\n                        style = MaterialTheme.typography.titleMedium,\r\n                        color = titleColor,\r\n                        textAlign = titleTextAlign,\r\n                        modifier = Modifier.fillMaxWidth()\r\n                    )\r\n                    if (subtitle != null) {\r\n                        Text(\r\n                            text = subtitle,\r\n                            style = MaterialTheme.typography.bodySmall,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                }\r\n                Icon(\r\n                    imageVector = if (expanded) Icons.Filled.ExpandLess else Icons.Filled.ExpandMore,\r\n                    contentDescription = null,\r\n                    tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                )\r\n            }\r\n        }\r\n        if (expanded) {\r\n            Spacer(modifier = Modifier.height(12.dp))\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                verticalArrangement = Arrangement.spacedBy(12.dp),\r\n                content = content\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonsList(\r\n    lessons: List<LessonForToday>,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onLessonOpen: (Long) -> Unit,\r\n    onOpenStudentProfile: (Long) -> Unit,\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation()\r\n) {\r\n    Column(\r\n        verticalArrangement = Arrangement.spacedBy(12.dp)\r\n    ) {\r\n        lessons.forEach { lesson ->\r\n            TodayLessonRow(\r\n                lesson = lesson,\r\n                onSwipeRight = onSwipeRight,\r\n                onSwipeLeft = onSwipeLeft,\r\n                onClick = { onLessonOpen(lesson.id) },\r\n                onLongPress = { onOpenStudentProfile(lesson.studentId) },\r\n                cardElevation = cardElevation\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class, ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun TodayLessonRow(\r\n    lesson: LessonForToday,\r\n    onSwipeRight: (Long) -> Unit,\r\n    onSwipeLeft: (Long) -> Unit,\r\n    onClick: () -> Unit,\r\n    onLongPress: () -> Unit,\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation()\r\n) {\r\n    val dismissState = rememberSwipeToDismissBoxState(confirmValueChange = { value ->\r\n        when (value) {\r\n            SwipeToDismissBoxValue.StartToEnd -> {\r\n                onSwipeRight(lesson.id)\r\n                false\r\n            }\r\n            SwipeToDismissBoxValue.EndToStart -> {\r\n                onSwipeLeft(lesson.id)\r\n                false\r\n            }\r\n            else -> false\r\n        }\r\n    })\r\n\r\n    SwipeToDismissBox(\r\n        state = dismissState,\r\n        modifier = Modifier.fillMaxWidth(),\r\n        backgroundContent = { DismissBackground(state = dismissState) }\r\n    ) {\r\n        LessonCard(\r\n            lesson = lesson,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .combinedClickable(\r\n                    onClick = onClick,\r\n                    onLongClick = onLongPress\r\n                ),\r\n            cardElevation = cardElevation\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun DismissBackground(state: androidx.compose.material3.SwipeToDismissBoxState) {\r\n    val target = state.targetValue\r\n    if (target == SwipeToDismissBoxValue.Settled) {\r\n        return\r\n    }\r\n    val color: Color\r\n    val icon: ImageVector\r\n    val tint: Color\r\n    val alignment: Alignment\r\n    if (target == SwipeToDismissBoxValue.StartToEnd) {\r\n        color = MaterialTheme.colorScheme.tertiaryContainer\r\n        icon = Icons.Filled.Check\r\n        tint = MaterialTheme.colorScheme.onTertiaryContainer\r\n        alignment = Alignment.CenterStart\r\n    } else {\r\n        color = MaterialTheme.colorScheme.errorContainer\r\n        icon = Icons.Outlined.WarningAmber\r\n        tint = MaterialTheme.colorScheme.onErrorContainer\r\n        alignment = Alignment.CenterEnd\r\n    }\r\n    Box(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .background(color),\r\n        contentAlignment = alignment\r\n    ) {\r\n        Icon(\r\n            imageVector = icon,\r\n            contentDescription = null,\r\n            tint = tint,\r\n            modifier = Modifier\r\n                .padding(horizontal = 24.dp)\r\n                .size(28.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nprivate fun LessonCard(\r\n    lesson: LessonForToday,\r\n    modifier: Modifier = Modifier,\r\n    cardColors: CardColors = TutorlyCardDefaults.colors(containerColor = Color.White),\r\n    cardElevation: CardElevation = TutorlyCardDefaults.elevation()\r\n) {\r\n    val zoneId = remember { ZoneId.systemDefault() }\r\n    val timeFormatter = remember { DateTimeFormatter.ofPattern(\"HH:mm\") }\r\n    val currencyFormatter = rememberCurrencyFormatter()\r\n    val startTime = remember(lesson.startAt) { lesson.startAt.atZone(zoneId).toLocalTime() }\r\n    val timeText = remember(startTime) { timeFormatter.format(startTime) }\r\n    val durationMinutes = remember(lesson.duration) { lesson.duration.toMinutes().toInt().coerceAtLeast(0) }\r\n    val amount = remember(lesson.priceCents) { formatCurrency(lesson.priceCents.toLong(), currencyFormatter) }\r\n    val studentName = remember(lesson.studentName) { lesson.studentName }\r\n    val normalizedLessonTitle = lesson.lessonTitle\r\n        ?.takeIf { it.isNotBlank() }\r\n        ?.trim()\r\n    val normalizedSubjectName = lesson.subjectName\r\n        ?.takeIf { it.isNotBlank() }\r\n        ?.trim()\r\n    val subjectTitle = normalizedLessonTitle\r\n        ?: normalizedSubjectName\r\n        ?: stringResource(id = R.string.lesson_card_subject_placeholder)\r\n    val grade = normalizeGrade(lesson.studentGrade)\r\n    val subtitle = listOfNotNull(grade, subjectTitle).joinToString(separator = \" • \")\r\n    val durationLabel = stringResource(R.string.today_duration_format, durationMinutes)\r\n    val isFutureLesson = remember(lesson.startAt) { lesson.startAt.isAfter(Instant.now()) }\r\n\r\n    Card(\r\n        modifier = modifier,\r\n        shape = MaterialTheme.shapes.large,\r\n        colors = cardColors,\r\n        elevation = cardElevation\r\n    ) {\r\n        Column(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .padding(horizontal = 20.dp, vertical = 18.dp),\r\n            verticalArrangement = Arrangement.spacedBy(12.dp)\r\n        ) {\r\n            Row(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp),\r\n                verticalAlignment = Alignment.Top\r\n            ) {\r\n                Column(\r\n                    modifier = Modifier.weight(1f),\r\n                    verticalArrangement = Arrangement.spacedBy(4.dp)\r\n                ) {\r\n                    Text(\r\n                        text = studentName,\r\n                        style = MaterialTheme.typography.titleMedium,\r\n                        maxLines = 1,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                    if (subtitle.isNotBlank()) {\r\n                        Text(\r\n                            text = subtitle,\r\n                            style = MaterialTheme.typography.bodyMedium,\r\n                            color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                            maxLines = 1,\r\n                            overflow = TextOverflow.Ellipsis\r\n                        )\r\n                    }\r\n                }\r\n                PaymentStatusChip(\r\n                    status = lesson.paymentStatus,\r\n                    isFutureLesson = isFutureLesson\r\n                )\r\n            }\r\n            androidx.compose.foundation.layout.FlowRow(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalArrangement = Arrangement.spacedBy(12.dp),\r\n                verticalArrangement = Arrangement.spacedBy(8.dp)\r\n            ) {\r\n                LessonMetaPill(text = timeText)\r\n                LessonMetaPill(text = durationLabel)\r\n                LessonMetaPill(text = amount)\r\n            }\r\n            val note = lesson.note?.takeIf { it.isNotBlank() }\r\n            if (note != null) {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\r\n                ) {\r\n                    Icon(\r\n                        imageVector = Icons.Outlined.StickyNote2,\r\n                        contentDescription = null,\r\n                        tint = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        modifier = Modifier.size(18.dp)\r\n                    )\r\n                    Text(\r\n                        text = note,\r\n                        style = MaterialTheme.typography.bodySmall,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                        maxLines = 2,\r\n                        overflow = TextOverflow.Ellipsis\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun PaymentStatusChip(\r\n    status: PaymentStatus,\r\n    isFutureLesson: Boolean,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    if (status == PaymentStatus.UNPAID) return\r\n    val label = when (status) {\r\n        PaymentStatus.PAID -> stringResource(\r\n            if (isFutureLesson) R.string.lesson_card_status_prepaid else R.string.lesson_status_paid\r\n        )\r\n        PaymentStatus.DUE -> stringResource(R.string.lesson_status_due)\r\n        PaymentStatus.CANCELLED -> stringResource(R.string.lesson_status_cancelled)\r\n        PaymentStatus.UNPAID -> return\r\n    }\r\n    val (container, content) = when (status) {\r\n        PaymentStatus.PAID -> MaterialTheme.extendedColors.accent to PaidChipContent\r\n        PaymentStatus.DUE -> DebtChipFill to DebtChipContent\r\n        else -> MaterialTheme.colorScheme.surfaceVariant to MaterialTheme.colorScheme.onSurfaceVariant\r\n    }\r\n    Surface(\r\n        color = container,\r\n        shape = RoundedCornerShape(12.dp),\r\n        shadowElevation = 4.dp,\r\n        modifier = modifier\r\n    ) {\r\n        Text(\r\n            text = label,\r\n            color = content,\r\n            style = MaterialTheme.typography.labelSmall,\r\n            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun LessonMetaPill(text: String, modifier: Modifier = Modifier) {\r\n    Surface(\r\n        color = MaterialTheme.colorScheme.surface,\r\n        contentColor = MaterialTheme.colorScheme.onSurfaceVariant,\r\n        shape = RoundedCornerShape(50),\r\n        modifier = modifier\r\n    ) {\r\n        Text(\r\n            text = text,\r\n            style = MaterialTheme.typography.labelSmall,\r\n            modifier = Modifier.padding(horizontal = 10.dp, vertical = 4.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun TodayTopBar(state: TodayUiState, onReopenDay: () -> Unit) {\r\n    GradientTopBarContainer {\r\n        val titleRes = when (state) {\r\n            is TodayUiState.DayClosed -> R.string.today_topbar_closed\r\n            else -> R.string.today_title\r\n        }\r\n        val canReopen = (state as? TodayUiState.DayClosed)?.canReopen == true\r\n        TopAppBar(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(80.dp),\r\n            title = {\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .fillMaxHeight(),\r\n                    contentAlignment = Alignment.Center\r\n\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(titleRes),\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant,\r\n                    )\r\n                }\r\n            },\r\n            actions = {\r\n                if (canReopen) {\r\n                    IconButton(onClick = onReopenDay) {\r\n                        Icon(\r\n                            imageVector = Icons.Outlined.LockOpen,\r\n                            contentDescription = stringResource(R.string.today_reopen_day_action),\r\n                            tint = MaterialTheme.colorScheme.onSurfaceVariant\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n            colors = TopAppBarDefaults.topAppBarColors(\r\n                containerColor = MaterialTheme.colorScheme.surface,\r\n                scrolledContainerColor = Color.Transparent,\r\n                titleContentColor = MaterialTheme.colorScheme.onSurfaceVariant\r\n            ),\r\n            windowInsets = androidx.compose.foundation.layout.WindowInsets(0, 0, 0, 0)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun rememberCurrencyFormatter(): NumberFormat {\r\n    return remember {\r\n        NumberFormat.getCurrencyInstance(Locale.getDefault()).apply {\r\n            currency = Currency.getInstance(\"RUB\")\r\n            maximumFractionDigits = 0\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun formatCurrency(amountCents: Long, formatter: NumberFormat): String {\r\n    return formatter.format(amountCents / 100.0)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(revision bbba0423eed2a838fdb93dee7b34ecf1280a693d)
+++ b/app/src/main/java/com/tutorly/ui/screens/TodayScreen.kt	(date 1761507780210)
@@ -1254,7 +1254,8 @@
         TopAppBar(
             modifier = Modifier
                 .fillMaxWidth()
-                .height(80.dp),
+                .height(80.dp)
+                .padding(0.dp),
             title = {
                 Box(
                     modifier = Modifier
@@ -1265,7 +1266,7 @@
                 ) {
                     Text(
                         text = stringResource(titleRes),
-                        color = MaterialTheme.colorScheme.onSurfaceVariant,
+                        color = MaterialTheme.colorScheme.onSurface,
                     )
                 }
             },
@@ -1275,7 +1276,7 @@
                         Icon(
                             imageVector = Icons.Outlined.LockOpen,
                             contentDescription = stringResource(R.string.today_reopen_day_action),
-                            tint = MaterialTheme.colorScheme.onSurfaceVariant
+                            tint = MaterialTheme.colorScheme.onSurface
                         )
                     }
                 }
@@ -1283,7 +1284,7 @@
             colors = TopAppBarDefaults.topAppBarColors(
                 containerColor = MaterialTheme.colorScheme.surface,
                 scrolledContainerColor = Color.Transparent,
-                titleContentColor = MaterialTheme.colorScheme.onSurfaceVariant
+                titleContentColor = MaterialTheme.colorScheme.onSurface
             ),
             windowInsets = androidx.compose.foundation.layout.WindowInsets(0, 0, 0, 0)
         )
