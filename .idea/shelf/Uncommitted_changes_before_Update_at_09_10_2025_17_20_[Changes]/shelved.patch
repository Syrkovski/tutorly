Index: app/src/main/java/com/tutorly/navigation/AppNav.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.navigation\r\n\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.systemBars\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport androidx.navigation.navArgument\r\nimport com.tutorly.ui.CalendarScreen\r\nimport com.tutorly.ui.components.AppBottomBar\r\nimport com.tutorly.ui.components.AppTopBar\r\nimport com.tutorly.ui.screens.*\r\n\r\n\r\nconst val ROUTE_CALENDAR = \"calendar\"\r\nconst val ROUTE_TODAY = \"today\"\r\nconst val ROUTE_STUDENTS = \"students\"\r\nconst val ROUTE_FINANCE = \"finance\"\r\nconst val ROUTE_STUDENT_NEW = \"student/new\"\r\nconst val ROUTE_STUDENT_DETAILS = \"student/{studentId}\"\r\nconst val ROUTE_STUDENT_EDIT = \"student/{studentId}/edit\"\r\nconst val ROUTE_LESSON_NEW = \"lesson/new?studentId={studentId}\" // под автоподстановку\r\n\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace(\"{studentId}\", studentId.toString())\r\n\r\nprivate fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace(\"{studentId}\", studentId.toString())\r\nprivate fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace(\"{studentId}\", studentId.toString())\r\n\r\n@Composable\r\nfun AppNavRoot() {\r\n    val nav = rememberNavController()\r\n    val backStack by nav.currentBackStackEntryAsState()\r\n    val route = backStack?.destination?.route ?: ROUTE_CALENDAR\r\n\r\n    // какой топбар показывать\r\n    val showGlobalTopBar = when (route) {\r\n        ROUTE_STUDENTS, ROUTE_FINANCE -> true   // тут простой заголовок уместен\r\n        else -> false                   // calendar/today рисуют верх сами\r\n    }\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            if (showGlobalTopBar) {\r\n                AppTopBar(\r\n                    title = when (route) {\r\n                        ROUTE_STUDENTS -> \"Ученики\"\r\n                        ROUTE_FINANCE -> \"Финансы\"\r\n                        else -> \"\"\r\n                    },\r\n                    onAddClick = when (route) {\r\n                        ROUTE_STUDENTS -> ({\r\n                            nav.navigate(ROUTE_STUDENT_NEW) {\r\n                                launchSingleTop = true\r\n                            }\r\n                        })\r\n                        else -> null\r\n                    }\r\n                )\r\n            }\r\n        },\r\n        bottomBar = {\r\n            AppBottomBar(\r\n                currentRoute = route,\r\n                onSelect = { dest ->\r\n                    nav.navigate(dest) {\r\n                        launchSingleTop = true\r\n                        restoreState = true\r\n                        popUpTo(nav.graph.startDestinationId) { saveState = true }\r\n                    }\r\n                }\r\n            )\r\n        },\r\n        // чтобы контент корректно учитывал статус/навигационные панели\r\n        contentWindowInsets = WindowInsets.systemBars\r\n    ) { innerPadding ->\r\n        NavHost(\r\n            navController = nav,\r\n            startDestination = ROUTE_CALENDAR,\r\n            modifier = Modifier.padding(innerPadding)\r\n        ) {\r\n            composable(ROUTE_CALENDAR) { CalendarScreen() }   // сам рисует свой верх (месяц/табы/лента)\r\n            composable(ROUTE_TODAY)    { TodayScreen() }      // сам рисует свой верх (заголовок + счетчики)\r\n            composable(ROUTE_STUDENTS) {\r\n                StudentsScreen(\r\n                    onStudentClick = { id ->\r\n                        nav.navigate(studentDetailsRoute(id)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(ROUTE_STUDENT_NEW) {\r\n                StudentEditorScreen(\r\n                    onClose = { nav.popBackStack() },\r\n                    onSaved = { newId ->\r\n                        nav.popBackStack()\r\n                        nav.navigate(studentDetailsRoute(newId)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(\r\n                route = ROUTE_STUDENT_DETAILS,\r\n                arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n            ) { entry ->\r\n                val studentId = entry.arguments?.getLong(\"studentId\") ?: return@composable\r\n                StudentDetailsScreen(\r\n                    onBack = { nav.popBackStack() },\r\n                    onEdit = {\r\n                        nav.navigate(studentEditRoute(studentId)) {\r\n                            launchSingleTop = true\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n            composable(\r\n                route = ROUTE_STUDENT_EDIT,\r\n                arguments = listOf(navArgument(\"studentId\") { type = NavType.LongType })\r\n            ) {\r\n                StudentEditorScreen(\r\n                    onClose = { nav.popBackStack() },\r\n                    onSaved = {\r\n                        nav.popBackStack()\r\n                    }\r\n                )\r\n            }\r\n            composable(ROUTE_FINANCE)  { FinanceScreen() }\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/navigation/AppNav.kt b/app/src/main/java/com/tutorly/navigation/AppNav.kt
--- a/app/src/main/java/com/tutorly/navigation/AppNav.kt	(revision cb70b7f1fb876d355f0ef9259c88aecf5d25173a)
+++ b/app/src/main/java/com/tutorly/navigation/AppNav.kt	(date 1760000197227)
@@ -31,9 +31,6 @@
 private fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace("{studentId}", studentId.toString())
 private fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace("{studentId}", studentId.toString())
 
-private fun studentDetailsRoute(studentId: Long) = ROUTE_STUDENT_DETAILS.replace("{studentId}", studentId.toString())
-private fun studentEditRoute(studentId: Long) = ROUTE_STUDENT_EDIT.replace("{studentId}", studentId.toString())
-
 @Composable
 fun AppNavRoot() {
     val nav = rememberNavController()
Index: app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tutorly.ui.screens\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.rememberScrollState\r\nimport androidx.compose.foundation.verticalScroll\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport com.tutorly.R\r\nimport com.tutorly.models.Student\r\nimport com.tutorly.ui.components.PaymentBadge\r\nimport java.text.NumberFormat\r\nimport java.util.Locale\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun StudentDetailsScreen(\r\n    onBack: () -> Unit,\r\n    onEdit: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    vm: StudentDetailsViewModel = hiltViewModel(),\r\n) {\r\n    val state by vm.uiState.collectAsState()\r\n    val scrollState = rememberScrollState()\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            StudentDetailsTopBar(\r\n                title = state.student?.name ?: stringResource(id = R.string.student_details_title_placeholder),\r\n                onBack = onBack,\r\n                onEdit = if (state.student != null) onEdit else null\r\n            )\r\n        }\r\n    ) { innerPadding ->\r\n        when {\r\n            state.isLoading -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    CircularProgressIndicator()\r\n                }\r\n            }\r\n            state.student == null -> {\r\n                Box(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding),\r\n                    contentAlignment = Alignment.Center\r\n                ) {\r\n                    Text(\r\n                        text = stringResource(id = R.string.student_details_missing),\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = MaterialTheme.colorScheme.onSurfaceVariant\r\n                    )\r\n                }\r\n            }\r\n            else -> {\r\n                Column(\r\n                    modifier = modifier\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                        .verticalScroll(scrollState)\r\n                        .padding(horizontal = 16.dp, vertical = 20.dp),\r\n                    verticalArrangement = Arrangement.spacedBy(20.dp)\r\n                ) {\r\n                    StudentPaymentsCard(\r\n                        hasDebt = state.hasDebt,\r\n                        totalDebtCents = state.totalDebtCents\r\n                    )\r\n                    StudentContactCard(student = state.student)\r\n                    StudentNotesCard(note = state.student.note)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nprivate fun StudentDetailsTopBar(\r\n    title: String,\r\n    onBack: () -> Unit,\r\n    onEdit: (() -> Unit)?\r\n) {\r\n    TopAppBar(\r\n        title = {\r\n            Text(\r\n                text = title,\r\n                maxLines = 1,\r\n                overflow = TextOverflow.Ellipsis\r\n            )\r\n        },\r\n        navigationIcon = {\r\n            IconButton(onClick = onBack) {\r\n                Icon(\r\n                    imageVector = Icons.Default.ArrowBack,\r\n                    contentDescription = stringResource(id = R.string.student_details_back)\r\n                )\r\n            }\r\n        },\r\n        actions = {\r\n            onEdit?.let {\r\n                IconButton(onClick = it) {\r\n                    Icon(\r\n                        imageVector = Icons.Default.Edit,\r\n                        contentDescription = stringResource(id = R.string.student_details_edit)\r\n                    )\r\n                }\r\n            }\r\n        },\r\n        colors = TopAppBarDefaults.topAppBarColors(\r\n            containerColor = MaterialTheme.colorScheme.surface,\r\n            titleContentColor = MaterialTheme.colorScheme.onSurface\r\n        )\r\n    )\r\n}\r\n\r\n@Composable\r\nprivate fun StudentPaymentsCard(\r\n    hasDebt: Boolean,\r\n    totalDebtCents: Long,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    val formatter = remember { NumberFormat.getCurrencyInstance(Locale(\"ru\", \"RU\")) }\r\n    val formattedDebt = remember(totalDebtCents) { formatter.format(totalDebtCents / 100.0) }\r\n    Card(\r\n        modifier = modifier.fillMaxWidth(),\r\n        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)\r\n    ) {\r\n        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_payments_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            PaymentBadge(paid = !hasDebt)\r\n            Text(\r\n                text = if (hasDebt) {\r\n                    stringResource(id = R.string.student_details_debt_amount, formattedDebt)\r\n                } else {\r\n                    stringResource(id = R.string.student_details_no_debt)\r\n                },\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentContactCard(\r\n    student: Student,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(modifier = modifier.fillMaxWidth()) {\r\n        Column(Modifier.padding(16.dp), verticalArrangement = Arrangement.spacedBy(12.dp)) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_contact_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            InfoRow(\r\n                label = stringResource(id = R.string.student_details_phone_label),\r\n                value = student.phone,\r\n                placeholder = stringResource(id = R.string.student_details_phone_placeholder)\r\n            )\r\n            InfoRow(\r\n                label = stringResource(id = R.string.student_details_messenger_label),\r\n                value = student.messenger,\r\n                placeholder = stringResource(id = R.string.student_details_messenger_placeholder)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun StudentNotesCard(\r\n    note: String?,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Card(modifier = modifier.fillMaxWidth()) {\r\n        Column(Modifier.padding(16.dp)) {\r\n            Text(\r\n                text = stringResource(id = R.string.student_details_notes_title),\r\n                style = MaterialTheme.typography.titleMedium\r\n            )\r\n            Spacer(modifier = Modifier.height(8.dp))\r\n            Text(\r\n                text = note?.takeIf { it.isNotBlank() }\r\n                    ?: stringResource(id = R.string.student_details_notes_placeholder),\r\n                style = MaterialTheme.typography.bodyMedium,\r\n                color = MaterialTheme.colorScheme.onSurfaceVariant\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun InfoRow(\r\n    label: String,\r\n    value: String?,\r\n    placeholder: String,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Column(modifier = modifier.fillMaxWidth()) {\r\n        Text(\r\n            text = label,\r\n            style = MaterialTheme.typography.labelMedium,\r\n            color = MaterialTheme.colorScheme.onSurfaceVariant\r\n        )\r\n        Spacer(modifier = Modifier.height(4.dp))\r\n        Text(\r\n            text = value?.takeIf { it.isNotBlank() } ?: placeholder,\r\n            style = MaterialTheme.typography.bodyLarge,\r\n            color = if (value.isNullOrBlank()) {\r\n                MaterialTheme.colorScheme.onSurfaceVariant\r\n            } else {\r\n                MaterialTheme.colorScheme.onSurface\r\n            }\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt
--- a/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(revision cb70b7f1fb876d355f0ef9259c88aecf5d25173a)
+++ b/app/src/main/java/com/tutorly/ui/screens/StudentDetailsScreen.kt	(date 1759999196478)
@@ -98,8 +98,8 @@
                         hasDebt = state.hasDebt,
                         totalDebtCents = state.totalDebtCents
                     )
-                    StudentContactCard(student = state.student)
-                    StudentNotesCard(note = state.student.note)
+                    StudentContactCard(student = state.student!!)
+                    StudentNotesCard(note = state.student!!.note)
                 }
             }
         }
